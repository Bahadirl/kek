
aaaaaaaaaaaaaaaaaaaaaaa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac28  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  0800adf8  0800adf8  0000bdf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b218  0800b218  0000d1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b218  0800b218  0000c218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b220  0800b220  0000d1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b220  0800b220  0000c220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b224  0800b224  0000c224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800b228  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000480c  200001e0  0800b408  0000d1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049ec  0800b408  0000d9ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c9e  00000000  00000000  0000d210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039eb  00000000  00000000  00025eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001528  00000000  00000000  000298a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000105a  00000000  00000000  0002adc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002938d  00000000  00000000  0002be22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a0ea  00000000  00000000  000551af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc671  00000000  00000000  0006f299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016b90a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000687c  00000000  00000000  0016b950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001721cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ade0 	.word	0x0800ade0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800ade0 	.word	0x0800ade0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4a07      	ldr	r2, [pc, #28]	@ (8000f04 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ee8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	4a06      	ldr	r2, [pc, #24]	@ (8000f08 <vApplicationGetIdleTaskMemory+0x30>)
 8000eee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2280      	movs	r2, #128	@ 0x80
 8000ef4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ef6:	bf00      	nop
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	200001fc 	.word	0x200001fc
 8000f08:	2000029c 	.word	0x2000029c

08000f0c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4a07      	ldr	r2, [pc, #28]	@ (8000f38 <vApplicationGetTimerTaskMemory+0x2c>)
 8000f1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	4a06      	ldr	r2, [pc, #24]	@ (8000f3c <vApplicationGetTimerTaskMemory+0x30>)
 8000f22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f2a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f2c:	bf00      	nop
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	2000049c 	.word	0x2000049c
 8000f3c:	2000053c 	.word	0x2000053c

08000f40 <main>:
/*
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b5b0      	push	{r4, r5, r7, lr}
 8000f42:	b08a      	sub	sp, #40	@ 0x28
 8000f44:	af02      	add	r7, sp, #8
    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */

    /* MPU Configuration--------------------------------------------------------*/
    MPU_Config();
 8000f46:	f000 fa7d 	bl	8001444 <MPU_Config>

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000f4a:	f000 fcf0 	bl	800192e <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000f4e:	f000 f887 	bl	8001060 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000f52:	f000 f921 	bl	8001198 <MX_GPIO_Init>
    MX_I2C1_Init();
 8000f56:	f000 f8df 	bl	8001118 <MX_I2C1_Init>

    /* USER CODE BEGIN 2 */
    xMutex = xSemaphoreCreateMutex();
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f004 fc89 	bl	8005872 <xQueueCreateMutex>
 8000f60:	4603      	mov	r3, r0
 8000f62:	4a2d      	ldr	r2, [pc, #180]	@ (8001018 <main+0xd8>)
 8000f64:	6013      	str	r3, [r2, #0]
    if (xMutex == NULL)
    {
        // Handle mutex creation failure
    }

    xTimers = xTimerCreate("TIMER", pdMS_TO_TICKS(2000), pdTRUE, (void*)0, vTimerCallback);
 8000f66:	4b2d      	ldr	r3, [pc, #180]	@ (800101c <main+0xdc>)
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000f72:	482b      	ldr	r0, [pc, #172]	@ (8001020 <main+0xe0>)
 8000f74:	f006 fac2 	bl	80074fc <xTimerCreate>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4a2a      	ldr	r2, [pc, #168]	@ (8001024 <main+0xe4>)
 8000f7c:	6013      	str	r3, [r2, #0]
    if (xTimers == NULL)
    {
        // Handle timer creation failure
    }

    if (xTimerStart(xTimers, 0) != pdPASS)
 8000f7e:	4b29      	ldr	r3, [pc, #164]	@ (8001024 <main+0xe4>)
 8000f80:	681c      	ldr	r4, [r3, #0]
 8000f82:	f005 fcd5 	bl	8006930 <xTaskGetTickCount>
 8000f86:	4602      	mov	r2, r0
 8000f88:	2300      	movs	r3, #0
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	2101      	movs	r1, #1
 8000f90:	4620      	mov	r0, r4
 8000f92:	f006 fb13 	bl	80075bc <xTimerGenericCommand>
    {
        // Handle timer start failure
    }


xTemperatureReturned = xTaskCreate(vTaskUartTransmitTemperature, "TEMPERATURE", 500, (void*)1, 1, &xTemperatureHandle);
 8000f96:	4b24      	ldr	r3, [pc, #144]	@ (8001028 <main+0xe8>)
 8000f98:	9301      	str	r3, [sp, #4]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000fa4:	4921      	ldr	r1, [pc, #132]	@ (800102c <main+0xec>)
 8000fa6:	4822      	ldr	r0, [pc, #136]	@ (8001030 <main+0xf0>)
 8000fa8:	f005 fa16 	bl	80063d8 <xTaskCreate>
 8000fac:	4603      	mov	r3, r0
 8000fae:	4a21      	ldr	r2, [pc, #132]	@ (8001034 <main+0xf4>)
 8000fb0:	6013      	str	r3, [r2, #0]
    xHumidityReturned = xTaskCreate(vTaskUartTransmitHumidity, "HUMIDITY", 500, (void*)1, 1, &xHumidityHandle);
 8000fb2:	4b21      	ldr	r3, [pc, #132]	@ (8001038 <main+0xf8>)
 8000fb4:	9301      	str	r3, [sp, #4]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000fc0:	491e      	ldr	r1, [pc, #120]	@ (800103c <main+0xfc>)
 8000fc2:	481f      	ldr	r0, [pc, #124]	@ (8001040 <main+0x100>)
 8000fc4:	f005 fa08 	bl	80063d8 <xTaskCreate>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4a1e      	ldr	r2, [pc, #120]	@ (8001044 <main+0x104>)
 8000fcc:	6013      	str	r3, [r2, #0]
    xI2CReadDataReturned = xTaskCreate(vTaskSendI2C, "I2C", 500, (void*)1, 1, &xI2CHandle);
 8000fce:	4b1e      	ldr	r3, [pc, #120]	@ (8001048 <main+0x108>)
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000fdc:	491b      	ldr	r1, [pc, #108]	@ (800104c <main+0x10c>)
 8000fde:	481c      	ldr	r0, [pc, #112]	@ (8001050 <main+0x110>)
 8000fe0:	f005 f9fa 	bl	80063d8 <xTaskCreate>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4a1b      	ldr	r2, [pc, #108]	@ (8001054 <main+0x114>)
 8000fe8:	6013      	str	r3, [r2, #0]

    vTaskStartScheduler();
 8000fea:	f005 fb7f 	bl	80066ec <vTaskStartScheduler>
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* definition and creation of defaultTask */
    osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000fee:	4b1a      	ldr	r3, [pc, #104]	@ (8001058 <main+0x118>)
 8000ff0:	1d3c      	adds	r4, r7, #4
 8000ff2:	461d      	mov	r5, r3
 8000ff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ffc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	2100      	movs	r1, #0
 8001004:	4618      	mov	r0, r3
 8001006:	f004 f9b0 	bl	800536a <osThreadCreate>
 800100a:	4603      	mov	r3, r0
 800100c:	4a13      	ldr	r2, [pc, #76]	@ (800105c <main+0x11c>)
 800100e:	6013      	str	r3, [r2, #0]
    /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
    /* USER CODE END RTOS_THREADS */

    /* Start scheduler */
    osKernelStart();
 8001010:	f004 f9a4 	bl	800535c <osKernelStart>

    /* We should never get here as control is now taken by the scheduler */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <main+0xd4>
 8001018:	200009b8 	.word	0x200009b8
 800101c:	080011f9 	.word	0x080011f9
 8001020:	0800adf8 	.word	0x0800adf8
 8001024:	200009b4 	.word	0x200009b4
 8001028:	200009a8 	.word	0x200009a8
 800102c:	0800ae00 	.word	0x0800ae00
 8001030:	080012b9 	.word	0x080012b9
 8001034:	20000940 	.word	0x20000940
 8001038:	200009ac 	.word	0x200009ac
 800103c:	0800ae0c 	.word	0x0800ae0c
 8001040:	0800137d 	.word	0x0800137d
 8001044:	20000944 	.word	0x20000944
 8001048:	200009b0 	.word	0x200009b0
 800104c:	0800ae18 	.word	0x0800ae18
 8001050:	08001219 	.word	0x08001219
 8001054:	20000948 	.word	0x20000948
 8001058:	0800ae28 	.word	0x0800ae28
 800105c:	2000093c 	.word	0x2000093c

08001060 <SystemClock_Config>:
/*
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b094      	sub	sp, #80	@ 0x50
 8001064:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001066:	f107 0320 	add.w	r3, r7, #32
 800106a:	2230      	movs	r2, #48	@ 0x30
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f007 ff3b 	bl	8008eea <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]

    /* *Configure the main internal regulator output voltage
    */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001084:	4b22      	ldr	r3, [pc, #136]	@ (8001110 <SystemClock_Config+0xb0>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001088:	4a21      	ldr	r2, [pc, #132]	@ (8001110 <SystemClock_Config+0xb0>)
 800108a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800108e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001090:	4b1f      	ldr	r3, [pc, #124]	@ (8001110 <SystemClock_Config+0xb0>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800109c:	4b1d      	ldr	r3, [pc, #116]	@ (8001114 <SystemClock_Config+0xb4>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80010a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001114 <SystemClock_Config+0xb4>)
 80010a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4b19      	ldr	r3, [pc, #100]	@ (8001114 <SystemClock_Config+0xb4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]

    /* Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b8:	2302      	movs	r3, #2
 80010ba:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010bc:	2301      	movs	r3, #1
 80010be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c0:	2310      	movs	r3, #16
 80010c2:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c8:	f107 0320 	add.w	r3, r7, #32
 80010cc:	4618      	mov	r0, r3
 80010ce:	f002 fdc1 	bl	8003c54 <HAL_RCC_OscConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <SystemClock_Config+0x7c>
    {
        Error_Handler();
 80010d8:	f000 f9f2 	bl	80014c0 <Error_Handler>
    }

    /* Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80010dc:	230f      	movs	r3, #15
 80010de:	60fb      	str	r3, [r7, #12]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010e0:	2300      	movs	r3, #0
 80010e2:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f003 f850 	bl	800419c <HAL_RCC_ClockConfig>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <SystemClock_Config+0xa6>
    {
        Error_Handler();
 8001102:	f000 f9dd 	bl	80014c0 <Error_Handler>
    }
}
 8001106:	bf00      	nop
 8001108:	3750      	adds	r7, #80	@ 0x50
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800
 8001114:	40007000 	.word	0x40007000

08001118 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 800111c:	4b1b      	ldr	r3, [pc, #108]	@ (800118c <MX_I2C1_Init+0x74>)
 800111e:	4a1c      	ldr	r2, [pc, #112]	@ (8001190 <MX_I2C1_Init+0x78>)
 8001120:	601a      	str	r2, [r3, #0]
    hi2c1.Init.Timing = 0x00303D5B;
 8001122:	4b1a      	ldr	r3, [pc, #104]	@ (800118c <MX_I2C1_Init+0x74>)
 8001124:	4a1b      	ldr	r2, [pc, #108]	@ (8001194 <MX_I2C1_Init+0x7c>)
 8001126:	605a      	str	r2, [r3, #4]
    hi2c1.Init.OwnAddress1 = 0;
 8001128:	4b18      	ldr	r3, [pc, #96]	@ (800118c <MX_I2C1_Init+0x74>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800112e:	4b17      	ldr	r3, [pc, #92]	@ (800118c <MX_I2C1_Init+0x74>)
 8001130:	2201      	movs	r2, #1
 8001132:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001134:	4b15      	ldr	r3, [pc, #84]	@ (800118c <MX_I2C1_Init+0x74>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0;
 800113a:	4b14      	ldr	r3, [pc, #80]	@ (800118c <MX_I2C1_Init+0x74>)
 800113c:	2200      	movs	r2, #0
 800113e:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <MX_I2C1_Init+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001146:	4b11      	ldr	r3, [pc, #68]	@ (800118c <MX_I2C1_Init+0x74>)
 8001148:	2200      	movs	r2, #0
 800114a:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800114c:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <MX_I2C1_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001152:	480e      	ldr	r0, [pc, #56]	@ (800118c <MX_I2C1_Init+0x74>)
 8001154:	f000 ff72 	bl	800203c <HAL_I2C_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_I2C1_Init+0x4a>
    {
        Error_Handler();
 800115e:	f000 f9af 	bl	80014c0 <Error_Handler>
    }

    /* Configure Analogue filter
    */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001162:	2100      	movs	r1, #0
 8001164:	4809      	ldr	r0, [pc, #36]	@ (800118c <MX_I2C1_Init+0x74>)
 8001166:	f002 fcdd 	bl	8003b24 <HAL_I2CEx_ConfigAnalogFilter>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_I2C1_Init+0x5c>
    {
        Error_Handler();
 8001170:	f000 f9a6 	bl	80014c0 <Error_Handler>
    }

    /* Configure Digital filter
    */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001174:	2100      	movs	r1, #0
 8001176:	4805      	ldr	r0, [pc, #20]	@ (800118c <MX_I2C1_Init+0x74>)
 8001178:	f002 fd1f 	bl	8003bba <HAL_I2CEx_ConfigDigitalFilter>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_I2C1_Init+0x6e>
    {
        Error_Handler();
 8001182:	f000 f99d 	bl	80014c0 <Error_Handler>
    }
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	2000094c 	.word	0x2000094c
 8001190:	40005400 	.word	0x40005400
 8001194:	00303d5b 	.word	0x00303d5b

08001198 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <MX_GPIO_Init+0x2c>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	4a08      	ldr	r2, [pc, #32]	@ (80011c4 <MX_GPIO_Init+0x2c>)
 80011a4:	f043 0302 	orr.w	r3, r3, #2
 80011a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011aa:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <MX_GPIO_Init+0x2c>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800

080011c8 <littleEndianToBigEndian>:

void littleEndianToBigEndian(uint16_t value, uint8_t *buffer)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	80fb      	strh	r3, [r7, #6]
    buffer[0] = (value & 0xff00u) >> 8u;
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	0a1b      	lsrs	r3, r3, #8
 80011d8:	b29b      	uxth	r3, r3
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	701a      	strb	r2, [r3, #0]
    buffer[1] = (value) & 0xffu;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	3301      	adds	r3, #1
 80011e4:	88fa      	ldrh	r2, [r7, #6]
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	701a      	strb	r2, [r3, #0]
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
	...

080011f8 <vTimerCallback>:

void vTimerCallback(TimerHandle_t xTimer)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
    flag = 1;
 8001200:	4b04      	ldr	r3, [pc, #16]	@ (8001214 <vTimerCallback+0x1c>)
 8001202:	2201      	movs	r2, #1
 8001204:	701a      	strb	r2, [r3, #0]
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000006 	.word	0x20000006

08001218 <vTaskSendI2C>:

void vTaskSendI2C(void *pvParameters)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
    for (;;)
    {
        const TickType_t xDelay = 1000 / portTICK_PERIOD_MS;
 8001220:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001224:	60fb      	str	r3, [r7, #12]
        if (flag == 1)
 8001226:	4b1e      	ldr	r3, [pc, #120]	@ (80012a0 <vTaskSendI2C+0x88>)
 8001228:	f993 3000 	ldrsb.w	r3, [r3]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d1f7      	bne.n	8001220 <vTaskSendI2C+0x8>
        {
            uint8_t cmd[2];
            littleEndianToBigEndian(START_SHT30, cmd);
 8001230:	4b1c      	ldr	r3, [pc, #112]	@ (80012a4 <vTaskSendI2C+0x8c>)
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	f107 0208 	add.w	r2, r7, #8
 8001238:	4611      	mov	r1, r2
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ffc4 	bl	80011c8 <littleEndianToBigEndian>
            HAL_I2C_Master_Transmit_IT(&hi2c1, SHT30_ADDR, cmd, 2);
 8001240:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <vTaskSendI2C+0x90>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	f107 0208 	add.w	r2, r7, #8
 800124a:	2302      	movs	r3, #2
 800124c:	4817      	ldr	r0, [pc, #92]	@ (80012ac <vTaskSendI2C+0x94>)
 800124e:	f000 ff91 	bl	8002174 <HAL_I2C_Master_Transmit_IT>
            HAL_Delay(2);
 8001252:	2002      	movs	r0, #2
 8001254:	f000 fb98 	bl	8001988 <HAL_Delay>
            littleEndianToBigEndian(FETCH_SHT30, cmd);
 8001258:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <vTaskSendI2C+0x98>)
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	f107 0208 	add.w	r2, r7, #8
 8001260:	4611      	mov	r1, r2
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ffb0 	bl	80011c8 <littleEndianToBigEndian>
            HAL_I2C_Master_Transmit_IT(&hi2c1, SHT30_ADDR, cmd, 2);
 8001268:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <vTaskSendI2C+0x90>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	4619      	mov	r1, r3
 800126e:	f107 0208 	add.w	r2, r7, #8
 8001272:	2302      	movs	r3, #2
 8001274:	480d      	ldr	r0, [pc, #52]	@ (80012ac <vTaskSendI2C+0x94>)
 8001276:	f000 ff7d 	bl	8002174 <HAL_I2C_Master_Transmit_IT>
            HAL_Delay(2);
 800127a:	2002      	movs	r0, #2
 800127c:	f000 fb84 	bl	8001988 <HAL_Delay>
            HAL_I2C_Master_Receive_IT(&hi2c1, SHT30_ADDR, rawValues, 6);
 8001280:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <vTaskSendI2C+0x90>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	4619      	mov	r1, r3
 8001286:	2306      	movs	r3, #6
 8001288:	4a0a      	ldr	r2, [pc, #40]	@ (80012b4 <vTaskSendI2C+0x9c>)
 800128a:	4808      	ldr	r0, [pc, #32]	@ (80012ac <vTaskSendI2C+0x94>)
 800128c:	f001 f80a 	bl	80022a4 <HAL_I2C_Master_Receive_IT>
            vTaskDelay(xDelay);
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f005 f9f3 	bl	800667c <vTaskDelay>
            flag = 0;
 8001296:	4b02      	ldr	r3, [pc, #8]	@ (80012a0 <vTaskSendI2C+0x88>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
    {
 800129c:	e7c0      	b.n	8001220 <vTaskSendI2C+0x8>
 800129e:	bf00      	nop
 80012a0:	20000006 	.word	0x20000006
 80012a4:	20000004 	.word	0x20000004
 80012a8:	20000000 	.word	0x20000000
 80012ac:	2000094c 	.word	0x2000094c
 80012b0:	20000002 	.word	0x20000002
 80012b4:	200009a0 	.word	0x200009a0

080012b8 <vTaskUartTransmitTemperature>:
        }
    }
}

void vTaskUartTransmitTemperature(void *pvParameters)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
    for (;;)
    {
        const TickType_t xDelay = 1000 / portTICK_PERIOD_MS;
 80012c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012c4:	617b      	str	r3, [r7, #20]
        if (xMutex != NULL)
 80012c6:	4b25      	ldr	r3, [pc, #148]	@ (800135c <vTaskUartTransmitTemperature+0xa4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f8      	beq.n	80012c0 <vTaskUartTransmitTemperature+0x8>
        {
            if (xSemaphoreTake(xMutex, (TickType_t)10) == pdTRUE)
 80012ce:	4b23      	ldr	r3, [pc, #140]	@ (800135c <vTaskUartTransmitTemperature+0xa4>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	210a      	movs	r1, #10
 80012d4:	4618      	mov	r0, r3
 80012d6:	f004 fd7b 	bl	8005dd0 <xQueueSemaphoreTake>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d1ef      	bne.n	80012c0 <vTaskUartTransmitTemperature+0x8>
            {
                uint16_t rawTemp = (uint16_t)((((uint16_t)rawValues[0]) << 8) | (uint16_t)rawValues[1]);
 80012e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001360 <vTaskUartTransmitTemperature+0xa8>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	021b      	lsls	r3, r3, #8
 80012e6:	b21a      	sxth	r2, r3
 80012e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001360 <vTaskUartTransmitTemperature+0xa8>)
 80012ea:	785b      	ldrb	r3, [r3, #1]
 80012ec:	b21b      	sxth	r3, r3
 80012ee:	4313      	orrs	r3, r2
 80012f0:	b21b      	sxth	r3, r3
 80012f2:	827b      	strh	r3, [r7, #18]
                float temp = (float)((float)-45 + (float)175 * (float)rawTemp / (float)65535);
 80012f4:	8a7b      	ldrh	r3, [r7, #18]
 80012f6:	ee07 3a90 	vmov	s15, r3
 80012fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012fe:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001364 <vTaskUartTransmitTemperature+0xac>
 8001302:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001306:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8001368 <vTaskUartTransmitTemperature+0xb0>
 800130a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800130e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800136c <vTaskUartTransmitTemperature+0xb4>
 8001312:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001316:	edc7 7a03 	vstr	s15, [r7, #12]
                printf("Temperature of room:%.2f\r\n", temp);
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f7ff f934 	bl	8000588 <__aeabi_f2d>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4812      	ldr	r0, [pc, #72]	@ (8001370 <vTaskUartTransmitTemperature+0xb8>)
 8001326:	f007 fd8b 	bl	8008e40 <iprintf>
                xSemaphoreGive(xMutex);
 800132a:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <vTaskUartTransmitTemperature+0xa4>)
 800132c:	6818      	ldr	r0, [r3, #0]
 800132e:	2300      	movs	r3, #0
 8001330:	2200      	movs	r2, #0
 8001332:	2100      	movs	r1, #0
 8001334:	f004 fab6 	bl	80058a4 <xQueueGenericSend>
                vTaskDelay(xDelay);
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f005 f99f 	bl	800667c <vTaskDelay>
                a = temp;
 800133e:	4a0d      	ldr	r2, [pc, #52]	@ (8001374 <vTaskUartTransmitTemperature+0xbc>)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6013      	str	r3, [r2, #0]
                printf("Humidity of room:%.2f\r\n", a);
 8001344:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <vTaskUartTransmitTemperature+0xbc>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f91d 	bl	8000588 <__aeabi_f2d>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4809      	ldr	r0, [pc, #36]	@ (8001378 <vTaskUartTransmitTemperature+0xc0>)
 8001354:	f007 fd74 	bl	8008e40 <iprintf>
    {
 8001358:	e7b2      	b.n	80012c0 <vTaskUartTransmitTemperature+0x8>
 800135a:	bf00      	nop
 800135c:	200009b8 	.word	0x200009b8
 8001360:	200009a0 	.word	0x200009a0
 8001364:	432f0000 	.word	0x432f0000
 8001368:	477fff00 	.word	0x477fff00
 800136c:	42340000 	.word	0x42340000
 8001370:	0800ae44 	.word	0x0800ae44
 8001374:	200009bc 	.word	0x200009bc
 8001378:	0800ae60 	.word	0x0800ae60

0800137c <vTaskUartTransmitHumidity>:
        }
    }
}

void vTaskUartTransmitHumidity(void *pvParameters)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
    for (;;)
    {
        const TickType_t xDelay = 1000 / portTICK_PERIOD_MS;
 8001384:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001388:	617b      	str	r3, [r7, #20]
        if (xMutex != NULL)
 800138a:	4b23      	ldr	r3, [pc, #140]	@ (8001418 <vTaskUartTransmitHumidity+0x9c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0f8      	beq.n	8001384 <vTaskUartTransmitHumidity+0x8>
        {
            if (xSemaphoreTake(xMutex, (TickType_t)10) == pdTRUE)
 8001392:	4b21      	ldr	r3, [pc, #132]	@ (8001418 <vTaskUartTransmitHumidity+0x9c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	210a      	movs	r1, #10
 8001398:	4618      	mov	r0, r3
 800139a:	f004 fd19 	bl	8005dd0 <xQueueSemaphoreTake>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d1ef      	bne.n	8001384 <vTaskUartTransmitHumidity+0x8>
            {
                uint16_t rawHum = (uint16_t)((((uint16_t)rawValues[3]) << 8) | (uint16_t)rawValues[4]);
 80013a4:	4b1d      	ldr	r3, [pc, #116]	@ (800141c <vTaskUartTransmitHumidity+0xa0>)
 80013a6:	78db      	ldrb	r3, [r3, #3]
 80013a8:	021b      	lsls	r3, r3, #8
 80013aa:	b21a      	sxth	r2, r3
 80013ac:	4b1b      	ldr	r3, [pc, #108]	@ (800141c <vTaskUartTransmitHumidity+0xa0>)
 80013ae:	791b      	ldrb	r3, [r3, #4]
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	827b      	strh	r3, [r7, #18]
                float hum = (float)((float)100 * (float)rawHum / (float)65535);
 80013b8:	8a7b      	ldrh	r3, [r7, #18]
 80013ba:	ee07 3a90 	vmov	s15, r3
 80013be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013c2:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001420 <vTaskUartTransmitHumidity+0xa4>
 80013c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013ca:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8001424 <vTaskUartTransmitHumidity+0xa8>
 80013ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013d2:	edc7 7a03 	vstr	s15, [r7, #12]
                printf("Humidity of room:%.2f\r\n", hum);
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f7ff f8d6 	bl	8000588 <__aeabi_f2d>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4811      	ldr	r0, [pc, #68]	@ (8001428 <vTaskUartTransmitHumidity+0xac>)
 80013e2:	f007 fd2d 	bl	8008e40 <iprintf>
                xSemaphoreGive(xMutex);
 80013e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <vTaskUartTransmitHumidity+0x9c>)
 80013e8:	6818      	ldr	r0, [r3, #0]
 80013ea:	2300      	movs	r3, #0
 80013ec:	2200      	movs	r2, #0
 80013ee:	2100      	movs	r1, #0
 80013f0:	f004 fa58 	bl	80058a4 <xQueueGenericSend>
                vTaskDelay(xDelay);
 80013f4:	6978      	ldr	r0, [r7, #20]
 80013f6:	f005 f941 	bl	800667c <vTaskDelay>
                b = hum;
 80013fa:	4a0c      	ldr	r2, [pc, #48]	@ (800142c <vTaskUartTransmitHumidity+0xb0>)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6013      	str	r3, [r2, #0]
                printf("Temperature of room:%.2f\r\n", b);
 8001400:	4b0a      	ldr	r3, [pc, #40]	@ (800142c <vTaskUartTransmitHumidity+0xb0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f8bf 	bl	8000588 <__aeabi_f2d>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4808      	ldr	r0, [pc, #32]	@ (8001430 <vTaskUartTransmitHumidity+0xb4>)
 8001410:	f007 fd16 	bl	8008e40 <iprintf>
    {
 8001414:	e7b6      	b.n	8001384 <vTaskUartTransmitHumidity+0x8>
 8001416:	bf00      	nop
 8001418:	200009b8 	.word	0x200009b8
 800141c:	200009a0 	.word	0x200009a0
 8001420:	42c80000 	.word	0x42c80000
 8001424:	477fff00 	.word	0x477fff00
 8001428:	0800ae60 	.word	0x0800ae60
 800142c:	200009c0 	.word	0x200009c0
 8001430:	0800ae44 	.word	0x0800ae44

08001434 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;)
    {
        osDelay(1);
 800143c:	2001      	movs	r0, #1
 800143e:	f003 ffe0 	bl	8005402 <osDelay>
 8001442:	e7fb      	b.n	800143c <StartDefaultTask+0x8>

08001444 <MPU_Config>:
    /* USER CODE END 5 */
}

/* MPU Configuration */
void MPU_Config(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800144a:	463b      	mov	r3, r7
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]

    /* Disables the MPU */
    HAL_MPU_Disable();
 8001456:	f000 fb9d 	bl	8001b94 <HAL_MPU_Disable>

    /* Initializes and configures the Region and the memory to be protected
    */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800145a:	2301      	movs	r3, #1
 800145c:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800145e:	2300      	movs	r3, #0
 8001460:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x0;
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001466:	231f      	movs	r3, #31
 8001468:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x87;
 800146a:	2387      	movs	r3, #135	@ 0x87
 800146c:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800146e:	2300      	movs	r3, #0
 8001470:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001472:	2300      	movs	r3, #0
 8001474:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001476:	2301      	movs	r3, #1
 8001478:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800147a:	2301      	movs	r3, #1
 800147c:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800147e:	2300      	movs	r3, #0
 8001480:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001486:	463b      	mov	r3, r7
 8001488:	4618      	mov	r0, r3
 800148a:	f000 fbbb 	bl	8001c04 <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800148e:	2004      	movs	r0, #4
 8001490:	f000 fb98 	bl	8001bc4 <HAL_MPU_Enable>
}
 8001494:	bf00      	nop
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM9)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a04      	ldr	r2, [pc, #16]	@ (80014bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d101      	bne.n	80014b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        HAL_IncTick();
 80014ae:	f000 fa4b 	bl	8001948 <HAL_IncTick>
    }
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40014000 	.word	0x40014000

080014c0 <Error_Handler>:
/*
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c4:	b672      	cpsid	i
}
 80014c6:	bf00      	nop
    __disable_irq();
    while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <Error_Handler+0x8>

080014cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014d2:	4b11      	ldr	r3, [pc, #68]	@ (8001518 <HAL_MspInit+0x4c>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	4a10      	ldr	r2, [pc, #64]	@ (8001518 <HAL_MspInit+0x4c>)
 80014d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014de:	4b0e      	ldr	r3, [pc, #56]	@ (8001518 <HAL_MspInit+0x4c>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <HAL_MspInit+0x4c>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001518 <HAL_MspInit+0x4c>)
 80014f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014f6:	4b08      	ldr	r3, [pc, #32]	@ (8001518 <HAL_MspInit+0x4c>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	210f      	movs	r1, #15
 8001506:	f06f 0001 	mvn.w	r0, #1
 800150a:	f000 fb19 	bl	8001b40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800

0800151c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b0aa      	sub	sp, #168	@ 0xa8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001534:	f107 0310 	add.w	r3, r7, #16
 8001538:	2284      	movs	r2, #132	@ 0x84
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f007 fcd4 	bl	8008eea <memset>
  if(hi2c->Instance==I2C1)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a26      	ldr	r2, [pc, #152]	@ (80015e0 <HAL_I2C_MspInit+0xc4>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d144      	bne.n	80015d6 <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800154c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001550:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001552:	2300      	movs	r3, #0
 8001554:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001556:	f107 0310 	add.w	r3, r7, #16
 800155a:	4618      	mov	r0, r3
 800155c:	f003 f822 	bl	80045a4 <HAL_RCCEx_PeriphCLKConfig>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001566:	f7ff ffab 	bl	80014c0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156a:	4b1e      	ldr	r3, [pc, #120]	@ (80015e4 <HAL_I2C_MspInit+0xc8>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	4a1d      	ldr	r2, [pc, #116]	@ (80015e4 <HAL_I2C_MspInit+0xc8>)
 8001570:	f043 0302 	orr.w	r3, r3, #2
 8001574:	6313      	str	r3, [r2, #48]	@ 0x30
 8001576:	4b1b      	ldr	r3, [pc, #108]	@ (80015e4 <HAL_I2C_MspInit+0xc8>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001582:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001586:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800158a:	2312      	movs	r3, #18
 800158c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001596:	2303      	movs	r3, #3
 8001598:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800159c:	2304      	movs	r3, #4
 800159e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80015a6:	4619      	mov	r1, r3
 80015a8:	480f      	ldr	r0, [pc, #60]	@ (80015e8 <HAL_I2C_MspInit+0xcc>)
 80015aa:	f000 fb9b 	bl	8001ce4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015ae:	4b0d      	ldr	r3, [pc, #52]	@ (80015e4 <HAL_I2C_MspInit+0xc8>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b2:	4a0c      	ldr	r2, [pc, #48]	@ (80015e4 <HAL_I2C_MspInit+0xc8>)
 80015b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ba:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <HAL_I2C_MspInit+0xc8>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2105      	movs	r1, #5
 80015ca:	201f      	movs	r0, #31
 80015cc:	f000 fab8 	bl	8001b40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80015d0:	201f      	movs	r0, #31
 80015d2:	f000 fad1 	bl	8001b78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015d6:	bf00      	nop
 80015d8:	37a8      	adds	r7, #168	@ 0xa8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40005400 	.word	0x40005400
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40020400 	.word	0x40020400

080015ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08c      	sub	sp, #48	@ 0x30
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 80015fc:	4b2e      	ldr	r3, [pc, #184]	@ (80016b8 <HAL_InitTick+0xcc>)
 80015fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001600:	4a2d      	ldr	r2, [pc, #180]	@ (80016b8 <HAL_InitTick+0xcc>)
 8001602:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001606:	6453      	str	r3, [r2, #68]	@ 0x44
 8001608:	4b2b      	ldr	r3, [pc, #172]	@ (80016b8 <HAL_InitTick+0xcc>)
 800160a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001614:	f107 020c 	add.w	r2, r7, #12
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	4611      	mov	r1, r2
 800161e:	4618      	mov	r0, r3
 8001620:	f002 ff8e 	bl	8004540 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001624:	f002 ff78 	bl	8004518 <HAL_RCC_GetPCLK2Freq>
 8001628:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800162a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800162c:	4a23      	ldr	r2, [pc, #140]	@ (80016bc <HAL_InitTick+0xd0>)
 800162e:	fba2 2303 	umull	r2, r3, r2, r3
 8001632:	0c9b      	lsrs	r3, r3, #18
 8001634:	3b01      	subs	r3, #1
 8001636:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001638:	4b21      	ldr	r3, [pc, #132]	@ (80016c0 <HAL_InitTick+0xd4>)
 800163a:	4a22      	ldr	r2, [pc, #136]	@ (80016c4 <HAL_InitTick+0xd8>)
 800163c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 800163e:	4b20      	ldr	r3, [pc, #128]	@ (80016c0 <HAL_InitTick+0xd4>)
 8001640:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001644:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8001646:	4a1e      	ldr	r2, [pc, #120]	@ (80016c0 <HAL_InitTick+0xd4>)
 8001648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164a:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 800164c:	4b1c      	ldr	r3, [pc, #112]	@ (80016c0 <HAL_InitTick+0xd4>)
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001652:	4b1b      	ldr	r3, [pc, #108]	@ (80016c0 <HAL_InitTick+0xd4>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001658:	4b19      	ldr	r3, [pc, #100]	@ (80016c0 <HAL_InitTick+0xd4>)
 800165a:	2200      	movs	r2, #0
 800165c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 800165e:	4818      	ldr	r0, [pc, #96]	@ (80016c0 <HAL_InitTick+0xd4>)
 8001660:	f003 fb90 	bl	8004d84 <HAL_TIM_Base_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800166a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800166e:	2b00      	cmp	r3, #0
 8001670:	d11b      	bne.n	80016aa <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8001672:	4813      	ldr	r0, [pc, #76]	@ (80016c0 <HAL_InitTick+0xd4>)
 8001674:	f003 fbe8 	bl	8004e48 <HAL_TIM_Base_Start_IT>
 8001678:	4603      	mov	r3, r0
 800167a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800167e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001682:	2b00      	cmp	r3, #0
 8001684:	d111      	bne.n	80016aa <HAL_InitTick+0xbe>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001686:	2018      	movs	r0, #24
 8001688:	f000 fa76 	bl	8001b78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b0f      	cmp	r3, #15
 8001690:	d808      	bhi.n	80016a4 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8001692:	2200      	movs	r2, #0
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	2018      	movs	r0, #24
 8001698:	f000 fa52 	bl	8001b40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800169c:	4a0a      	ldr	r2, [pc, #40]	@ (80016c8 <HAL_InitTick+0xdc>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	e002      	b.n	80016aa <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80016aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3730      	adds	r7, #48	@ 0x30
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800
 80016bc:	431bde83 	.word	0x431bde83
 80016c0:	200009c4 	.word	0x200009c4
 80016c4:	40014000 	.word	0x40014000
 80016c8:	2000000c 	.word	0x2000000c

080016cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <NMI_Handler+0x4>

080016d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <HardFault_Handler+0x4>

080016dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <MemManage_Handler+0x4>

080016e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <BusFault_Handler+0x4>

080016ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <UsageFault_Handler+0x4>

080016f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001708:	4802      	ldr	r0, [pc, #8]	@ (8001714 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800170a:	f003 fc15 	bl	8004f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200009c4 	.word	0x200009c4

08001718 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800171c:	4802      	ldr	r0, [pc, #8]	@ (8001728 <I2C1_EV_IRQHandler+0x10>)
 800171e:	f000 fe31 	bl	8002384 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	2000094c 	.word	0x2000094c

0800172c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return 1;
 8001730:	2301      	movs	r3, #1
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_kill>:

int _kill(int pid, int sig)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001746:	f007 fc79 	bl	800903c <__errno>
 800174a:	4603      	mov	r3, r0
 800174c:	2216      	movs	r2, #22
 800174e:	601a      	str	r2, [r3, #0]
  return -1;
 8001750:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001754:	4618      	mov	r0, r3
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <_exit>:

void _exit (int status)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001764:	f04f 31ff 	mov.w	r1, #4294967295
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff ffe7 	bl	800173c <_kill>
  while (1) {}    /* Make sure we hang here */
 800176e:	bf00      	nop
 8001770:	e7fd      	b.n	800176e <_exit+0x12>

08001772 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b086      	sub	sp, #24
 8001776:	af00      	add	r7, sp, #0
 8001778:	60f8      	str	r0, [r7, #12]
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	e00a      	b.n	800179a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001784:	f3af 8000 	nop.w
 8001788:	4601      	mov	r1, r0
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	1c5a      	adds	r2, r3, #1
 800178e:	60ba      	str	r2, [r7, #8]
 8001790:	b2ca      	uxtb	r2, r1
 8001792:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	3301      	adds	r3, #1
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	429a      	cmp	r2, r3
 80017a0:	dbf0      	blt.n	8001784 <_read+0x12>
  }

  return len;
 80017a2:	687b      	ldr	r3, [r7, #4]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	e009      	b.n	80017d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	60ba      	str	r2, [r7, #8]
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	3301      	adds	r3, #1
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	dbf1      	blt.n	80017be <_write+0x12>
  }
  return len;
 80017da:	687b      	ldr	r3, [r7, #4]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <_close>:

int _close(int file)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800180c:	605a      	str	r2, [r3, #4]
  return 0;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <_isatty>:

int _isatty(int file)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001824:	2301      	movs	r3, #1
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001832:	b480      	push	{r7}
 8001834:	b085      	sub	sp, #20
 8001836:	af00      	add	r7, sp, #0
 8001838:	60f8      	str	r0, [r7, #12]
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001854:	4a14      	ldr	r2, [pc, #80]	@ (80018a8 <_sbrk+0x5c>)
 8001856:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <_sbrk+0x60>)
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001860:	4b13      	ldr	r3, [pc, #76]	@ (80018b0 <_sbrk+0x64>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d102      	bne.n	800186e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001868:	4b11      	ldr	r3, [pc, #68]	@ (80018b0 <_sbrk+0x64>)
 800186a:	4a12      	ldr	r2, [pc, #72]	@ (80018b4 <_sbrk+0x68>)
 800186c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800186e:	4b10      	ldr	r3, [pc, #64]	@ (80018b0 <_sbrk+0x64>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	429a      	cmp	r2, r3
 800187a:	d207      	bcs.n	800188c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800187c:	f007 fbde 	bl	800903c <__errno>
 8001880:	4603      	mov	r3, r0
 8001882:	220c      	movs	r2, #12
 8001884:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001886:	f04f 33ff 	mov.w	r3, #4294967295
 800188a:	e009      	b.n	80018a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800188c:	4b08      	ldr	r3, [pc, #32]	@ (80018b0 <_sbrk+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001892:	4b07      	ldr	r3, [pc, #28]	@ (80018b0 <_sbrk+0x64>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	4a05      	ldr	r2, [pc, #20]	@ (80018b0 <_sbrk+0x64>)
 800189c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800189e:	68fb      	ldr	r3, [r7, #12]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20050000 	.word	0x20050000
 80018ac:	00000400 	.word	0x00000400
 80018b0:	20000a10 	.word	0x20000a10
 80018b4:	200049f0 	.word	0x200049f0

080018b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018bc:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <SystemInit+0x20>)
 80018be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018c2:	4a05      	ldr	r2, [pc, #20]	@ (80018d8 <SystemInit+0x20>)
 80018c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001914 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018e0:	f7ff ffea 	bl	80018b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018e4:	480c      	ldr	r0, [pc, #48]	@ (8001918 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018e6:	490d      	ldr	r1, [pc, #52]	@ (800191c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001920 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018ec:	e002      	b.n	80018f4 <LoopCopyDataInit>

080018ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018f2:	3304      	adds	r3, #4

080018f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f8:	d3f9      	bcc.n	80018ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001924 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001928 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001900:	e001      	b.n	8001906 <LoopFillZerobss>

08001902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001904:	3204      	adds	r2, #4

08001906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001908:	d3fb      	bcc.n	8001902 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800190a:	f007 fb9d 	bl	8009048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800190e:	f7ff fb17 	bl	8000f40 <main>
  bx  lr    
 8001912:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001914:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800191c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001920:	0800b228 	.word	0x0800b228
  ldr r2, =_sbss
 8001924:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001928:	200049ec 	.word	0x200049ec

0800192c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800192c:	e7fe      	b.n	800192c <ADC_IRQHandler>

0800192e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001932:	2003      	movs	r0, #3
 8001934:	f000 f8f9 	bl	8001b2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001938:	200f      	movs	r0, #15
 800193a:	f7ff fe57 	bl	80015ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800193e:	f7ff fdc5 	bl	80014cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800194c:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <HAL_IncTick+0x20>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	4b06      	ldr	r3, [pc, #24]	@ (800196c <HAL_IncTick+0x24>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4a04      	ldr	r2, [pc, #16]	@ (800196c <HAL_IncTick+0x24>)
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000010 	.word	0x20000010
 800196c:	20000a14 	.word	0x20000a14

08001970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return uwTick;
 8001974:	4b03      	ldr	r3, [pc, #12]	@ (8001984 <HAL_GetTick+0x14>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20000a14 	.word	0x20000a14

08001988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001990:	f7ff ffee 	bl	8001970 <HAL_GetTick>
 8001994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a0:	d005      	beq.n	80019ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019a2:	4b0a      	ldr	r3, [pc, #40]	@ (80019cc <HAL_Delay+0x44>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4413      	add	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ae:	bf00      	nop
 80019b0:	f7ff ffde 	bl	8001970 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d8f7      	bhi.n	80019b0 <HAL_Delay+0x28>
  {
  }
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000010 	.word	0x20000010

080019d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a10 <__NVIC_SetPriorityGrouping+0x40>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019ec:	4013      	ands	r3, r2
 80019ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019f8:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fe:	4a04      	ldr	r2, [pc, #16]	@ (8001a10 <__NVIC_SetPriorityGrouping+0x40>)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	60d3      	str	r3, [r2, #12]
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000ed00 	.word	0xe000ed00
 8001a14:	05fa0000 	.word	0x05fa0000

08001a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a1c:	4b04      	ldr	r3, [pc, #16]	@ (8001a30 <__NVIC_GetPriorityGrouping+0x18>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	f003 0307 	and.w	r3, r3, #7
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	db0b      	blt.n	8001a5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	f003 021f 	and.w	r2, r3, #31
 8001a4c:	4907      	ldr	r1, [pc, #28]	@ (8001a6c <__NVIC_EnableIRQ+0x38>)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	095b      	lsrs	r3, r3, #5
 8001a54:	2001      	movs	r0, #1
 8001a56:	fa00 f202 	lsl.w	r2, r0, r2
 8001a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000e100 	.word	0xe000e100

08001a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	6039      	str	r1, [r7, #0]
 8001a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	db0a      	blt.n	8001a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	490c      	ldr	r1, [pc, #48]	@ (8001abc <__NVIC_SetPriority+0x4c>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	0112      	lsls	r2, r2, #4
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	440b      	add	r3, r1
 8001a94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a98:	e00a      	b.n	8001ab0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4908      	ldr	r1, [pc, #32]	@ (8001ac0 <__NVIC_SetPriority+0x50>)
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	3b04      	subs	r3, #4
 8001aa8:	0112      	lsls	r2, r2, #4
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	440b      	add	r3, r1
 8001aae:	761a      	strb	r2, [r3, #24]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000e100 	.word	0xe000e100
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b089      	sub	sp, #36	@ 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f1c3 0307 	rsb	r3, r3, #7
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	bf28      	it	cs
 8001ae2:	2304      	movcs	r3, #4
 8001ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	2b06      	cmp	r3, #6
 8001aec:	d902      	bls.n	8001af4 <NVIC_EncodePriority+0x30>
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3b03      	subs	r3, #3
 8001af2:	e000      	b.n	8001af6 <NVIC_EncodePriority+0x32>
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	f04f 32ff 	mov.w	r2, #4294967295
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43da      	mvns	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	401a      	ands	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	fa01 f303 	lsl.w	r3, r1, r3
 8001b16:	43d9      	mvns	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	4313      	orrs	r3, r2
         );
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3724      	adds	r7, #36	@ 0x24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ff4c 	bl	80019d0 <__NVIC_SetPriorityGrouping>
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
 8001b4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b52:	f7ff ff61 	bl	8001a18 <__NVIC_GetPriorityGrouping>
 8001b56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	68b9      	ldr	r1, [r7, #8]
 8001b5c:	6978      	ldr	r0, [r7, #20]
 8001b5e:	f7ff ffb1 	bl	8001ac4 <NVIC_EncodePriority>
 8001b62:	4602      	mov	r2, r0
 8001b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b68:	4611      	mov	r1, r2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff ff80 	bl	8001a70 <__NVIC_SetPriority>
}
 8001b70:	bf00      	nop
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff ff54 	bl	8001a34 <__NVIC_EnableIRQ>
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001b98:	f3bf 8f5f 	dmb	sy
}
 8001b9c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001b9e:	4b07      	ldr	r3, [pc, #28]	@ (8001bbc <HAL_MPU_Disable+0x28>)
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba2:	4a06      	ldr	r2, [pc, #24]	@ (8001bbc <HAL_MPU_Disable+0x28>)
 8001ba4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ba8:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001baa:	4b05      	ldr	r3, [pc, #20]	@ (8001bc0 <HAL_MPU_Disable+0x2c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	605a      	str	r2, [r3, #4]
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000ed00 	.word	0xe000ed00
 8001bc0:	e000ed90 	.word	0xe000ed90

08001bc4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001bcc:	4a0b      	ldr	r2, [pc, #44]	@ (8001bfc <HAL_MPU_Enable+0x38>)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c00 <HAL_MPU_Enable+0x3c>)
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bda:	4a09      	ldr	r2, [pc, #36]	@ (8001c00 <HAL_MPU_Enable+0x3c>)
 8001bdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001be0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001be2:	f3bf 8f4f 	dsb	sy
}
 8001be6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001be8:	f3bf 8f6f 	isb	sy
}
 8001bec:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	e000ed90 	.word	0xe000ed90
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	785a      	ldrb	r2, [r3, #1]
 8001c10:	4b1b      	ldr	r3, [pc, #108]	@ (8001c80 <HAL_MPU_ConfigRegion+0x7c>)
 8001c12:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001c14:	4b1a      	ldr	r3, [pc, #104]	@ (8001c80 <HAL_MPU_ConfigRegion+0x7c>)
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	4a19      	ldr	r2, [pc, #100]	@ (8001c80 <HAL_MPU_ConfigRegion+0x7c>)
 8001c1a:	f023 0301 	bic.w	r3, r3, #1
 8001c1e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001c20:	4a17      	ldr	r2, [pc, #92]	@ (8001c80 <HAL_MPU_ConfigRegion+0x7c>)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	7b1b      	ldrb	r3, [r3, #12]
 8001c2c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	7adb      	ldrb	r3, [r3, #11]
 8001c32:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	7a9b      	ldrb	r3, [r3, #10]
 8001c3a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	7b5b      	ldrb	r3, [r3, #13]
 8001c42:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c44:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	7b9b      	ldrb	r3, [r3, #14]
 8001c4a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c4c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	7bdb      	ldrb	r3, [r3, #15]
 8001c52:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001c54:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	7a5b      	ldrb	r3, [r3, #9]
 8001c5a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001c5c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	7a1b      	ldrb	r3, [r3, #8]
 8001c62:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001c64:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	7812      	ldrb	r2, [r2, #0]
 8001c6a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c6c:	4a04      	ldr	r2, [pc, #16]	@ (8001c80 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c6e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c70:	6113      	str	r3, [r2, #16]
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000ed90 	.word	0xe000ed90

08001c84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d004      	beq.n	8001ca2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2280      	movs	r2, #128	@ 0x80
 8001c9c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e00c      	b.n	8001cbc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2205      	movs	r2, #5
 8001ca6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 0201 	bic.w	r2, r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cd6:	b2db      	uxtb	r3, r3
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	@ 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]
 8001d02:	e175      	b.n	8001ff0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d04:	2201      	movs	r2, #1
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	4013      	ands	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	f040 8164 	bne.w	8001fea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d005      	beq.n	8001d3a <HAL_GPIO_Init+0x56>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d130      	bne.n	8001d9c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	2203      	movs	r2, #3
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d70:	2201      	movs	r2, #1
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f003 0201 	and.w	r2, r3, #1
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d017      	beq.n	8001dd8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	2203      	movs	r2, #3
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d123      	bne.n	8001e2c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	08da      	lsrs	r2, r3, #3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3208      	adds	r2, #8
 8001dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	220f      	movs	r2, #15
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	691a      	ldr	r2, [r3, #16]
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	08da      	lsrs	r2, r3, #3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3208      	adds	r2, #8
 8001e26:	69b9      	ldr	r1, [r7, #24]
 8001e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	2203      	movs	r2, #3
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 0203 	and.w	r2, r3, #3
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 80be 	beq.w	8001fea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6e:	4b66      	ldr	r3, [pc, #408]	@ (8002008 <HAL_GPIO_Init+0x324>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e72:	4a65      	ldr	r2, [pc, #404]	@ (8002008 <HAL_GPIO_Init+0x324>)
 8001e74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e7a:	4b63      	ldr	r3, [pc, #396]	@ (8002008 <HAL_GPIO_Init+0x324>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e86:	4a61      	ldr	r2, [pc, #388]	@ (800200c <HAL_GPIO_Init+0x328>)
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	089b      	lsrs	r3, r3, #2
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	220f      	movs	r2, #15
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a58      	ldr	r2, [pc, #352]	@ (8002010 <HAL_GPIO_Init+0x32c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d037      	beq.n	8001f22 <HAL_GPIO_Init+0x23e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a57      	ldr	r2, [pc, #348]	@ (8002014 <HAL_GPIO_Init+0x330>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d031      	beq.n	8001f1e <HAL_GPIO_Init+0x23a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a56      	ldr	r2, [pc, #344]	@ (8002018 <HAL_GPIO_Init+0x334>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d02b      	beq.n	8001f1a <HAL_GPIO_Init+0x236>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a55      	ldr	r2, [pc, #340]	@ (800201c <HAL_GPIO_Init+0x338>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d025      	beq.n	8001f16 <HAL_GPIO_Init+0x232>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a54      	ldr	r2, [pc, #336]	@ (8002020 <HAL_GPIO_Init+0x33c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d01f      	beq.n	8001f12 <HAL_GPIO_Init+0x22e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a53      	ldr	r2, [pc, #332]	@ (8002024 <HAL_GPIO_Init+0x340>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d019      	beq.n	8001f0e <HAL_GPIO_Init+0x22a>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a52      	ldr	r2, [pc, #328]	@ (8002028 <HAL_GPIO_Init+0x344>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d013      	beq.n	8001f0a <HAL_GPIO_Init+0x226>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a51      	ldr	r2, [pc, #324]	@ (800202c <HAL_GPIO_Init+0x348>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d00d      	beq.n	8001f06 <HAL_GPIO_Init+0x222>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a50      	ldr	r2, [pc, #320]	@ (8002030 <HAL_GPIO_Init+0x34c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d007      	beq.n	8001f02 <HAL_GPIO_Init+0x21e>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a4f      	ldr	r2, [pc, #316]	@ (8002034 <HAL_GPIO_Init+0x350>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d101      	bne.n	8001efe <HAL_GPIO_Init+0x21a>
 8001efa:	2309      	movs	r3, #9
 8001efc:	e012      	b.n	8001f24 <HAL_GPIO_Init+0x240>
 8001efe:	230a      	movs	r3, #10
 8001f00:	e010      	b.n	8001f24 <HAL_GPIO_Init+0x240>
 8001f02:	2308      	movs	r3, #8
 8001f04:	e00e      	b.n	8001f24 <HAL_GPIO_Init+0x240>
 8001f06:	2307      	movs	r3, #7
 8001f08:	e00c      	b.n	8001f24 <HAL_GPIO_Init+0x240>
 8001f0a:	2306      	movs	r3, #6
 8001f0c:	e00a      	b.n	8001f24 <HAL_GPIO_Init+0x240>
 8001f0e:	2305      	movs	r3, #5
 8001f10:	e008      	b.n	8001f24 <HAL_GPIO_Init+0x240>
 8001f12:	2304      	movs	r3, #4
 8001f14:	e006      	b.n	8001f24 <HAL_GPIO_Init+0x240>
 8001f16:	2303      	movs	r3, #3
 8001f18:	e004      	b.n	8001f24 <HAL_GPIO_Init+0x240>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e002      	b.n	8001f24 <HAL_GPIO_Init+0x240>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_GPIO_Init+0x240>
 8001f22:	2300      	movs	r3, #0
 8001f24:	69fa      	ldr	r2, [r7, #28]
 8001f26:	f002 0203 	and.w	r2, r2, #3
 8001f2a:	0092      	lsls	r2, r2, #2
 8001f2c:	4093      	lsls	r3, r2
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f34:	4935      	ldr	r1, [pc, #212]	@ (800200c <HAL_GPIO_Init+0x328>)
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	089b      	lsrs	r3, r3, #2
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f42:	4b3d      	ldr	r3, [pc, #244]	@ (8002038 <HAL_GPIO_Init+0x354>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f66:	4a34      	ldr	r2, [pc, #208]	@ (8002038 <HAL_GPIO_Init+0x354>)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f6c:	4b32      	ldr	r3, [pc, #200]	@ (8002038 <HAL_GPIO_Init+0x354>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f90:	4a29      	ldr	r2, [pc, #164]	@ (8002038 <HAL_GPIO_Init+0x354>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f96:	4b28      	ldr	r3, [pc, #160]	@ (8002038 <HAL_GPIO_Init+0x354>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fba:	4a1f      	ldr	r2, [pc, #124]	@ (8002038 <HAL_GPIO_Init+0x354>)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8002038 <HAL_GPIO_Init+0x354>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fe4:	4a14      	ldr	r2, [pc, #80]	@ (8002038 <HAL_GPIO_Init+0x354>)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3301      	adds	r3, #1
 8001fee:	61fb      	str	r3, [r7, #28]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	2b0f      	cmp	r3, #15
 8001ff4:	f67f ae86 	bls.w	8001d04 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3724      	adds	r7, #36	@ 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800
 800200c:	40013800 	.word	0x40013800
 8002010:	40020000 	.word	0x40020000
 8002014:	40020400 	.word	0x40020400
 8002018:	40020800 	.word	0x40020800
 800201c:	40020c00 	.word	0x40020c00
 8002020:	40021000 	.word	0x40021000
 8002024:	40021400 	.word	0x40021400
 8002028:	40021800 	.word	0x40021800
 800202c:	40021c00 	.word	0x40021c00
 8002030:	40022000 	.word	0x40022000
 8002034:	40022400 	.word	0x40022400
 8002038:	40013c00 	.word	0x40013c00

0800203c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e08b      	b.n	8002166 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d106      	bne.n	8002068 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff fa5a 	bl	800151c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2224      	movs	r2, #36	@ 0x24
 800206c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0201 	bic.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800208c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800209c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d107      	bne.n	80020b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	e006      	b.n	80020c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80020c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d108      	bne.n	80020de <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	e007      	b.n	80020ee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6859      	ldr	r1, [r3, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002170 <HAL_I2C_Init+0x134>)
 80020fa:	430b      	orrs	r3, r1
 80020fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800210c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691a      	ldr	r2, [r3, #16]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	430a      	orrs	r2, r1
 8002126:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69d9      	ldr	r1, [r3, #28]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a1a      	ldr	r2, [r3, #32]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0201 	orr.w	r2, r2, #1
 8002146:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2220      	movs	r2, #32
 8002152:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	02008000 	.word	0x02008000

08002174 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b088      	sub	sp, #32
 8002178:	af02      	add	r7, sp, #8
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	607a      	str	r2, [r7, #4]
 800217e:	461a      	mov	r2, r3
 8002180:	460b      	mov	r3, r1
 8002182:	817b      	strh	r3, [r7, #10]
 8002184:	4613      	mov	r3, r2
 8002186:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b20      	cmp	r3, #32
 8002192:	d17c      	bne.n	800228e <HAL_I2C_Master_Transmit_IT+0x11a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800219e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021a2:	d101      	bne.n	80021a8 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 80021a4:	2302      	movs	r3, #2
 80021a6:	e073      	b.n	8002290 <HAL_I2C_Master_Transmit_IT+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d101      	bne.n	80021b6 <HAL_I2C_Master_Transmit_IT+0x42>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e06c      	b.n	8002290 <HAL_I2C_Master_Transmit_IT+0x11c>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2221      	movs	r2, #33	@ 0x21
 80021c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2210      	movs	r2, #16
 80021ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	893a      	ldrh	r2, [r7, #8]
 80021de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4a2d      	ldr	r2, [pc, #180]	@ (8002298 <HAL_I2C_Master_Transmit_IT+0x124>)
 80021e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4a2c      	ldr	r2, [pc, #176]	@ (800229c <HAL_I2C_Master_Transmit_IT+0x128>)
 80021ea:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	2bff      	cmp	r3, #255	@ 0xff
 80021f4:	d906      	bls.n	8002204 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	22ff      	movs	r2, #255	@ 0xff
 80021fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80021fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	e007      	b.n	8002214 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002208:	b29a      	uxth	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800220e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002212:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferSize > 0U)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002218:	2b00      	cmp	r3, #0
 800221a:	d024      	beq.n	8002266 <HAL_I2C_Master_Transmit_IT+0xf2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002220:	781a      	ldrb	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222c:	1c5a      	adds	r2, r3, #1
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002236:	b29b      	uxth	r3, r3
 8002238:	3b01      	subs	r3, #1
 800223a:	b29a      	uxth	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002244:	3b01      	subs	r3, #1
 8002246:	b29a      	uxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	851a      	strh	r2, [r3, #40]	@ 0x28

      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002250:	b2db      	uxtb	r3, r3
 8002252:	3301      	adds	r3, #1
 8002254:	b2da      	uxtb	r2, r3
 8002256:	8979      	ldrh	r1, [r7, #10]
 8002258:	4b11      	ldr	r3, [pc, #68]	@ (80022a0 <HAL_I2C_Master_Transmit_IT+0x12c>)
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f001 fb4c 	bl	80038fc <I2C_TransferConfig>
 8002264:	e009      	b.n	800227a <HAL_I2C_Master_Transmit_IT+0x106>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800226a:	b2da      	uxtb	r2, r3
 800226c:	8979      	ldrh	r1, [r7, #10]
 800226e:	4b0c      	ldr	r3, [pc, #48]	@ (80022a0 <HAL_I2C_Master_Transmit_IT+0x12c>)
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f001 fb41 	bl	80038fc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002282:	2101      	movs	r1, #1
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f001 fb6b 	bl	8003960 <I2C_Enable_IRQ>

    return HAL_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	e000      	b.n	8002290 <HAL_I2C_Master_Transmit_IT+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800228e:	2302      	movs	r3, #2
  }
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	ffff0000 	.word	0xffff0000
 800229c:	08002489 	.word	0x08002489
 80022a0:	80002000 	.word	0x80002000

080022a4 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	607a      	str	r2, [r7, #4]
 80022ae:	461a      	mov	r2, r3
 80022b0:	460b      	mov	r3, r1
 80022b2:	817b      	strh	r3, [r7, #10]
 80022b4:	4613      	mov	r3, r2
 80022b6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b20      	cmp	r3, #32
 80022c2:	d153      	bne.n	800236c <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022d2:	d101      	bne.n	80022d8 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 80022d4:	2302      	movs	r3, #2
 80022d6:	e04a      	b.n	800236e <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_I2C_Master_Receive_IT+0x42>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e043      	b.n	800236e <HAL_I2C_Master_Receive_IT+0xca>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2222      	movs	r2, #34	@ 0x22
 80022f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2210      	movs	r2, #16
 80022fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	893a      	ldrh	r2, [r7, #8]
 800230e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4a19      	ldr	r2, [pc, #100]	@ (8002378 <HAL_I2C_Master_Receive_IT+0xd4>)
 8002314:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4a18      	ldr	r2, [pc, #96]	@ (800237c <HAL_I2C_Master_Receive_IT+0xd8>)
 800231a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002320:	b29b      	uxth	r3, r3
 8002322:	2bff      	cmp	r3, #255	@ 0xff
 8002324:	d906      	bls.n	8002334 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = 1U;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2201      	movs	r2, #1
 800232a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800232c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	e007      	b.n	8002344 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002338:	b29a      	uxth	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800233e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002342:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002348:	b2da      	uxtb	r2, r3
 800234a:	8979      	ldrh	r1, [r7, #10]
 800234c:	4b0c      	ldr	r3, [pc, #48]	@ (8002380 <HAL_I2C_Master_Receive_IT+0xdc>)
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f001 fad2 	bl	80038fc <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002360:	2102      	movs	r1, #2
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f001 fafc 	bl	8003960 <I2C_Enable_IRQ>

    return HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	e000      	b.n	800236e <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 800236c:	2302      	movs	r3, #2
  }
}
 800236e:	4618      	mov	r0, r3
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	ffff0000 	.word	0xffff0000
 800237c:	08002489 	.word	0x08002489
 8002380:	80002400 	.word	0x80002400

08002384 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	68f9      	ldr	r1, [r7, #12]
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	4798      	blx	r3
  }
}
 80023b0:	bf00      	nop
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	70fb      	strb	r3, [r7, #3]
 8002414:	4613      	mov	r3, r2
 8002416:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af02      	add	r7, sp, #8
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d101      	bne.n	80024a6 <I2C_Master_ISR_IT+0x1e>
 80024a2:	2302      	movs	r3, #2
 80024a4:	e121      	b.n	80026ea <I2C_Master_ISR_IT+0x262>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f003 0310 	and.w	r3, r3, #16
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d012      	beq.n	80024de <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00d      	beq.n	80024de <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2210      	movs	r2, #16
 80024c8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ce:	f043 0204 	orr.w	r2, r3, #4
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f001 f9cd 	bl	8003876 <I2C_Flush_TXDR>
 80024dc:	e0f2      	b.n	80026c4 <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d022      	beq.n	800252e <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d01d      	beq.n	800252e <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f023 0304 	bic.w	r3, r3, #4
 80024f8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002516:	3b01      	subs	r3, #1
 8002518:	b29a      	uxth	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002522:	b29b      	uxth	r3, r3
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800252c:	e0ca      	b.n	80026c4 <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002534:	2b00      	cmp	r3, #0
 8002536:	d128      	bne.n	800258a <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800253e:	2b00      	cmp	r3, #0
 8002540:	d023      	beq.n	800258a <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002548:	2b00      	cmp	r3, #0
 800254a:	d01e      	beq.n	800258a <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002550:	b29b      	uxth	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 80b6 	beq.w	80026c4 <I2C_Master_ISR_IT+0x23c>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255c:	781a      	ldrb	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8002588:	e09c      	b.n	80026c4 <I2C_Master_ISR_IT+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002590:	2b00      	cmp	r3, #0
 8002592:	d06a      	beq.n	800266a <I2C_Master_ISR_IT+0x1e2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800259a:	2b00      	cmp	r3, #0
 800259c:	d065      	beq.n	800266a <I2C_Master_ISR_IT+0x1e2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d04e      	beq.n	8002646 <I2C_Master_ISR_IT+0x1be>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d14a      	bne.n	8002646 <I2C_Master_ISR_IT+0x1be>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025bc:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	2bff      	cmp	r3, #255	@ 0xff
 80025c6:	d91c      	bls.n	8002602 <I2C_Master_ISR_IT+0x17a>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	0c1b      	lsrs	r3, r3, #16
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d103      	bne.n	80025e4 <I2C_Master_ISR_IT+0x15c>
        {
          hi2c->XferSize = 1U;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2201      	movs	r2, #1
 80025e0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80025e2:	e002      	b.n	80025ea <I2C_Master_ISR_IT+0x162>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	22ff      	movs	r2, #255	@ 0xff
 80025e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	8a79      	ldrh	r1, [r7, #18]
 80025f2:	2300      	movs	r3, #0
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f001 f97e 	bl	80038fc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002600:	e032      	b.n	8002668 <I2C_Master_ISR_IT+0x1e0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002606:	b29a      	uxth	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002610:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002614:	d00b      	beq.n	800262e <I2C_Master_ISR_IT+0x1a6>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800261a:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002620:	8a79      	ldrh	r1, [r7, #18]
 8002622:	2000      	movs	r0, #0
 8002624:	9000      	str	r0, [sp, #0]
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f001 f968 	bl	80038fc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800262c:	e01c      	b.n	8002668 <I2C_Master_ISR_IT+0x1e0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002632:	b2da      	uxtb	r2, r3
 8002634:	8a79      	ldrh	r1, [r7, #18]
 8002636:	2300      	movs	r3, #0
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f001 f95c 	bl	80038fc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002644:	e010      	b.n	8002668 <I2C_Master_ISR_IT+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002650:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002654:	d003      	beq.n	800265e <I2C_Master_ISR_IT+0x1d6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 fcdd 	bl	8003016 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800265c:	e032      	b.n	80026c4 <I2C_Master_ISR_IT+0x23c>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800265e:	2140      	movs	r1, #64	@ 0x40
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 fff1 	bl	8003648 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002666:	e02d      	b.n	80026c4 <I2C_Master_ISR_IT+0x23c>
 8002668:	e02c      	b.n	80026c4 <I2C_Master_ISR_IT+0x23c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002670:	2b00      	cmp	r3, #0
 8002672:	d027      	beq.n	80026c4 <I2C_Master_ISR_IT+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800267a:	2b00      	cmp	r3, #0
 800267c:	d022      	beq.n	80026c4 <I2C_Master_ISR_IT+0x23c>
  {
    if (hi2c->XferCount == 0U)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002682:	b29b      	uxth	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d119      	bne.n	80026bc <I2C_Master_ISR_IT+0x234>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002692:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002696:	d015      	beq.n	80026c4 <I2C_Master_ISR_IT+0x23c>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800269c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026a0:	d108      	bne.n	80026b4 <I2C_Master_ISR_IT+0x22c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	e007      	b.n	80026c4 <I2C_Master_ISR_IT+0x23c>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 fcae 	bl	8003016 <I2C_ITMasterSeqCplt>
 80026ba:	e003      	b.n	80026c4 <I2C_Master_ISR_IT+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80026bc:	2140      	movs	r1, #64	@ 0x40
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 ffc2 	bl	8003648 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f003 0320 	and.w	r3, r3, #32
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d008      	beq.n	80026e0 <I2C_Master_ISR_IT+0x258>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <I2C_Master_ISR_IT+0x258>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80026d8:	6979      	ldr	r1, [r7, #20]
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 fd34 	bl	8003148 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b086      	sub	sp, #24
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002702:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800270e:	2b01      	cmp	r3, #1
 8002710:	d101      	bne.n	8002716 <I2C_Slave_ISR_IT+0x24>
 8002712:	2302      	movs	r3, #2
 8002714:	e0e2      	b.n	80028dc <I2C_Slave_ISR_IT+0x1ea>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	f003 0320 	and.w	r3, r3, #32
 8002724:	2b00      	cmp	r3, #0
 8002726:	d009      	beq.n	800273c <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800272e:	2b00      	cmp	r3, #0
 8002730:	d004      	beq.n	800273c <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002732:	6939      	ldr	r1, [r7, #16]
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 fdcf 	bl	80032d8 <I2C_ITSlaveCplt>
 800273a:	e0ca      	b.n	80028d2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	2b00      	cmp	r3, #0
 8002744:	d04b      	beq.n	80027de <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800274c:	2b00      	cmp	r3, #0
 800274e:	d046      	beq.n	80027de <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002754:	b29b      	uxth	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d128      	bne.n	80027ac <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b28      	cmp	r3, #40	@ 0x28
 8002764:	d108      	bne.n	8002778 <I2C_Slave_ISR_IT+0x86>
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800276c:	d104      	bne.n	8002778 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800276e:	6939      	ldr	r1, [r7, #16]
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 ff15 	bl	80035a0 <I2C_ITListenCplt>
 8002776:	e031      	b.n	80027dc <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b29      	cmp	r3, #41	@ 0x29
 8002782:	d10e      	bne.n	80027a2 <I2C_Slave_ISR_IT+0xb0>
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800278a:	d00a      	beq.n	80027a2 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2210      	movs	r2, #16
 8002792:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002794:	68f8      	ldr	r0, [r7, #12]
 8002796:	f001 f86e 	bl	8003876 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 fc78 	bl	8003090 <I2C_ITSlaveSeqCplt>
 80027a0:	e01c      	b.n	80027dc <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2210      	movs	r2, #16
 80027a8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80027aa:	e08f      	b.n	80028cc <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2210      	movs	r2, #16
 80027b2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b8:	f043 0204 	orr.w	r2, r3, #4
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <I2C_Slave_ISR_IT+0xdc>
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027cc:	d17e      	bne.n	80028cc <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d2:	4619      	mov	r1, r3
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 ff37 	bl	8003648 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80027da:	e077      	b.n	80028cc <I2C_Slave_ISR_IT+0x1da>
 80027dc:	e076      	b.n	80028cc <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d02f      	beq.n	8002848 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d02a      	beq.n	8002848 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d018      	beq.n	800282e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002824:	b29b      	uxth	r3, r3
 8002826:	3b01      	subs	r3, #1
 8002828:	b29a      	uxth	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002832:	b29b      	uxth	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d14b      	bne.n	80028d0 <I2C_Slave_ISR_IT+0x1de>
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800283e:	d047      	beq.n	80028d0 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 fc25 	bl	8003090 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002846:	e043      	b.n	80028d0 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d009      	beq.n	8002866 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002858:	2b00      	cmp	r3, #0
 800285a:	d004      	beq.n	8002866 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800285c:	6939      	ldr	r1, [r7, #16]
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 fb55 	bl	8002f0e <I2C_ITAddrCplt>
 8002864:	e035      	b.n	80028d2 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d030      	beq.n	80028d2 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002876:	2b00      	cmp	r3, #0
 8002878:	d02b      	beq.n	80028d2 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800287e:	b29b      	uxth	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d018      	beq.n	80028b6 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002888:	781a      	ldrb	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80028b4:	e00d      	b.n	80028d2 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028bc:	d002      	beq.n	80028c4 <I2C_Slave_ISR_IT+0x1d2>
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d106      	bne.n	80028d2 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 fbe3 	bl	8003090 <I2C_ITSlaveSeqCplt>
 80028ca:	e002      	b.n	80028d2 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80028cc:	bf00      	nop
 80028ce:	e000      	b.n	80028d2 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80028d0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af02      	add	r7, sp, #8
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d101      	bne.n	80028fe <I2C_Master_ISR_DMA+0x1a>
 80028fa:	2302      	movs	r3, #2
 80028fc:	e0e7      	b.n	8002ace <I2C_Master_ISR_DMA+0x1ea>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	f003 0310 	and.w	r3, r3, #16
 800290c:	2b00      	cmp	r3, #0
 800290e:	d016      	beq.n	800293e <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002916:	2b00      	cmp	r3, #0
 8002918:	d011      	beq.n	800293e <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2210      	movs	r2, #16
 8002920:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002926:	f043 0204 	orr.w	r2, r3, #4
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800292e:	2120      	movs	r1, #32
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f001 f815 	bl	8003960 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 ff9d 	bl	8003876 <I2C_Flush_TXDR>
 800293c:	e0c2      	b.n	8002ac4 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002944:	2b00      	cmp	r3, #0
 8002946:	d07f      	beq.n	8002a48 <I2C_Master_ISR_DMA+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800294e:	2b00      	cmp	r3, #0
 8002950:	d07a      	beq.n	8002a48 <I2C_Master_ISR_DMA+0x164>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002960:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002966:	b29b      	uxth	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d05c      	beq.n	8002a26 <I2C_Master_ISR_DMA+0x142>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	b29b      	uxth	r3, r3
 8002974:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002978:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800297e:	b29b      	uxth	r3, r3
 8002980:	2bff      	cmp	r3, #255	@ 0xff
 8002982:	d914      	bls.n	80029ae <I2C_Master_ISR_DMA+0xca>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	0c1b      	lsrs	r3, r3, #16
 800298c:	b2db      	uxtb	r3, r3
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b01      	cmp	r3, #1
 8002996:	d103      	bne.n	80029a0 <I2C_Master_ISR_DMA+0xbc>
        {
          hi2c->XferSize = 1U;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2201      	movs	r2, #1
 800299c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800299e:	e002      	b.n	80029a6 <I2C_Master_ISR_DMA+0xc2>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	22ff      	movs	r2, #255	@ 0xff
 80029a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 80029a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	e010      	b.n	80029d0 <I2C_Master_ISR_DMA+0xec>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80029c0:	d003      	beq.n	80029ca <I2C_Master_ISR_DMA+0xe6>
        {
          xfermode = hi2c->XferOptions;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	e002      	b.n	80029d0 <I2C_Master_ISR_DMA+0xec>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80029ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029ce:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	8a79      	ldrh	r1, [r7, #18]
 80029d8:	2300      	movs	r3, #0
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 ff8c 	bl	80038fc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b22      	cmp	r3, #34	@ 0x22
 8002a00:	d108      	bne.n	8002a14 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a10:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002a12:	e057      	b.n	8002ac4 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a22:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002a24:	e04e      	b.n	8002ac4 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a34:	d003      	beq.n	8002a3e <I2C_Master_ISR_DMA+0x15a>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 faed 	bl	8003016 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002a3c:	e042      	b.n	8002ac4 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002a3e:	2140      	movs	r1, #64	@ 0x40
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 fe01 	bl	8003648 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002a46:	e03d      	b.n	8002ac4 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d028      	beq.n	8002aa4 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d023      	beq.n	8002aa4 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d119      	bne.n	8002a9a <I2C_Master_ISR_DMA+0x1b6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a74:	d025      	beq.n	8002ac2 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a7e:	d108      	bne.n	8002a92 <I2C_Master_ISR_DMA+0x1ae>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a8e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002a90:	e017      	b.n	8002ac2 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 fabf 	bl	8003016 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002a98:	e013      	b.n	8002ac2 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002a9a:	2140      	movs	r1, #64	@ 0x40
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 fdd3 	bl	8003648 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002aa2:	e00e      	b.n	8002ac2 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f003 0320 	and.w	r3, r3, #32
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002ab8:	68b9      	ldr	r1, [r7, #8]
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 fb44 	bl	8003148 <I2C_ITMasterCplt>
 8002ac0:	e000      	b.n	8002ac4 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8002ac2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002ae4:	4b90      	ldr	r3, [pc, #576]	@ (8002d28 <I2C_Mem_ISR_DMA+0x250>)
 8002ae6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d101      	bne.n	8002af6 <I2C_Mem_ISR_DMA+0x1e>
 8002af2:	2302      	movs	r3, #2
 8002af4:	e12f      	b.n	8002d56 <I2C_Mem_ISR_DMA+0x27e>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d016      	beq.n	8002b36 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d011      	beq.n	8002b36 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2210      	movs	r2, #16
 8002b18:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1e:	f043 0204 	orr.w	r2, r3, #4
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002b26:	2120      	movs	r1, #32
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 ff19 	bl	8003960 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 fea1 	bl	8003876 <I2C_Flush_TXDR>
 8002b34:	e10a      	b.n	8002d4c <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00e      	beq.n	8002b5e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d009      	beq.n	8002b5e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002b52:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f04f 32ff 	mov.w	r2, #4294967295
 8002b5a:	651a      	str	r2, [r3, #80]	@ 0x50
 8002b5c:	e0f6      	b.n	8002d4c <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d06d      	beq.n	8002c44 <I2C_Mem_ISR_DMA+0x16c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d068      	beq.n	8002c44 <I2C_Mem_ISR_DMA+0x16c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002b72:	2101      	movs	r1, #1
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f000 ff77 	bl	8003a68 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002b7a:	2110      	movs	r1, #16
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 feef 	bl	8003960 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d056      	beq.n	8002c3a <I2C_Mem_ISR_DMA+0x162>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2bff      	cmp	r3, #255	@ 0xff
 8002b94:	d91e      	bls.n	8002bd4 <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	0c1b      	lsrs	r3, r3, #16
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d103      	bne.n	8002bb2 <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2201      	movs	r2, #1
 8002bae:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002bb0:	e002      	b.n	8002bb8 <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	22ff      	movs	r2, #255	@ 0xff
 8002bb6:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bbc:	b299      	uxth	r1, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 fe95 	bl	80038fc <I2C_TransferConfig>
 8002bd2:	e011      	b.n	8002bf8 <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be2:	b299      	uxth	r1, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	2300      	movs	r3, #0
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 fe82 	bl	80038fc <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b22      	cmp	r3, #34	@ 0x22
 8002c14:	d108      	bne.n	8002c28 <I2C_Mem_ISR_DMA+0x150>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c24:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002c26:	e091      	b.n	8002d4c <I2C_Mem_ISR_DMA+0x274>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c36:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002c38:	e088      	b.n	8002d4c <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002c3a:	2140      	movs	r1, #64	@ 0x40
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 fd03 	bl	8003648 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002c42:	e083      	b.n	8002d4c <I2C_Mem_ISR_DMA+0x274>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d070      	beq.n	8002d30 <I2C_Mem_ISR_DMA+0x258>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d06b      	beq.n	8002d30 <I2C_Mem_ISR_DMA+0x258>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002c58:	2101      	movs	r1, #1
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 ff04 	bl	8003a68 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002c60:	2110      	movs	r1, #16
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 fe7c 	bl	8003960 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b22      	cmp	r3, #34	@ 0x22
 8002c72:	d101      	bne.n	8002c78 <I2C_Mem_ISR_DMA+0x1a0>
    {
      direction = I2C_GENERATE_START_READ;
 8002c74:	4b2d      	ldr	r3, [pc, #180]	@ (8002d2c <I2C_Mem_ISR_DMA+0x254>)
 8002c76:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	2bff      	cmp	r3, #255	@ 0xff
 8002c80:	d91e      	bls.n	8002cc0 <I2C_Mem_ISR_DMA+0x1e8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	0c1b      	lsrs	r3, r3, #16
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d103      	bne.n	8002c9e <I2C_Mem_ISR_DMA+0x1c6>
      {
        hi2c->XferSize = 1U;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002c9c:	e002      	b.n	8002ca4 <I2C_Mem_ISR_DMA+0x1cc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	22ff      	movs	r2, #255	@ 0xff
 8002ca2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca8:	b299      	uxth	r1, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 fe1f 	bl	80038fc <I2C_TransferConfig>
 8002cbe:	e011      	b.n	8002ce4 <I2C_Mem_ISR_DMA+0x20c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cce:	b299      	uxth	r1, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 fe0c 	bl	80038fc <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b22      	cmp	r3, #34	@ 0x22
 8002d00:	d108      	bne.n	8002d14 <I2C_Mem_ISR_DMA+0x23c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d10:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d12:	e01b      	b.n	8002d4c <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d22:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d24:	e012      	b.n	8002d4c <I2C_Mem_ISR_DMA+0x274>
 8002d26:	bf00      	nop
 8002d28:	80002000 	.word	0x80002000
 8002d2c:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f003 0320 	and.w	r3, r3, #32
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d008      	beq.n	8002d4c <I2C_Mem_ISR_DMA+0x274>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <I2C_Mem_ISR_DMA+0x274>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 f9fe 	bl	8003148 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop

08002d60 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d70:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <I2C_Slave_ISR_DMA+0x24>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e0c0      	b.n	8002f06 <I2C_Slave_ISR_DMA+0x1a6>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d009      	beq.n	8002daa <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d004      	beq.n	8002daa <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002da0:	68b9      	ldr	r1, [r7, #8]
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 fa98 	bl	80032d8 <I2C_ITSlaveCplt>
 8002da8:	e0a8      	b.n	8002efc <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 8095 	beq.w	8002ee0 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 808f 	beq.w	8002ee0 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d104      	bne.n	8002dd6 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d07d      	beq.n	8002ed2 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00c      	beq.n	8002df8 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d007      	beq.n	8002df8 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d101      	bne.n	8002df8 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8002df4:	2301      	movs	r3, #1
 8002df6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00c      	beq.n	8002e1a <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d007      	beq.n	8002e1a <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8002e16:	2301      	movs	r3, #1
 8002e18:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d128      	bne.n	8002e72 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b28      	cmp	r3, #40	@ 0x28
 8002e2a:	d108      	bne.n	8002e3e <I2C_Slave_ISR_DMA+0xde>
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e32:	d104      	bne.n	8002e3e <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002e34:	68b9      	ldr	r1, [r7, #8]
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 fbb2 	bl	80035a0 <I2C_ITListenCplt>
 8002e3c:	e048      	b.n	8002ed0 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b29      	cmp	r3, #41	@ 0x29
 8002e48:	d10e      	bne.n	8002e68 <I2C_Slave_ISR_DMA+0x108>
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e50:	d00a      	beq.n	8002e68 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2210      	movs	r2, #16
 8002e58:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 fd0b 	bl	8003876 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 f915 	bl	8003090 <I2C_ITSlaveSeqCplt>
 8002e66:	e033      	b.n	8002ed0 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2210      	movs	r2, #16
 8002e6e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002e70:	e034      	b.n	8002edc <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2210      	movs	r2, #16
 8002e78:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7e:	f043 0204 	orr.w	r2, r3, #4
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e8c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <I2C_Slave_ISR_DMA+0x13c>
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e9a:	d11f      	bne.n	8002edc <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e9c:	7dfb      	ldrb	r3, [r7, #23]
 8002e9e:	2b21      	cmp	r3, #33	@ 0x21
 8002ea0:	d002      	beq.n	8002ea8 <I2C_Slave_ISR_DMA+0x148>
 8002ea2:	7dfb      	ldrb	r3, [r7, #23]
 8002ea4:	2b29      	cmp	r3, #41	@ 0x29
 8002ea6:	d103      	bne.n	8002eb0 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2221      	movs	r2, #33	@ 0x21
 8002eac:	631a      	str	r2, [r3, #48]	@ 0x30
 8002eae:	e008      	b.n	8002ec2 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002eb0:	7dfb      	ldrb	r3, [r7, #23]
 8002eb2:	2b22      	cmp	r3, #34	@ 0x22
 8002eb4:	d002      	beq.n	8002ebc <I2C_Slave_ISR_DMA+0x15c>
 8002eb6:	7dfb      	ldrb	r3, [r7, #23]
 8002eb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8002eba:	d102      	bne.n	8002ec2 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2222      	movs	r2, #34	@ 0x22
 8002ec0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 fbbd 	bl	8003648 <I2C_ITError>
      if (treatdmanack == 1U)
 8002ece:	e005      	b.n	8002edc <I2C_Slave_ISR_DMA+0x17c>
 8002ed0:	e004      	b.n	8002edc <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2210      	movs	r2, #16
 8002ed8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002eda:	e00f      	b.n	8002efc <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8002edc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002ede:	e00d      	b.n	8002efc <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d008      	beq.n	8002efc <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002ef4:	68b9      	ldr	r1, [r7, #8]
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 f809 	bl	8002f0e <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3720      	adds	r7, #32
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b084      	sub	sp, #16
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002f24:	2b28      	cmp	r3, #40	@ 0x28
 8002f26:	d16a      	bne.n	8002ffe <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	0c1b      	lsrs	r3, r3, #16
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	0c1b      	lsrs	r3, r3, #16
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002f46:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f54:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002f62:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d138      	bne.n	8002fde <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002f6c:	897b      	ldrh	r3, [r7, #10]
 8002f6e:	09db      	lsrs	r3, r3, #7
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	89bb      	ldrh	r3, [r7, #12]
 8002f74:	4053      	eors	r3, r2
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	f003 0306 	and.w	r3, r3, #6
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d11c      	bne.n	8002fba <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002f80:	897b      	ldrh	r3, [r7, #10]
 8002f82:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d13b      	bne.n	800300e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2208      	movs	r2, #8
 8002fa2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002fac:	89ba      	ldrh	r2, [r7, #12]
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff fa28 	bl	8002408 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002fb8:	e029      	b.n	800300e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002fba:	893b      	ldrh	r3, [r7, #8]
 8002fbc:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002fbe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 fd50 	bl	8003a68 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002fd0:	89ba      	ldrh	r2, [r7, #12]
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff fa16 	bl	8002408 <HAL_I2C_AddrCallback>
}
 8002fdc:	e017      	b.n	800300e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002fde:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 fd40 	bl	8003a68 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ff0:	89ba      	ldrh	r2, [r7, #12]
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff fa06 	bl	8002408 <HAL_I2C_AddrCallback>
}
 8002ffc:	e007      	b.n	800300e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2208      	movs	r2, #8
 8003004:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800300e:	bf00      	nop
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b21      	cmp	r3, #33	@ 0x21
 8003030:	d115      	bne.n	800305e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2220      	movs	r2, #32
 8003036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2211      	movs	r2, #17
 800303e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003046:	2101      	movs	r1, #1
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 fd0d 	bl	8003a68 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff f9ae 	bl	80023b8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800305c:	e014      	b.n	8003088 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2212      	movs	r2, #18
 800306a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003072:	2102      	movs	r1, #2
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 fcf7 	bl	8003a68 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff f9a2 	bl	80023cc <HAL_I2C_MasterRxCpltCallback>
}
 8003088:	bf00      	nop
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d008      	beq.n	80030c4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	e00c      	b.n	80030de <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d007      	beq.n	80030de <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030dc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b29      	cmp	r3, #41	@ 0x29
 80030e8:	d112      	bne.n	8003110 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2228      	movs	r2, #40	@ 0x28
 80030ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2221      	movs	r2, #33	@ 0x21
 80030f6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80030f8:	2101      	movs	r1, #1
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fcb4 	bl	8003a68 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7ff f969 	bl	80023e0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800310e:	e017      	b.n	8003140 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b2a      	cmp	r3, #42	@ 0x2a
 800311a:	d111      	bne.n	8003140 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2228      	movs	r2, #40	@ 0x28
 8003120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2222      	movs	r2, #34	@ 0x22
 8003128:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800312a:	2102      	movs	r1, #2
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 fc9b 	bl	8003a68 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7ff f95a 	bl	80023f4 <HAL_I2C_SlaveRxCpltCallback>
}
 8003140:	bf00      	nop
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2220      	movs	r2, #32
 800315c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b21      	cmp	r3, #33	@ 0x21
 8003168:	d107      	bne.n	800317a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800316a:	2101      	movs	r1, #1
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 fc7b 	bl	8003a68 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2211      	movs	r2, #17
 8003176:	631a      	str	r2, [r3, #48]	@ 0x30
 8003178:	e00c      	b.n	8003194 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b22      	cmp	r3, #34	@ 0x22
 8003184:	d106      	bne.n	8003194 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003186:	2102      	movs	r1, #2
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 fc6d 	bl	8003a68 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2212      	movs	r2, #18
 8003192:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6859      	ldr	r1, [r3, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	4b4c      	ldr	r3, [pc, #304]	@ (80032d0 <I2C_ITMasterCplt+0x188>)
 80031a0:	400b      	ands	r3, r1
 80031a2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a49      	ldr	r2, [pc, #292]	@ (80032d4 <I2C_ITMasterCplt+0x18c>)
 80031ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f003 0310 	and.w	r3, r3, #16
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d009      	beq.n	80031ce <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2210      	movs	r2, #16
 80031c0:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c6:	f043 0204 	orr.w	r2, r3, #4
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b60      	cmp	r3, #96	@ 0x60
 80031d8:	d10a      	bne.n	80031f0 <I2C_ITMasterCplt+0xa8>
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80031ee:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 fb40 	bl	8003876 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fa:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b60      	cmp	r3, #96	@ 0x60
 8003206:	d002      	beq.n	800320e <I2C_ITMasterCplt+0xc6>
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d006      	beq.n	800321c <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003212:	4619      	mov	r1, r3
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 fa17 	bl	8003648 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800321a:	e054      	b.n	80032c6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b21      	cmp	r3, #33	@ 0x21
 8003226:	d124      	bne.n	8003272 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b40      	cmp	r3, #64	@ 0x40
 8003240:	d10b      	bne.n	800325a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff f8f0 	bl	8002438 <HAL_I2C_MemTxCpltCallback>
}
 8003258:	e035      	b.n	80032c6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff f8a4 	bl	80023b8 <HAL_I2C_MasterTxCpltCallback>
}
 8003270:	e029      	b.n	80032c6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b22      	cmp	r3, #34	@ 0x22
 800327c:	d123      	bne.n	80032c6 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2220      	movs	r2, #32
 8003282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b40      	cmp	r3, #64	@ 0x40
 8003296:	d10b      	bne.n	80032b0 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7ff f8cf 	bl	800244c <HAL_I2C_MemRxCpltCallback>
}
 80032ae:	e00a      	b.n	80032c6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff f883 	bl	80023cc <HAL_I2C_MasterRxCpltCallback>
}
 80032c6:	bf00      	nop
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	fe00e800 	.word	0xfe00e800
 80032d4:	ffff0000 	.word	0xffff0000

080032d8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032fa:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2220      	movs	r2, #32
 8003302:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003304:	7afb      	ldrb	r3, [r7, #11]
 8003306:	2b21      	cmp	r3, #33	@ 0x21
 8003308:	d002      	beq.n	8003310 <I2C_ITSlaveCplt+0x38>
 800330a:	7afb      	ldrb	r3, [r7, #11]
 800330c:	2b29      	cmp	r3, #41	@ 0x29
 800330e:	d108      	bne.n	8003322 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003310:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 fba7 	bl	8003a68 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2221      	movs	r2, #33	@ 0x21
 800331e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003320:	e019      	b.n	8003356 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003322:	7afb      	ldrb	r3, [r7, #11]
 8003324:	2b22      	cmp	r3, #34	@ 0x22
 8003326:	d002      	beq.n	800332e <I2C_ITSlaveCplt+0x56>
 8003328:	7afb      	ldrb	r3, [r7, #11]
 800332a:	2b2a      	cmp	r3, #42	@ 0x2a
 800332c:	d108      	bne.n	8003340 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800332e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 fb98 	bl	8003a68 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2222      	movs	r2, #34	@ 0x22
 800333c:	631a      	str	r2, [r3, #48]	@ 0x30
 800333e:	e00a      	b.n	8003356 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003340:	7afb      	ldrb	r3, [r7, #11]
 8003342:	2b28      	cmp	r3, #40	@ 0x28
 8003344:	d107      	bne.n	8003356 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003346:	f248 0103 	movw	r1, #32771	@ 0x8003
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 fb8c 	bl	8003a68 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003364:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6859      	ldr	r1, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	4b89      	ldr	r3, [pc, #548]	@ (8003598 <I2C_ITSlaveCplt+0x2c0>)
 8003372:	400b      	ands	r3, r1
 8003374:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fa7d 	bl	8003876 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d013      	beq.n	80033ae <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003394:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800339a:	2b00      	cmp	r3, #0
 800339c:	d01f      	beq.n	80033de <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80033ac:	e017      	b.n	80033de <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d012      	beq.n	80033de <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033c6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d006      	beq.n	80033de <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	b29a      	uxth	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d020      	beq.n	800342a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f023 0304 	bic.w	r3, r3, #4
 80033ee:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00c      	beq.n	800342a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003414:	3b01      	subs	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003420:	b29b      	uxth	r3, r3
 8003422:	3b01      	subs	r3, #1
 8003424:	b29a      	uxth	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003438:	f043 0204 	orr.w	r2, r3, #4
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f003 0310 	and.w	r3, r3, #16
 8003446:	2b00      	cmp	r3, #0
 8003448:	d049      	beq.n	80034de <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003450:	2b00      	cmp	r3, #0
 8003452:	d044      	beq.n	80034de <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003458:	b29b      	uxth	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d128      	bne.n	80034b0 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b28      	cmp	r3, #40	@ 0x28
 8003468:	d108      	bne.n	800347c <I2C_ITSlaveCplt+0x1a4>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003470:	d104      	bne.n	800347c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003472:	6979      	ldr	r1, [r7, #20]
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f893 	bl	80035a0 <I2C_ITListenCplt>
 800347a:	e030      	b.n	80034de <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b29      	cmp	r3, #41	@ 0x29
 8003486:	d10e      	bne.n	80034a6 <I2C_ITSlaveCplt+0x1ce>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800348e:	d00a      	beq.n	80034a6 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2210      	movs	r2, #16
 8003496:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 f9ec 	bl	8003876 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7ff fdf6 	bl	8003090 <I2C_ITSlaveSeqCplt>
 80034a4:	e01b      	b.n	80034de <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2210      	movs	r2, #16
 80034ac:	61da      	str	r2, [r3, #28]
 80034ae:	e016      	b.n	80034de <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2210      	movs	r2, #16
 80034b6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034bc:	f043 0204 	orr.w	r2, r3, #4
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <I2C_ITSlaveCplt+0x1fa>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034d0:	d105      	bne.n	80034de <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d6:	4619      	mov	r1, r3
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f8b5 	bl	8003648 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d010      	beq.n	8003516 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f8:	4619      	mov	r1, r3
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f8a4 	bl	8003648 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b28      	cmp	r3, #40	@ 0x28
 800350a:	d141      	bne.n	8003590 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800350c:	6979      	ldr	r1, [r7, #20]
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f846 	bl	80035a0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003514:	e03c      	b.n	8003590 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800351e:	d014      	beq.n	800354a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7ff fdb5 	bl	8003090 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a1c      	ldr	r2, [pc, #112]	@ (800359c <I2C_ITSlaveCplt+0x2c4>)
 800352a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7fe ff6e 	bl	8002424 <HAL_I2C_ListenCpltCallback>
}
 8003548:	e022      	b.n	8003590 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b22      	cmp	r3, #34	@ 0x22
 8003554:	d10e      	bne.n	8003574 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2220      	movs	r2, #32
 800355a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7fe ff41 	bl	80023f4 <HAL_I2C_SlaveRxCpltCallback>
}
 8003572:	e00d      	b.n	8003590 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7fe ff28 	bl	80023e0 <HAL_I2C_SlaveTxCpltCallback>
}
 8003590:	bf00      	nop
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	fe00e800 	.word	0xfe00e800
 800359c:	ffff0000 	.word	0xffff0000

080035a0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a25      	ldr	r2, [pc, #148]	@ (8003644 <I2C_ITListenCplt+0xa4>)
 80035ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d022      	beq.n	800361c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d012      	beq.n	800361c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003606:	b29b      	uxth	r3, r3
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003614:	f043 0204 	orr.w	r2, r3, #4
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800361c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 fa21 	bl	8003a68 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2210      	movs	r2, #16
 800362c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7fe fef4 	bl	8002424 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800363c:	bf00      	nop
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	ffff0000 	.word	0xffff0000

08003648 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003658:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a6d      	ldr	r2, [pc, #436]	@ (800381c <I2C_ITError+0x1d4>)
 8003666:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	431a      	orrs	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800367a:	7bfb      	ldrb	r3, [r7, #15]
 800367c:	2b28      	cmp	r3, #40	@ 0x28
 800367e:	d005      	beq.n	800368c <I2C_ITError+0x44>
 8003680:	7bfb      	ldrb	r3, [r7, #15]
 8003682:	2b29      	cmp	r3, #41	@ 0x29
 8003684:	d002      	beq.n	800368c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	2b2a      	cmp	r3, #42	@ 0x2a
 800368a:	d10b      	bne.n	80036a4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800368c:	2103      	movs	r1, #3
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f9ea 	bl	8003a68 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2228      	movs	r2, #40	@ 0x28
 8003698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a60      	ldr	r2, [pc, #384]	@ (8003820 <I2C_ITError+0x1d8>)
 80036a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80036a2:	e030      	b.n	8003706 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80036a4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f9dd 	bl	8003a68 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f8e1 	bl	8003876 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b60      	cmp	r3, #96	@ 0x60
 80036be:	d01f      	beq.n	8003700 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	f003 0320 	and.w	r3, r3, #32
 80036d2:	2b20      	cmp	r3, #32
 80036d4:	d114      	bne.n	8003700 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	f003 0310 	and.w	r3, r3, #16
 80036e0:	2b10      	cmp	r3, #16
 80036e2:	d109      	bne.n	80036f8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2210      	movs	r2, #16
 80036ea:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f0:	f043 0204 	orr.w	r2, r3, #4
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2220      	movs	r2, #32
 80036fe:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003710:	2b00      	cmp	r3, #0
 8003712:	d039      	beq.n	8003788 <I2C_ITError+0x140>
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	2b11      	cmp	r3, #17
 8003718:	d002      	beq.n	8003720 <I2C_ITError+0xd8>
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b21      	cmp	r3, #33	@ 0x21
 800371e:	d133      	bne.n	8003788 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800372a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800372e:	d107      	bne.n	8003740 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800373e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003744:	4618      	mov	r0, r3
 8003746:	f7fe fabf 	bl	8001cc8 <HAL_DMA_GetState>
 800374a:	4603      	mov	r3, r0
 800374c:	2b01      	cmp	r3, #1
 800374e:	d017      	beq.n	8003780 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003754:	4a33      	ldr	r2, [pc, #204]	@ (8003824 <I2C_ITError+0x1dc>)
 8003756:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003764:	4618      	mov	r0, r3
 8003766:	f7fe fa8d 	bl	8001c84 <HAL_DMA_Abort_IT>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d04d      	beq.n	800380c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003774:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800377a:	4610      	mov	r0, r2
 800377c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800377e:	e045      	b.n	800380c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f851 	bl	8003828 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003786:	e041      	b.n	800380c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800378c:	2b00      	cmp	r3, #0
 800378e:	d039      	beq.n	8003804 <I2C_ITError+0x1bc>
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b12      	cmp	r3, #18
 8003794:	d002      	beq.n	800379c <I2C_ITError+0x154>
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b22      	cmp	r3, #34	@ 0x22
 800379a:	d133      	bne.n	8003804 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037aa:	d107      	bne.n	80037bc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037ba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fe fa81 	bl	8001cc8 <HAL_DMA_GetState>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d017      	beq.n	80037fc <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d0:	4a14      	ldr	r2, [pc, #80]	@ (8003824 <I2C_ITError+0x1dc>)
 80037d2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fe fa4f 	bl	8001c84 <HAL_DMA_Abort_IT>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d011      	beq.n	8003810 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037f6:	4610      	mov	r0, r2
 80037f8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80037fa:	e009      	b.n	8003810 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f813 	bl	8003828 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003802:	e005      	b.n	8003810 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f80f 	bl	8003828 <I2C_TreatErrorCallback>
  }
}
 800380a:	e002      	b.n	8003812 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800380c:	bf00      	nop
 800380e:	e000      	b.n	8003812 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003810:	bf00      	nop
}
 8003812:	bf00      	nop
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	ffff0000 	.word	0xffff0000
 8003820:	080026f3 	.word	0x080026f3
 8003824:	080038bf 	.word	0x080038bf

08003828 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b60      	cmp	r3, #96	@ 0x60
 800383a:	d10e      	bne.n	800385a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fe fe0e 	bl	8002474 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003858:	e009      	b.n	800386e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7fe fdf9 	bl	8002460 <HAL_I2C_ErrorCallback>
}
 800386e:	bf00      	nop
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b02      	cmp	r3, #2
 800388a:	d103      	bne.n	8003894 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2200      	movs	r2, #0
 8003892:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d007      	beq.n	80038b2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	699a      	ldr	r2, [r3, #24]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f042 0201 	orr.w	r2, r2, #1
 80038b0:	619a      	str	r2, [r3, #24]
  }
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b084      	sub	sp, #16
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d8:	2200      	movs	r2, #0
 80038da:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e8:	2200      	movs	r2, #0
 80038ea:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f7ff ff9b 	bl	8003828 <I2C_TreatErrorCallback>
}
 80038f2:	bf00      	nop
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
	...

080038fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	607b      	str	r3, [r7, #4]
 8003906:	460b      	mov	r3, r1
 8003908:	817b      	strh	r3, [r7, #10]
 800390a:	4613      	mov	r3, r2
 800390c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800390e:	897b      	ldrh	r3, [r7, #10]
 8003910:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003914:	7a7b      	ldrb	r3, [r7, #9]
 8003916:	041b      	lsls	r3, r3, #16
 8003918:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800391c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	4313      	orrs	r3, r2
 8003926:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800392a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	0d5b      	lsrs	r3, r3, #21
 8003936:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800393a:	4b08      	ldr	r3, [pc, #32]	@ (800395c <I2C_TransferConfig+0x60>)
 800393c:	430b      	orrs	r3, r1
 800393e:	43db      	mvns	r3, r3
 8003940:	ea02 0103 	and.w	r1, r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	430a      	orrs	r2, r1
 800394c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800394e:	bf00      	nop
 8003950:	371c      	adds	r7, #28
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	03ff63ff 	.word	0x03ff63ff

08003960 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003974:	4a39      	ldr	r2, [pc, #228]	@ (8003a5c <I2C_Enable_IRQ+0xfc>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d032      	beq.n	80039e0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800397e:	4a38      	ldr	r2, [pc, #224]	@ (8003a60 <I2C_Enable_IRQ+0x100>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d02d      	beq.n	80039e0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003988:	4a36      	ldr	r2, [pc, #216]	@ (8003a64 <I2C_Enable_IRQ+0x104>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d028      	beq.n	80039e0 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800398e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003992:	2b00      	cmp	r3, #0
 8003994:	da03      	bge.n	800399e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800399c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800399e:	887b      	ldrh	r3, [r7, #2]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80039ae:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80039b0:	887b      	ldrh	r3, [r7, #2]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80039c0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80039c2:	887b      	ldrh	r3, [r7, #2]
 80039c4:	2b10      	cmp	r3, #16
 80039c6:	d103      	bne.n	80039d0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80039ce:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80039d0:	887b      	ldrh	r3, [r7, #2]
 80039d2:	2b20      	cmp	r3, #32
 80039d4:	d133      	bne.n	8003a3e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f043 0320 	orr.w	r3, r3, #32
 80039dc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80039de:	e02e      	b.n	8003a3e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80039e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	da03      	bge.n	80039f0 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80039ee:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80039f0:	887b      	ldrh	r3, [r7, #2]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003a00:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003a02:	887b      	ldrh	r3, [r7, #2]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8003a12:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003a14:	887b      	ldrh	r3, [r7, #2]
 8003a16:	2b10      	cmp	r3, #16
 8003a18:	d103      	bne.n	8003a22 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003a20:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003a22:	887b      	ldrh	r3, [r7, #2]
 8003a24:	2b20      	cmp	r3, #32
 8003a26:	d103      	bne.n	8003a30 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003a2e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003a30:	887b      	ldrh	r3, [r7, #2]
 8003a32:	2b40      	cmp	r3, #64	@ 0x40
 8003a34:	d103      	bne.n	8003a3e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a3c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6819      	ldr	r1, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	601a      	str	r2, [r3, #0]
}
 8003a4e:	bf00      	nop
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	080028e5 	.word	0x080028e5
 8003a60:	08002d61 	.word	0x08002d61
 8003a64:	08002ad9 	.word	0x08002ad9

08003a68 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003a78:	887b      	ldrh	r3, [r7, #2]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00f      	beq.n	8003aa2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003a88:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003a96:	2b28      	cmp	r3, #40	@ 0x28
 8003a98:	d003      	beq.n	8003aa2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003aa0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003aa2:	887b      	ldrh	r3, [r7, #2]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00f      	beq.n	8003acc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003ab2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003ac0:	2b28      	cmp	r3, #40	@ 0x28
 8003ac2:	d003      	beq.n	8003acc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003aca:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003acc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	da03      	bge.n	8003adc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003ada:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003adc:	887b      	ldrh	r3, [r7, #2]
 8003ade:	2b10      	cmp	r3, #16
 8003ae0:	d103      	bne.n	8003aea <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003ae8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003aea:	887b      	ldrh	r3, [r7, #2]
 8003aec:	2b20      	cmp	r3, #32
 8003aee:	d103      	bne.n	8003af8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f043 0320 	orr.w	r3, r3, #32
 8003af6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003af8:	887b      	ldrh	r3, [r7, #2]
 8003afa:	2b40      	cmp	r3, #64	@ 0x40
 8003afc:	d103      	bne.n	8003b06 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b04:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6819      	ldr	r1, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	43da      	mvns	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	400a      	ands	r2, r1
 8003b16:	601a      	str	r2, [r3, #0]
}
 8003b18:	bf00      	nop
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b20      	cmp	r3, #32
 8003b38:	d138      	bne.n	8003bac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b44:	2302      	movs	r3, #2
 8003b46:	e032      	b.n	8003bae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2224      	movs	r2, #36	@ 0x24
 8003b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 0201 	bic.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6819      	ldr	r1, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0201 	orr.w	r2, r2, #1
 8003b96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	e000      	b.n	8003bae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003bac:	2302      	movs	r3, #2
  }
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b085      	sub	sp, #20
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b20      	cmp	r3, #32
 8003bce:	d139      	bne.n	8003c44 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d101      	bne.n	8003bde <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	e033      	b.n	8003c46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2224      	movs	r2, #36	@ 0x24
 8003bea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0201 	bic.w	r2, r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c0c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	021b      	lsls	r3, r3, #8
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c40:	2300      	movs	r3, #0
 8003c42:	e000      	b.n	8003c46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c44:	2302      	movs	r3, #2
  }
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
	...

08003c54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e291      	b.n	800418e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 8087 	beq.w	8003d86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c78:	4b96      	ldr	r3, [pc, #600]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 030c 	and.w	r3, r3, #12
 8003c80:	2b04      	cmp	r3, #4
 8003c82:	d00c      	beq.n	8003c9e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c84:	4b93      	ldr	r3, [pc, #588]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 030c 	and.w	r3, r3, #12
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d112      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x62>
 8003c90:	4b90      	ldr	r3, [pc, #576]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c9c:	d10b      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c9e:	4b8d      	ldr	r3, [pc, #564]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d06c      	beq.n	8003d84 <HAL_RCC_OscConfig+0x130>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d168      	bne.n	8003d84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e26b      	b.n	800418e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cbe:	d106      	bne.n	8003cce <HAL_RCC_OscConfig+0x7a>
 8003cc0:	4b84      	ldr	r3, [pc, #528]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a83      	ldr	r2, [pc, #524]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003cc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cca:	6013      	str	r3, [r2, #0]
 8003ccc:	e02e      	b.n	8003d2c <HAL_RCC_OscConfig+0xd8>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10c      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x9c>
 8003cd6:	4b7f      	ldr	r3, [pc, #508]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a7e      	ldr	r2, [pc, #504]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003cdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	4b7c      	ldr	r3, [pc, #496]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a7b      	ldr	r2, [pc, #492]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003ce8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	e01d      	b.n	8003d2c <HAL_RCC_OscConfig+0xd8>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cf8:	d10c      	bne.n	8003d14 <HAL_RCC_OscConfig+0xc0>
 8003cfa:	4b76      	ldr	r3, [pc, #472]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a75      	ldr	r2, [pc, #468]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003d00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	4b73      	ldr	r3, [pc, #460]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a72      	ldr	r2, [pc, #456]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	e00b      	b.n	8003d2c <HAL_RCC_OscConfig+0xd8>
 8003d14:	4b6f      	ldr	r3, [pc, #444]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a6e      	ldr	r2, [pc, #440]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003d1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	4b6c      	ldr	r3, [pc, #432]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a6b      	ldr	r2, [pc, #428]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003d26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d013      	beq.n	8003d5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d34:	f7fd fe1c 	bl	8001970 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d3c:	f7fd fe18 	bl	8001970 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b64      	cmp	r3, #100	@ 0x64
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e21f      	b.n	800418e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4e:	4b61      	ldr	r3, [pc, #388]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0f0      	beq.n	8003d3c <HAL_RCC_OscConfig+0xe8>
 8003d5a:	e014      	b.n	8003d86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7fd fe08 	bl	8001970 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d64:	f7fd fe04 	bl	8001970 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b64      	cmp	r3, #100	@ 0x64
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e20b      	b.n	800418e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d76:	4b57      	ldr	r3, [pc, #348]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f0      	bne.n	8003d64 <HAL_RCC_OscConfig+0x110>
 8003d82:	e000      	b.n	8003d86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d069      	beq.n	8003e66 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d92:	4b50      	ldr	r3, [pc, #320]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 030c 	and.w	r3, r3, #12
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00b      	beq.n	8003db6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d9e:	4b4d      	ldr	r3, [pc, #308]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 030c 	and.w	r3, r3, #12
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	d11c      	bne.n	8003de4 <HAL_RCC_OscConfig+0x190>
 8003daa:	4b4a      	ldr	r3, [pc, #296]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d116      	bne.n	8003de4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003db6:	4b47      	ldr	r3, [pc, #284]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d005      	beq.n	8003dce <HAL_RCC_OscConfig+0x17a>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d001      	beq.n	8003dce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e1df      	b.n	800418e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dce:	4b41      	ldr	r3, [pc, #260]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	493d      	ldr	r1, [pc, #244]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003de2:	e040      	b.n	8003e66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d023      	beq.n	8003e34 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dec:	4b39      	ldr	r3, [pc, #228]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a38      	ldr	r2, [pc, #224]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7fd fdba 	bl	8001970 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e00:	f7fd fdb6 	bl	8001970 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e1bd      	b.n	800418e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e12:	4b30      	ldr	r3, [pc, #192]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0f0      	beq.n	8003e00 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	4929      	ldr	r1, [pc, #164]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	600b      	str	r3, [r1, #0]
 8003e32:	e018      	b.n	8003e66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e34:	4b27      	ldr	r3, [pc, #156]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a26      	ldr	r2, [pc, #152]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003e3a:	f023 0301 	bic.w	r3, r3, #1
 8003e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e40:	f7fd fd96 	bl	8001970 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e48:	f7fd fd92 	bl	8001970 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e199      	b.n	800418e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0308 	and.w	r3, r3, #8
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d038      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d019      	beq.n	8003eae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e7a:	4b16      	ldr	r3, [pc, #88]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003e7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e7e:	4a15      	ldr	r2, [pc, #84]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003e80:	f043 0301 	orr.w	r3, r3, #1
 8003e84:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e86:	f7fd fd73 	bl	8001970 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e8e:	f7fd fd6f 	bl	8001970 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e176      	b.n	800418e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003ea2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0f0      	beq.n	8003e8e <HAL_RCC_OscConfig+0x23a>
 8003eac:	e01a      	b.n	8003ee4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eae:	4b09      	ldr	r3, [pc, #36]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eb2:	4a08      	ldr	r2, [pc, #32]	@ (8003ed4 <HAL_RCC_OscConfig+0x280>)
 8003eb4:	f023 0301 	bic.w	r3, r3, #1
 8003eb8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eba:	f7fd fd59 	bl	8001970 <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec0:	e00a      	b.n	8003ed8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ec2:	f7fd fd55 	bl	8001970 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d903      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e15c      	b.n	800418e <HAL_RCC_OscConfig+0x53a>
 8003ed4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed8:	4b91      	ldr	r3, [pc, #580]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 8003eda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1ee      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 80a4 	beq.w	800403a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ef2:	4b8b      	ldr	r3, [pc, #556]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10d      	bne.n	8003f1a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003efe:	4b88      	ldr	r3, [pc, #544]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 8003f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f02:	4a87      	ldr	r2, [pc, #540]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 8003f04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f0a:	4b85      	ldr	r3, [pc, #532]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f12:	60bb      	str	r3, [r7, #8]
 8003f14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f16:	2301      	movs	r3, #1
 8003f18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f1a:	4b82      	ldr	r3, [pc, #520]	@ (8004124 <HAL_RCC_OscConfig+0x4d0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d118      	bne.n	8003f58 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003f26:	4b7f      	ldr	r3, [pc, #508]	@ (8004124 <HAL_RCC_OscConfig+0x4d0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a7e      	ldr	r2, [pc, #504]	@ (8004124 <HAL_RCC_OscConfig+0x4d0>)
 8003f2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f32:	f7fd fd1d 	bl	8001970 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f3a:	f7fd fd19 	bl	8001970 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b64      	cmp	r3, #100	@ 0x64
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e120      	b.n	800418e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f4c:	4b75      	ldr	r3, [pc, #468]	@ (8004124 <HAL_RCC_OscConfig+0x4d0>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0f0      	beq.n	8003f3a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d106      	bne.n	8003f6e <HAL_RCC_OscConfig+0x31a>
 8003f60:	4b6f      	ldr	r3, [pc, #444]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 8003f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f64:	4a6e      	ldr	r2, [pc, #440]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 8003f66:	f043 0301 	orr.w	r3, r3, #1
 8003f6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f6c:	e02d      	b.n	8003fca <HAL_RCC_OscConfig+0x376>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10c      	bne.n	8003f90 <HAL_RCC_OscConfig+0x33c>
 8003f76:	4b6a      	ldr	r3, [pc, #424]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 8003f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7a:	4a69      	ldr	r2, [pc, #420]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 8003f7c:	f023 0301 	bic.w	r3, r3, #1
 8003f80:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f82:	4b67      	ldr	r3, [pc, #412]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f86:	4a66      	ldr	r2, [pc, #408]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 8003f88:	f023 0304 	bic.w	r3, r3, #4
 8003f8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f8e:	e01c      	b.n	8003fca <HAL_RCC_OscConfig+0x376>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	2b05      	cmp	r3, #5
 8003f96:	d10c      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x35e>
 8003f98:	4b61      	ldr	r3, [pc, #388]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 8003f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f9c:	4a60      	ldr	r2, [pc, #384]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 8003f9e:	f043 0304 	orr.w	r3, r3, #4
 8003fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fa4:	4b5e      	ldr	r3, [pc, #376]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa8:	4a5d      	ldr	r2, [pc, #372]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 8003faa:	f043 0301 	orr.w	r3, r3, #1
 8003fae:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fb0:	e00b      	b.n	8003fca <HAL_RCC_OscConfig+0x376>
 8003fb2:	4b5b      	ldr	r3, [pc, #364]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb6:	4a5a      	ldr	r2, [pc, #360]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 8003fb8:	f023 0301 	bic.w	r3, r3, #1
 8003fbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fbe:	4b58      	ldr	r3, [pc, #352]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 8003fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc2:	4a57      	ldr	r2, [pc, #348]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 8003fc4:	f023 0304 	bic.w	r3, r3, #4
 8003fc8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d015      	beq.n	8003ffe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd2:	f7fd fccd 	bl	8001970 <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd8:	e00a      	b.n	8003ff0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fda:	f7fd fcc9 	bl	8001970 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e0ce      	b.n	800418e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff0:	4b4b      	ldr	r3, [pc, #300]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 8003ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0ee      	beq.n	8003fda <HAL_RCC_OscConfig+0x386>
 8003ffc:	e014      	b.n	8004028 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ffe:	f7fd fcb7 	bl	8001970 <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004004:	e00a      	b.n	800401c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004006:	f7fd fcb3 	bl	8001970 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004014:	4293      	cmp	r3, r2
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e0b8      	b.n	800418e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800401c:	4b40      	ldr	r3, [pc, #256]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 800401e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1ee      	bne.n	8004006 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004028:	7dfb      	ldrb	r3, [r7, #23]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d105      	bne.n	800403a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800402e:	4b3c      	ldr	r3, [pc, #240]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004032:	4a3b      	ldr	r2, [pc, #236]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 8004034:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004038:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 80a4 	beq.w	800418c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004044:	4b36      	ldr	r3, [pc, #216]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f003 030c 	and.w	r3, r3, #12
 800404c:	2b08      	cmp	r3, #8
 800404e:	d06b      	beq.n	8004128 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	2b02      	cmp	r3, #2
 8004056:	d149      	bne.n	80040ec <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004058:	4b31      	ldr	r3, [pc, #196]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a30      	ldr	r2, [pc, #192]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 800405e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004064:	f7fd fc84 	bl	8001970 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406c:	f7fd fc80 	bl	8001970 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e087      	b.n	800418e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800407e:	4b28      	ldr	r3, [pc, #160]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	69da      	ldr	r2, [r3, #28]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004098:	019b      	lsls	r3, r3, #6
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a0:	085b      	lsrs	r3, r3, #1
 80040a2:	3b01      	subs	r3, #1
 80040a4:	041b      	lsls	r3, r3, #16
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ac:	061b      	lsls	r3, r3, #24
 80040ae:	4313      	orrs	r3, r2
 80040b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 80040b2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80040b6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040b8:	4b19      	ldr	r3, [pc, #100]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a18      	ldr	r2, [pc, #96]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 80040be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c4:	f7fd fc54 	bl	8001970 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040cc:	f7fd fc50 	bl	8001970 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e057      	b.n	800418e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040de:	4b10      	ldr	r3, [pc, #64]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0f0      	beq.n	80040cc <HAL_RCC_OscConfig+0x478>
 80040ea:	e04f      	b.n	800418c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a0b      	ldr	r2, [pc, #44]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 80040f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f8:	f7fd fc3a 	bl	8001970 <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004100:	f7fd fc36 	bl	8001970 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e03d      	b.n	800418e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004112:	4b03      	ldr	r3, [pc, #12]	@ (8004120 <HAL_RCC_OscConfig+0x4cc>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1f0      	bne.n	8004100 <HAL_RCC_OscConfig+0x4ac>
 800411e:	e035      	b.n	800418c <HAL_RCC_OscConfig+0x538>
 8004120:	40023800 	.word	0x40023800
 8004124:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004128:	4b1b      	ldr	r3, [pc, #108]	@ (8004198 <HAL_RCC_OscConfig+0x544>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d028      	beq.n	8004188 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004140:	429a      	cmp	r2, r3
 8004142:	d121      	bne.n	8004188 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800414e:	429a      	cmp	r2, r3
 8004150:	d11a      	bne.n	8004188 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004158:	4013      	ands	r3, r2
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800415e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004160:	4293      	cmp	r3, r2
 8004162:	d111      	bne.n	8004188 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416e:	085b      	lsrs	r3, r3, #1
 8004170:	3b01      	subs	r3, #1
 8004172:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004174:	429a      	cmp	r2, r3
 8004176:	d107      	bne.n	8004188 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004182:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004184:	429a      	cmp	r2, r3
 8004186:	d001      	beq.n	800418c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e000      	b.n	800418e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	40023800 	.word	0x40023800

0800419c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80041a6:	2300      	movs	r3, #0
 80041a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0d0      	b.n	8004356 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041b4:	4b6a      	ldr	r3, [pc, #424]	@ (8004360 <HAL_RCC_ClockConfig+0x1c4>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 030f 	and.w	r3, r3, #15
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d910      	bls.n	80041e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c2:	4b67      	ldr	r3, [pc, #412]	@ (8004360 <HAL_RCC_ClockConfig+0x1c4>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f023 020f 	bic.w	r2, r3, #15
 80041ca:	4965      	ldr	r1, [pc, #404]	@ (8004360 <HAL_RCC_ClockConfig+0x1c4>)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d2:	4b63      	ldr	r3, [pc, #396]	@ (8004360 <HAL_RCC_ClockConfig+0x1c4>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d001      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e0b8      	b.n	8004356 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d020      	beq.n	8004232 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d005      	beq.n	8004208 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041fc:	4b59      	ldr	r3, [pc, #356]	@ (8004364 <HAL_RCC_ClockConfig+0x1c8>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	4a58      	ldr	r2, [pc, #352]	@ (8004364 <HAL_RCC_ClockConfig+0x1c8>)
 8004202:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004206:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0308 	and.w	r3, r3, #8
 8004210:	2b00      	cmp	r3, #0
 8004212:	d005      	beq.n	8004220 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004214:	4b53      	ldr	r3, [pc, #332]	@ (8004364 <HAL_RCC_ClockConfig+0x1c8>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	4a52      	ldr	r2, [pc, #328]	@ (8004364 <HAL_RCC_ClockConfig+0x1c8>)
 800421a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800421e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004220:	4b50      	ldr	r3, [pc, #320]	@ (8004364 <HAL_RCC_ClockConfig+0x1c8>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	494d      	ldr	r1, [pc, #308]	@ (8004364 <HAL_RCC_ClockConfig+0x1c8>)
 800422e:	4313      	orrs	r3, r2
 8004230:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d040      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d107      	bne.n	8004256 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004246:	4b47      	ldr	r3, [pc, #284]	@ (8004364 <HAL_RCC_ClockConfig+0x1c8>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d115      	bne.n	800427e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e07f      	b.n	8004356 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b02      	cmp	r3, #2
 800425c:	d107      	bne.n	800426e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800425e:	4b41      	ldr	r3, [pc, #260]	@ (8004364 <HAL_RCC_ClockConfig+0x1c8>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d109      	bne.n	800427e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e073      	b.n	8004356 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800426e:	4b3d      	ldr	r3, [pc, #244]	@ (8004364 <HAL_RCC_ClockConfig+0x1c8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e06b      	b.n	8004356 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800427e:	4b39      	ldr	r3, [pc, #228]	@ (8004364 <HAL_RCC_ClockConfig+0x1c8>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f023 0203 	bic.w	r2, r3, #3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	4936      	ldr	r1, [pc, #216]	@ (8004364 <HAL_RCC_ClockConfig+0x1c8>)
 800428c:	4313      	orrs	r3, r2
 800428e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004290:	f7fd fb6e 	bl	8001970 <HAL_GetTick>
 8004294:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004296:	e00a      	b.n	80042ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004298:	f7fd fb6a 	bl	8001970 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e053      	b.n	8004356 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ae:	4b2d      	ldr	r3, [pc, #180]	@ (8004364 <HAL_RCC_ClockConfig+0x1c8>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 020c 	and.w	r2, r3, #12
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	429a      	cmp	r2, r3
 80042be:	d1eb      	bne.n	8004298 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042c0:	4b27      	ldr	r3, [pc, #156]	@ (8004360 <HAL_RCC_ClockConfig+0x1c4>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 030f 	and.w	r3, r3, #15
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d210      	bcs.n	80042f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ce:	4b24      	ldr	r3, [pc, #144]	@ (8004360 <HAL_RCC_ClockConfig+0x1c4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f023 020f 	bic.w	r2, r3, #15
 80042d6:	4922      	ldr	r1, [pc, #136]	@ (8004360 <HAL_RCC_ClockConfig+0x1c4>)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	4313      	orrs	r3, r2
 80042dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042de:	4b20      	ldr	r3, [pc, #128]	@ (8004360 <HAL_RCC_ClockConfig+0x1c4>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 030f 	and.w	r3, r3, #15
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d001      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e032      	b.n	8004356 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0304 	and.w	r3, r3, #4
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d008      	beq.n	800430e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042fc:	4b19      	ldr	r3, [pc, #100]	@ (8004364 <HAL_RCC_ClockConfig+0x1c8>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	4916      	ldr	r1, [pc, #88]	@ (8004364 <HAL_RCC_ClockConfig+0x1c8>)
 800430a:	4313      	orrs	r3, r2
 800430c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0308 	and.w	r3, r3, #8
 8004316:	2b00      	cmp	r3, #0
 8004318:	d009      	beq.n	800432e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800431a:	4b12      	ldr	r3, [pc, #72]	@ (8004364 <HAL_RCC_ClockConfig+0x1c8>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	490e      	ldr	r1, [pc, #56]	@ (8004364 <HAL_RCC_ClockConfig+0x1c8>)
 800432a:	4313      	orrs	r3, r2
 800432c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800432e:	f000 f821 	bl	8004374 <HAL_RCC_GetSysClockFreq>
 8004332:	4602      	mov	r2, r0
 8004334:	4b0b      	ldr	r3, [pc, #44]	@ (8004364 <HAL_RCC_ClockConfig+0x1c8>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	091b      	lsrs	r3, r3, #4
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	490a      	ldr	r1, [pc, #40]	@ (8004368 <HAL_RCC_ClockConfig+0x1cc>)
 8004340:	5ccb      	ldrb	r3, [r1, r3]
 8004342:	fa22 f303 	lsr.w	r3, r2, r3
 8004346:	4a09      	ldr	r2, [pc, #36]	@ (800436c <HAL_RCC_ClockConfig+0x1d0>)
 8004348:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800434a:	4b09      	ldr	r3, [pc, #36]	@ (8004370 <HAL_RCC_ClockConfig+0x1d4>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4618      	mov	r0, r3
 8004350:	f7fd f94c 	bl	80015ec <HAL_InitTick>

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	40023c00 	.word	0x40023c00
 8004364:	40023800 	.word	0x40023800
 8004368:	0800ae90 	.word	0x0800ae90
 800436c:	20000008 	.word	0x20000008
 8004370:	2000000c 	.word	0x2000000c

08004374 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004374:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004378:	b090      	sub	sp, #64	@ 0x40
 800437a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800437c:	2300      	movs	r3, #0
 800437e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004380:	2300      	movs	r3, #0
 8004382:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004384:	2300      	movs	r3, #0
 8004386:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004388:	2300      	movs	r3, #0
 800438a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800438c:	4b59      	ldr	r3, [pc, #356]	@ (80044f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f003 030c 	and.w	r3, r3, #12
 8004394:	2b08      	cmp	r3, #8
 8004396:	d00d      	beq.n	80043b4 <HAL_RCC_GetSysClockFreq+0x40>
 8004398:	2b08      	cmp	r3, #8
 800439a:	f200 80a1 	bhi.w	80044e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <HAL_RCC_GetSysClockFreq+0x34>
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d003      	beq.n	80043ae <HAL_RCC_GetSysClockFreq+0x3a>
 80043a6:	e09b      	b.n	80044e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043a8:	4b53      	ldr	r3, [pc, #332]	@ (80044f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80043aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043ac:	e09b      	b.n	80044e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043ae:	4b53      	ldr	r3, [pc, #332]	@ (80044fc <HAL_RCC_GetSysClockFreq+0x188>)
 80043b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043b2:	e098      	b.n	80044e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043b4:	4b4f      	ldr	r3, [pc, #316]	@ (80044f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043bc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80043be:	4b4d      	ldr	r3, [pc, #308]	@ (80044f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d028      	beq.n	800441c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ca:	4b4a      	ldr	r3, [pc, #296]	@ (80044f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	099b      	lsrs	r3, r3, #6
 80043d0:	2200      	movs	r2, #0
 80043d2:	623b      	str	r3, [r7, #32]
 80043d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80043dc:	2100      	movs	r1, #0
 80043de:	4b47      	ldr	r3, [pc, #284]	@ (80044fc <HAL_RCC_GetSysClockFreq+0x188>)
 80043e0:	fb03 f201 	mul.w	r2, r3, r1
 80043e4:	2300      	movs	r3, #0
 80043e6:	fb00 f303 	mul.w	r3, r0, r3
 80043ea:	4413      	add	r3, r2
 80043ec:	4a43      	ldr	r2, [pc, #268]	@ (80044fc <HAL_RCC_GetSysClockFreq+0x188>)
 80043ee:	fba0 1202 	umull	r1, r2, r0, r2
 80043f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043f4:	460a      	mov	r2, r1
 80043f6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80043f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043fa:	4413      	add	r3, r2
 80043fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004400:	2200      	movs	r2, #0
 8004402:	61bb      	str	r3, [r7, #24]
 8004404:	61fa      	str	r2, [r7, #28]
 8004406:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800440a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800440e:	f7fc fbeb 	bl	8000be8 <__aeabi_uldivmod>
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	4613      	mov	r3, r2
 8004418:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800441a:	e053      	b.n	80044c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800441c:	4b35      	ldr	r3, [pc, #212]	@ (80044f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	099b      	lsrs	r3, r3, #6
 8004422:	2200      	movs	r2, #0
 8004424:	613b      	str	r3, [r7, #16]
 8004426:	617a      	str	r2, [r7, #20]
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800442e:	f04f 0b00 	mov.w	fp, #0
 8004432:	4652      	mov	r2, sl
 8004434:	465b      	mov	r3, fp
 8004436:	f04f 0000 	mov.w	r0, #0
 800443a:	f04f 0100 	mov.w	r1, #0
 800443e:	0159      	lsls	r1, r3, #5
 8004440:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004444:	0150      	lsls	r0, r2, #5
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	ebb2 080a 	subs.w	r8, r2, sl
 800444e:	eb63 090b 	sbc.w	r9, r3, fp
 8004452:	f04f 0200 	mov.w	r2, #0
 8004456:	f04f 0300 	mov.w	r3, #0
 800445a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800445e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004462:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004466:	ebb2 0408 	subs.w	r4, r2, r8
 800446a:	eb63 0509 	sbc.w	r5, r3, r9
 800446e:	f04f 0200 	mov.w	r2, #0
 8004472:	f04f 0300 	mov.w	r3, #0
 8004476:	00eb      	lsls	r3, r5, #3
 8004478:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800447c:	00e2      	lsls	r2, r4, #3
 800447e:	4614      	mov	r4, r2
 8004480:	461d      	mov	r5, r3
 8004482:	eb14 030a 	adds.w	r3, r4, sl
 8004486:	603b      	str	r3, [r7, #0]
 8004488:	eb45 030b 	adc.w	r3, r5, fp
 800448c:	607b      	str	r3, [r7, #4]
 800448e:	f04f 0200 	mov.w	r2, #0
 8004492:	f04f 0300 	mov.w	r3, #0
 8004496:	e9d7 4500 	ldrd	r4, r5, [r7]
 800449a:	4629      	mov	r1, r5
 800449c:	028b      	lsls	r3, r1, #10
 800449e:	4621      	mov	r1, r4
 80044a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044a4:	4621      	mov	r1, r4
 80044a6:	028a      	lsls	r2, r1, #10
 80044a8:	4610      	mov	r0, r2
 80044aa:	4619      	mov	r1, r3
 80044ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ae:	2200      	movs	r2, #0
 80044b0:	60bb      	str	r3, [r7, #8]
 80044b2:	60fa      	str	r2, [r7, #12]
 80044b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044b8:	f7fc fb96 	bl	8000be8 <__aeabi_uldivmod>
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	4613      	mov	r3, r2
 80044c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80044c4:	4b0b      	ldr	r3, [pc, #44]	@ (80044f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	0c1b      	lsrs	r3, r3, #16
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	3301      	adds	r3, #1
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80044d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80044d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044de:	e002      	b.n	80044e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044e0:	4b05      	ldr	r3, [pc, #20]	@ (80044f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80044e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80044e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3740      	adds	r7, #64	@ 0x40
 80044ec:	46bd      	mov	sp, r7
 80044ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044f2:	bf00      	nop
 80044f4:	40023800 	.word	0x40023800
 80044f8:	00f42400 	.word	0x00f42400
 80044fc:	017d7840 	.word	0x017d7840

08004500 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004504:	4b03      	ldr	r3, [pc, #12]	@ (8004514 <HAL_RCC_GetHCLKFreq+0x14>)
 8004506:	681b      	ldr	r3, [r3, #0]
}
 8004508:	4618      	mov	r0, r3
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	20000008 	.word	0x20000008

08004518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800451c:	f7ff fff0 	bl	8004500 <HAL_RCC_GetHCLKFreq>
 8004520:	4602      	mov	r2, r0
 8004522:	4b05      	ldr	r3, [pc, #20]	@ (8004538 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	0b5b      	lsrs	r3, r3, #13
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	4903      	ldr	r1, [pc, #12]	@ (800453c <HAL_RCC_GetPCLK2Freq+0x24>)
 800452e:	5ccb      	ldrb	r3, [r1, r3]
 8004530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004534:	4618      	mov	r0, r3
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40023800 	.word	0x40023800
 800453c:	0800aea0 	.word	0x0800aea0

08004540 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	220f      	movs	r2, #15
 800454e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004550:	4b12      	ldr	r3, [pc, #72]	@ (800459c <HAL_RCC_GetClockConfig+0x5c>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f003 0203 	and.w	r2, r3, #3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800455c:	4b0f      	ldr	r3, [pc, #60]	@ (800459c <HAL_RCC_GetClockConfig+0x5c>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004568:	4b0c      	ldr	r3, [pc, #48]	@ (800459c <HAL_RCC_GetClockConfig+0x5c>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004574:	4b09      	ldr	r3, [pc, #36]	@ (800459c <HAL_RCC_GetClockConfig+0x5c>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	08db      	lsrs	r3, r3, #3
 800457a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004582:	4b07      	ldr	r3, [pc, #28]	@ (80045a0 <HAL_RCC_GetClockConfig+0x60>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 020f 	and.w	r2, r3, #15
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	601a      	str	r2, [r3, #0]
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	40023800 	.word	0x40023800
 80045a0:	40023c00 	.word	0x40023c00

080045a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b088      	sub	sp, #32
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80045ac:	2300      	movs	r3, #0
 80045ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80045b0:	2300      	movs	r3, #0
 80045b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80045b4:	2300      	movs	r3, #0
 80045b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80045b8:	2300      	movs	r3, #0
 80045ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80045bc:	2300      	movs	r3, #0
 80045be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d012      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80045cc:	4b69      	ldr	r3, [pc, #420]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	4a68      	ldr	r2, [pc, #416]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80045d6:	6093      	str	r3, [r2, #8]
 80045d8:	4b66      	ldr	r3, [pc, #408]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045e0:	4964      	ldr	r1, [pc, #400]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80045ee:	2301      	movs	r3, #1
 80045f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d017      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045fe:	4b5d      	ldr	r3, [pc, #372]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004600:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004604:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800460c:	4959      	ldr	r1, [pc, #356]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800460e:	4313      	orrs	r3, r2
 8004610:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004618:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800461c:	d101      	bne.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800461e:	2301      	movs	r3, #1
 8004620:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800462a:	2301      	movs	r3, #1
 800462c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d017      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800463a:	4b4e      	ldr	r3, [pc, #312]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004640:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004648:	494a      	ldr	r1, [pc, #296]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004654:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004658:	d101      	bne.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800465a:	2301      	movs	r3, #1
 800465c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004666:	2301      	movs	r3, #1
 8004668:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004676:	2301      	movs	r3, #1
 8004678:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0320 	and.w	r3, r3, #32
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 808b 	beq.w	800479e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004688:	4b3a      	ldr	r3, [pc, #232]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800468a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468c:	4a39      	ldr	r2, [pc, #228]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800468e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004692:	6413      	str	r3, [r2, #64]	@ 0x40
 8004694:	4b37      	ldr	r3, [pc, #220]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800469c:	60bb      	str	r3, [r7, #8]
 800469e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80046a0:	4b35      	ldr	r3, [pc, #212]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a34      	ldr	r2, [pc, #208]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046ac:	f7fd f960 	bl	8001970 <HAL_GetTick>
 80046b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80046b2:	e008      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046b4:	f7fd f95c 	bl	8001970 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b64      	cmp	r3, #100	@ 0x64
 80046c0:	d901      	bls.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e357      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80046c6:	4b2c      	ldr	r3, [pc, #176]	@ (8004778 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0f0      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046d2:	4b28      	ldr	r3, [pc, #160]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d035      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d02e      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046f0:	4b20      	ldr	r3, [pc, #128]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004704:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004706:	4b1b      	ldr	r3, [pc, #108]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800470a:	4a1a      	ldr	r2, [pc, #104]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004710:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004712:	4a18      	ldr	r2, [pc, #96]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004718:	4b16      	ldr	r3, [pc, #88]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800471a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b01      	cmp	r3, #1
 8004722:	d114      	bne.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004724:	f7fd f924 	bl	8001970 <HAL_GetTick>
 8004728:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800472a:	e00a      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800472c:	f7fd f920 	bl	8001970 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800473a:	4293      	cmp	r3, r2
 800473c:	d901      	bls.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e319      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004742:	4b0c      	ldr	r3, [pc, #48]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0ee      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004752:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004756:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800475a:	d111      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800475c:	4b05      	ldr	r3, [pc, #20]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004768:	4b04      	ldr	r3, [pc, #16]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800476a:	400b      	ands	r3, r1
 800476c:	4901      	ldr	r1, [pc, #4]	@ (8004774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800476e:	4313      	orrs	r3, r2
 8004770:	608b      	str	r3, [r1, #8]
 8004772:	e00b      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004774:	40023800 	.word	0x40023800
 8004778:	40007000 	.word	0x40007000
 800477c:	0ffffcff 	.word	0x0ffffcff
 8004780:	4baa      	ldr	r3, [pc, #680]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	4aa9      	ldr	r2, [pc, #676]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004786:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800478a:	6093      	str	r3, [r2, #8]
 800478c:	4ba7      	ldr	r3, [pc, #668]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800478e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004798:	49a4      	ldr	r1, [pc, #656]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800479a:	4313      	orrs	r3, r2
 800479c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0310 	and.w	r3, r3, #16
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d010      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047aa:	4ba0      	ldr	r3, [pc, #640]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047b0:	4a9e      	ldr	r2, [pc, #632]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80047ba:	4b9c      	ldr	r3, [pc, #624]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c4:	4999      	ldr	r1, [pc, #612]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00a      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047d8:	4b94      	ldr	r3, [pc, #592]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047de:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047e6:	4991      	ldr	r1, [pc, #580]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047fa:	4b8c      	ldr	r3, [pc, #560]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004800:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004808:	4988      	ldr	r1, [pc, #544]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00a      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800481c:	4b83      	ldr	r3, [pc, #524]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800481e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004822:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800482a:	4980      	ldr	r1, [pc, #512]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800482c:	4313      	orrs	r3, r2
 800482e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00a      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800483e:	4b7b      	ldr	r3, [pc, #492]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004844:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800484c:	4977      	ldr	r1, [pc, #476]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00a      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004860:	4b72      	ldr	r3, [pc, #456]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004866:	f023 0203 	bic.w	r2, r3, #3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800486e:	496f      	ldr	r1, [pc, #444]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00a      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004882:	4b6a      	ldr	r3, [pc, #424]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004888:	f023 020c 	bic.w	r2, r3, #12
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004890:	4966      	ldr	r1, [pc, #408]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004892:	4313      	orrs	r3, r2
 8004894:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00a      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048a4:	4b61      	ldr	r3, [pc, #388]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048aa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048b2:	495e      	ldr	r1, [pc, #376]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048c6:	4b59      	ldr	r3, [pc, #356]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048cc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048d4:	4955      	ldr	r1, [pc, #340]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00a      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048e8:	4b50      	ldr	r3, [pc, #320]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f6:	494d      	ldr	r1, [pc, #308]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800490a:	4b48      	ldr	r3, [pc, #288]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800490c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004910:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004918:	4944      	ldr	r1, [pc, #272]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800491a:	4313      	orrs	r3, r2
 800491c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00a      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800492c:	4b3f      	ldr	r3, [pc, #252]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800492e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004932:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800493a:	493c      	ldr	r1, [pc, #240]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800493c:	4313      	orrs	r3, r2
 800493e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800494e:	4b37      	ldr	r3, [pc, #220]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004954:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800495c:	4933      	ldr	r1, [pc, #204]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00a      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004970:	4b2e      	ldr	r3, [pc, #184]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004976:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800497e:	492b      	ldr	r1, [pc, #172]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004980:	4313      	orrs	r3, r2
 8004982:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d011      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004992:	4b26      	ldr	r3, [pc, #152]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004998:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049a0:	4922      	ldr	r1, [pc, #136]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049b0:	d101      	bne.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80049b2:	2301      	movs	r3, #1
 80049b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0308 	and.w	r3, r3, #8
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80049c2:	2301      	movs	r3, #1
 80049c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049d2:	4b16      	ldr	r3, [pc, #88]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049e0:	4912      	ldr	r1, [pc, #72]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00b      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049f4:	4b0d      	ldr	r3, [pc, #52]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049fa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a04:	4909      	ldr	r1, [pc, #36]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d006      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 80d9 	beq.w	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a20:	4b02      	ldr	r3, [pc, #8]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a01      	ldr	r2, [pc, #4]	@ (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a26:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a2a:	e001      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a32:	f7fc ff9d 	bl	8001970 <HAL_GetTick>
 8004a36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a38:	e008      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a3a:	f7fc ff99 	bl	8001970 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b64      	cmp	r3, #100	@ 0x64
 8004a46:	d901      	bls.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e194      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a4c:	4b6c      	ldr	r3, [pc, #432]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1f0      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d021      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d11d      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a6c:	4b64      	ldr	r3, [pc, #400]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a72:	0c1b      	lsrs	r3, r3, #16
 8004a74:	f003 0303 	and.w	r3, r3, #3
 8004a78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a7a:	4b61      	ldr	r3, [pc, #388]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a80:	0e1b      	lsrs	r3, r3, #24
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	019a      	lsls	r2, r3, #6
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	041b      	lsls	r3, r3, #16
 8004a92:	431a      	orrs	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	061b      	lsls	r3, r3, #24
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	071b      	lsls	r3, r3, #28
 8004aa0:	4957      	ldr	r1, [pc, #348]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d004      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004abc:	d00a      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d02e      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ace:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ad2:	d129      	bne.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ad4:	4b4a      	ldr	r3, [pc, #296]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ada:	0c1b      	lsrs	r3, r3, #16
 8004adc:	f003 0303 	and.w	r3, r3, #3
 8004ae0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ae2:	4b47      	ldr	r3, [pc, #284]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ae8:	0f1b      	lsrs	r3, r3, #28
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	019a      	lsls	r2, r3, #6
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	041b      	lsls	r3, r3, #16
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	061b      	lsls	r3, r3, #24
 8004b02:	431a      	orrs	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	071b      	lsls	r3, r3, #28
 8004b08:	493d      	ldr	r1, [pc, #244]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b10:	4b3b      	ldr	r3, [pc, #236]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b16:	f023 021f 	bic.w	r2, r3, #31
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	4937      	ldr	r1, [pc, #220]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d01d      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b34:	4b32      	ldr	r3, [pc, #200]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b3a:	0e1b      	lsrs	r3, r3, #24
 8004b3c:	f003 030f 	and.w	r3, r3, #15
 8004b40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b42:	4b2f      	ldr	r3, [pc, #188]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b48:	0f1b      	lsrs	r3, r3, #28
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	019a      	lsls	r2, r3, #6
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	041b      	lsls	r3, r3, #16
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	061b      	lsls	r3, r3, #24
 8004b62:	431a      	orrs	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	071b      	lsls	r3, r3, #28
 8004b68:	4925      	ldr	r1, [pc, #148]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d011      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	019a      	lsls	r2, r3, #6
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	041b      	lsls	r3, r3, #16
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	061b      	lsls	r3, r3, #24
 8004b90:	431a      	orrs	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	071b      	lsls	r3, r3, #28
 8004b98:	4919      	ldr	r1, [pc, #100]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ba0:	4b17      	ldr	r3, [pc, #92]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a16      	ldr	r2, [pc, #88]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ba6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004baa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bac:	f7fc fee0 	bl	8001970 <HAL_GetTick>
 8004bb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bb4:	f7fc fedc 	bl	8001970 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b64      	cmp	r3, #100	@ 0x64
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e0d7      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d0f0      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	f040 80cd 	bne.w	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004bda:	4b09      	ldr	r3, [pc, #36]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a08      	ldr	r2, [pc, #32]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004be0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004be4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004be6:	f7fc fec3 	bl	8001970 <HAL_GetTick>
 8004bea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bec:	e00a      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bee:	f7fc febf 	bl	8001970 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b64      	cmp	r3, #100	@ 0x64
 8004bfa:	d903      	bls.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e0ba      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004c00:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c04:	4b5e      	ldr	r3, [pc, #376]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c10:	d0ed      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d009      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d02e      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d12a      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c3a:	4b51      	ldr	r3, [pc, #324]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c40:	0c1b      	lsrs	r3, r3, #16
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c48:	4b4d      	ldr	r3, [pc, #308]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c4e:	0f1b      	lsrs	r3, r3, #28
 8004c50:	f003 0307 	and.w	r3, r3, #7
 8004c54:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	019a      	lsls	r2, r3, #6
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	041b      	lsls	r3, r3, #16
 8004c60:	431a      	orrs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	061b      	lsls	r3, r3, #24
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	071b      	lsls	r3, r3, #28
 8004c6e:	4944      	ldr	r1, [pc, #272]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c76:	4b42      	ldr	r3, [pc, #264]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c7c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c84:	3b01      	subs	r3, #1
 8004c86:	021b      	lsls	r3, r3, #8
 8004c88:	493d      	ldr	r1, [pc, #244]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d022      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ca0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ca4:	d11d      	bne.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ca6:	4b36      	ldr	r3, [pc, #216]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cac:	0e1b      	lsrs	r3, r3, #24
 8004cae:	f003 030f 	and.w	r3, r3, #15
 8004cb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004cb4:	4b32      	ldr	r3, [pc, #200]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cba:	0f1b      	lsrs	r3, r3, #28
 8004cbc:	f003 0307 	and.w	r3, r3, #7
 8004cc0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	019a      	lsls	r2, r3, #6
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	041b      	lsls	r3, r3, #16
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	061b      	lsls	r3, r3, #24
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	071b      	lsls	r3, r3, #28
 8004cda:	4929      	ldr	r1, [pc, #164]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0308 	and.w	r3, r3, #8
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d028      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004cee:	4b24      	ldr	r3, [pc, #144]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf4:	0e1b      	lsrs	r3, r3, #24
 8004cf6:	f003 030f 	and.w	r3, r3, #15
 8004cfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004cfc:	4b20      	ldr	r3, [pc, #128]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d02:	0c1b      	lsrs	r3, r3, #16
 8004d04:	f003 0303 	and.w	r3, r3, #3
 8004d08:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	019a      	lsls	r2, r3, #6
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	041b      	lsls	r3, r3, #16
 8004d14:	431a      	orrs	r2, r3
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	061b      	lsls	r3, r3, #24
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	071b      	lsls	r3, r3, #28
 8004d22:	4917      	ldr	r1, [pc, #92]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d2a:	4b15      	ldr	r3, [pc, #84]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d30:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d38:	4911      	ldr	r1, [pc, #68]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d40:	4b0f      	ldr	r3, [pc, #60]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a0e      	ldr	r2, [pc, #56]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d4c:	f7fc fe10 	bl	8001970 <HAL_GetTick>
 8004d50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d52:	e008      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d54:	f7fc fe0c 	bl	8001970 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b64      	cmp	r3, #100	@ 0x64
 8004d60:	d901      	bls.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e007      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d66:	4b06      	ldr	r3, [pc, #24]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d72:	d1ef      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3720      	adds	r7, #32
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	40023800 	.word	0x40023800

08004d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e049      	b.n	8004e2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f841 	bl	8004e32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4610      	mov	r0, r2
 8004dc4:	f000 f9e8 	bl	8005198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
	...

08004e48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d001      	beq.n	8004e60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e054      	b.n	8004f0a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f042 0201 	orr.w	r2, r2, #1
 8004e76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a26      	ldr	r2, [pc, #152]	@ (8004f18 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d022      	beq.n	8004ec8 <HAL_TIM_Base_Start_IT+0x80>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e8a:	d01d      	beq.n	8004ec8 <HAL_TIM_Base_Start_IT+0x80>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a22      	ldr	r2, [pc, #136]	@ (8004f1c <HAL_TIM_Base_Start_IT+0xd4>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d018      	beq.n	8004ec8 <HAL_TIM_Base_Start_IT+0x80>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a21      	ldr	r2, [pc, #132]	@ (8004f20 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d013      	beq.n	8004ec8 <HAL_TIM_Base_Start_IT+0x80>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a1f      	ldr	r2, [pc, #124]	@ (8004f24 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d00e      	beq.n	8004ec8 <HAL_TIM_Base_Start_IT+0x80>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a1e      	ldr	r2, [pc, #120]	@ (8004f28 <HAL_TIM_Base_Start_IT+0xe0>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d009      	beq.n	8004ec8 <HAL_TIM_Base_Start_IT+0x80>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a1c      	ldr	r2, [pc, #112]	@ (8004f2c <HAL_TIM_Base_Start_IT+0xe4>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d004      	beq.n	8004ec8 <HAL_TIM_Base_Start_IT+0x80>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a1b      	ldr	r2, [pc, #108]	@ (8004f30 <HAL_TIM_Base_Start_IT+0xe8>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d115      	bne.n	8004ef4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689a      	ldr	r2, [r3, #8]
 8004ece:	4b19      	ldr	r3, [pc, #100]	@ (8004f34 <HAL_TIM_Base_Start_IT+0xec>)
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b06      	cmp	r3, #6
 8004ed8:	d015      	beq.n	8004f06 <HAL_TIM_Base_Start_IT+0xbe>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ee0:	d011      	beq.n	8004f06 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f042 0201 	orr.w	r2, r2, #1
 8004ef0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef2:	e008      	b.n	8004f06 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0201 	orr.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	e000      	b.n	8004f08 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	40010000 	.word	0x40010000
 8004f1c:	40000400 	.word	0x40000400
 8004f20:	40000800 	.word	0x40000800
 8004f24:	40000c00 	.word	0x40000c00
 8004f28:	40010400 	.word	0x40010400
 8004f2c:	40014000 	.word	0x40014000
 8004f30:	40001800 	.word	0x40001800
 8004f34:	00010007 	.word	0x00010007

08004f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d020      	beq.n	8004f9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d01b      	beq.n	8004f9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f06f 0202 	mvn.w	r2, #2
 8004f6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	f003 0303 	and.w	r3, r3, #3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f8e9 	bl	800515a <HAL_TIM_IC_CaptureCallback>
 8004f88:	e005      	b.n	8004f96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f8db 	bl	8005146 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f8ec 	bl	800516e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	f003 0304 	and.w	r3, r3, #4
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d020      	beq.n	8004fe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f003 0304 	and.w	r3, r3, #4
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d01b      	beq.n	8004fe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f06f 0204 	mvn.w	r2, #4
 8004fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2202      	movs	r2, #2
 8004fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f8c3 	bl	800515a <HAL_TIM_IC_CaptureCallback>
 8004fd4:	e005      	b.n	8004fe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f8b5 	bl	8005146 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 f8c6 	bl	800516e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f003 0308 	and.w	r3, r3, #8
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d020      	beq.n	8005034 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f003 0308 	and.w	r3, r3, #8
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d01b      	beq.n	8005034 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f06f 0208 	mvn.w	r2, #8
 8005004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2204      	movs	r2, #4
 800500a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	f003 0303 	and.w	r3, r3, #3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f89d 	bl	800515a <HAL_TIM_IC_CaptureCallback>
 8005020:	e005      	b.n	800502e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f88f 	bl	8005146 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f8a0 	bl	800516e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f003 0310 	and.w	r3, r3, #16
 800503a:	2b00      	cmp	r3, #0
 800503c:	d020      	beq.n	8005080 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f003 0310 	and.w	r3, r3, #16
 8005044:	2b00      	cmp	r3, #0
 8005046:	d01b      	beq.n	8005080 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f06f 0210 	mvn.w	r2, #16
 8005050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2208      	movs	r2, #8
 8005056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f877 	bl	800515a <HAL_TIM_IC_CaptureCallback>
 800506c:	e005      	b.n	800507a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f869 	bl	8005146 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 f87a 	bl	800516e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00c      	beq.n	80050a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	2b00      	cmp	r3, #0
 8005092:	d007      	beq.n	80050a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f06f 0201 	mvn.w	r2, #1
 800509c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7fc f9fc 	bl	800149c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d104      	bne.n	80050b8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00c      	beq.n	80050d2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d007      	beq.n	80050d2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80050ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f919 	bl	8005304 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00c      	beq.n	80050f6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d007      	beq.n	80050f6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80050ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 f911 	bl	8005318 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00c      	beq.n	800511a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005106:	2b00      	cmp	r3, #0
 8005108:	d007      	beq.n	800511a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 f834 	bl	8005182 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	f003 0320 	and.w	r3, r3, #32
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00c      	beq.n	800513e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f003 0320 	and.w	r3, r3, #32
 800512a:	2b00      	cmp	r3, #0
 800512c:	d007      	beq.n	800513e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f06f 0220 	mvn.w	r2, #32
 8005136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f8d9 	bl	80052f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800513e:	bf00      	nop
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005146:	b480      	push	{r7}
 8005148:	b083      	sub	sp, #12
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800514e:	bf00      	nop
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800515a:	b480      	push	{r7}
 800515c:	b083      	sub	sp, #12
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005162:	bf00      	nop
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800516e:	b480      	push	{r7}
 8005170:	b083      	sub	sp, #12
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800518a:	bf00      	nop
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
	...

08005198 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a46      	ldr	r2, [pc, #280]	@ (80052c4 <TIM_Base_SetConfig+0x12c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d013      	beq.n	80051d8 <TIM_Base_SetConfig+0x40>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051b6:	d00f      	beq.n	80051d8 <TIM_Base_SetConfig+0x40>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a43      	ldr	r2, [pc, #268]	@ (80052c8 <TIM_Base_SetConfig+0x130>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d00b      	beq.n	80051d8 <TIM_Base_SetConfig+0x40>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a42      	ldr	r2, [pc, #264]	@ (80052cc <TIM_Base_SetConfig+0x134>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d007      	beq.n	80051d8 <TIM_Base_SetConfig+0x40>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a41      	ldr	r2, [pc, #260]	@ (80052d0 <TIM_Base_SetConfig+0x138>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d003      	beq.n	80051d8 <TIM_Base_SetConfig+0x40>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a40      	ldr	r2, [pc, #256]	@ (80052d4 <TIM_Base_SetConfig+0x13c>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d108      	bne.n	80051ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a35      	ldr	r2, [pc, #212]	@ (80052c4 <TIM_Base_SetConfig+0x12c>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d02b      	beq.n	800524a <TIM_Base_SetConfig+0xb2>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051f8:	d027      	beq.n	800524a <TIM_Base_SetConfig+0xb2>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a32      	ldr	r2, [pc, #200]	@ (80052c8 <TIM_Base_SetConfig+0x130>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d023      	beq.n	800524a <TIM_Base_SetConfig+0xb2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a31      	ldr	r2, [pc, #196]	@ (80052cc <TIM_Base_SetConfig+0x134>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d01f      	beq.n	800524a <TIM_Base_SetConfig+0xb2>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a30      	ldr	r2, [pc, #192]	@ (80052d0 <TIM_Base_SetConfig+0x138>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d01b      	beq.n	800524a <TIM_Base_SetConfig+0xb2>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a2f      	ldr	r2, [pc, #188]	@ (80052d4 <TIM_Base_SetConfig+0x13c>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d017      	beq.n	800524a <TIM_Base_SetConfig+0xb2>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a2e      	ldr	r2, [pc, #184]	@ (80052d8 <TIM_Base_SetConfig+0x140>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d013      	beq.n	800524a <TIM_Base_SetConfig+0xb2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a2d      	ldr	r2, [pc, #180]	@ (80052dc <TIM_Base_SetConfig+0x144>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d00f      	beq.n	800524a <TIM_Base_SetConfig+0xb2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a2c      	ldr	r2, [pc, #176]	@ (80052e0 <TIM_Base_SetConfig+0x148>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d00b      	beq.n	800524a <TIM_Base_SetConfig+0xb2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a2b      	ldr	r2, [pc, #172]	@ (80052e4 <TIM_Base_SetConfig+0x14c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d007      	beq.n	800524a <TIM_Base_SetConfig+0xb2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a2a      	ldr	r2, [pc, #168]	@ (80052e8 <TIM_Base_SetConfig+0x150>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d003      	beq.n	800524a <TIM_Base_SetConfig+0xb2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a29      	ldr	r2, [pc, #164]	@ (80052ec <TIM_Base_SetConfig+0x154>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d108      	bne.n	800525c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005250:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	4313      	orrs	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	4313      	orrs	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a10      	ldr	r2, [pc, #64]	@ (80052c4 <TIM_Base_SetConfig+0x12c>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d003      	beq.n	8005290 <TIM_Base_SetConfig+0xf8>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a12      	ldr	r2, [pc, #72]	@ (80052d4 <TIM_Base_SetConfig+0x13c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d103      	bne.n	8005298 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	691a      	ldr	r2, [r3, #16]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d105      	bne.n	80052b6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	f023 0201 	bic.w	r2, r3, #1
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	611a      	str	r2, [r3, #16]
  }
}
 80052b6:	bf00      	nop
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	40010000 	.word	0x40010000
 80052c8:	40000400 	.word	0x40000400
 80052cc:	40000800 	.word	0x40000800
 80052d0:	40000c00 	.word	0x40000c00
 80052d4:	40010400 	.word	0x40010400
 80052d8:	40014000 	.word	0x40014000
 80052dc:	40014400 	.word	0x40014400
 80052e0:	40014800 	.word	0x40014800
 80052e4:	40001800 	.word	0x40001800
 80052e8:	40001c00 	.word	0x40001c00
 80052ec:	40002000 	.word	0x40002000

080052f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	4603      	mov	r3, r0
 8005334:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005336:	2300      	movs	r3, #0
 8005338:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800533a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800533e:	2b84      	cmp	r3, #132	@ 0x84
 8005340:	d005      	beq.n	800534e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005342:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4413      	add	r3, r2
 800534a:	3303      	adds	r3, #3
 800534c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800534e:	68fb      	ldr	r3, [r7, #12]
}
 8005350:	4618      	mov	r0, r3
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005360:	f001 f9c4 	bl	80066ec <vTaskStartScheduler>
  
  return osOK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	bd80      	pop	{r7, pc}

0800536a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800536a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800536c:	b089      	sub	sp, #36	@ 0x24
 800536e:	af04      	add	r7, sp, #16
 8005370:	6078      	str	r0, [r7, #4]
 8005372:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d020      	beq.n	80053be <osThreadCreate+0x54>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d01c      	beq.n	80053be <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685c      	ldr	r4, [r3, #4]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	691e      	ldr	r6, [r3, #16]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005396:	4618      	mov	r0, r3
 8005398:	f7ff ffc8 	bl	800532c <makeFreeRtosPriority>
 800539c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053a6:	9202      	str	r2, [sp, #8]
 80053a8:	9301      	str	r3, [sp, #4]
 80053aa:	9100      	str	r1, [sp, #0]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	4632      	mov	r2, r6
 80053b0:	4629      	mov	r1, r5
 80053b2:	4620      	mov	r0, r4
 80053b4:	f000 ffaa 	bl	800630c <xTaskCreateStatic>
 80053b8:	4603      	mov	r3, r0
 80053ba:	60fb      	str	r3, [r7, #12]
 80053bc:	e01c      	b.n	80053f8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685c      	ldr	r4, [r3, #4]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053ca:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7ff ffaa 	bl	800532c <makeFreeRtosPriority>
 80053d8:	4602      	mov	r2, r0
 80053da:	f107 030c 	add.w	r3, r7, #12
 80053de:	9301      	str	r3, [sp, #4]
 80053e0:	9200      	str	r2, [sp, #0]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	4632      	mov	r2, r6
 80053e6:	4629      	mov	r1, r5
 80053e8:	4620      	mov	r0, r4
 80053ea:	f000 fff5 	bl	80063d8 <xTaskCreate>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d001      	beq.n	80053f8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80053f4:	2300      	movs	r3, #0
 80053f6:	e000      	b.n	80053fa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80053f8:	68fb      	ldr	r3, [r7, #12]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005402 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b084      	sub	sp, #16
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <osDelay+0x16>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	e000      	b.n	800541a <osDelay+0x18>
 8005418:	2301      	movs	r3, #1
 800541a:	4618      	mov	r0, r3
 800541c:	f001 f92e 	bl	800667c <vTaskDelay>
  
  return osOK;
 8005420:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f103 0208 	add.w	r2, r3, #8
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f04f 32ff 	mov.w	r2, #4294967295
 8005442:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f103 0208 	add.w	r2, r3, #8
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f103 0208 	add.w	r2, r3, #8
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800545e:	bf00      	nop
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800546a:	b480      	push	{r7}
 800546c:	b083      	sub	sp, #12
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	689a      	ldr	r2, [r3, #8]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	601a      	str	r2, [r3, #0]
}
 80054c0:	bf00      	nop
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e2:	d103      	bne.n	80054ec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	60fb      	str	r3, [r7, #12]
 80054ea:	e00c      	b.n	8005506 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	3308      	adds	r3, #8
 80054f0:	60fb      	str	r3, [r7, #12]
 80054f2:	e002      	b.n	80054fa <vListInsert+0x2e>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	60fb      	str	r3, [r7, #12]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	429a      	cmp	r2, r3
 8005504:	d2f6      	bcs.n	80054f4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	1c5a      	adds	r2, r3, #1
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	601a      	str	r2, [r3, #0]
}
 8005532:	bf00      	nop
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800553e:	b480      	push	{r7}
 8005540:	b085      	sub	sp, #20
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	6892      	ldr	r2, [r2, #8]
 8005554:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	6852      	ldr	r2, [r2, #4]
 800555e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	429a      	cmp	r2, r3
 8005568:	d103      	bne.n	8005572 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	689a      	ldr	r2, [r3, #8]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	1e5a      	subs	r2, r3, #1
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
	...

08005594 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10d      	bne.n	80055c4 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80055a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ac:	b672      	cpsid	i
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	b662      	cpsie	i
 80055bc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80055be:	bf00      	nop
 80055c0:	bf00      	nop
 80055c2:	e7fd      	b.n	80055c0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80055c4:	f002 fc0a 	bl	8007ddc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055d0:	68f9      	ldr	r1, [r7, #12]
 80055d2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80055d4:	fb01 f303 	mul.w	r3, r1, r3
 80055d8:	441a      	add	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f4:	3b01      	subs	r3, #1
 80055f6:	68f9      	ldr	r1, [r7, #12]
 80055f8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80055fa:	fb01 f303 	mul.w	r3, r1, r3
 80055fe:	441a      	add	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	22ff      	movs	r2, #255	@ 0xff
 8005608:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	22ff      	movs	r2, #255	@ 0xff
 8005610:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d114      	bne.n	8005644 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d01a      	beq.n	8005658 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	3310      	adds	r3, #16
 8005626:	4618      	mov	r0, r3
 8005628:	f001 fb0a 	bl	8006c40 <xTaskRemoveFromEventList>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d012      	beq.n	8005658 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005632:	4b0d      	ldr	r3, [pc, #52]	@ (8005668 <xQueueGenericReset+0xd4>)
 8005634:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	f3bf 8f6f 	isb	sy
 8005642:	e009      	b.n	8005658 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3310      	adds	r3, #16
 8005648:	4618      	mov	r0, r3
 800564a:	f7ff feee 	bl	800542a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	3324      	adds	r3, #36	@ 0x24
 8005652:	4618      	mov	r0, r3
 8005654:	f7ff fee9 	bl	800542a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005658:	f002 fbf6 	bl	8007e48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800565c:	2301      	movs	r3, #1
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	e000ed04 	.word	0xe000ed04

0800566c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800566c:	b580      	push	{r7, lr}
 800566e:	b08e      	sub	sp, #56	@ 0x38
 8005670:	af02      	add	r7, sp, #8
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
 8005678:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10d      	bne.n	800569c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8005680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005684:	b672      	cpsid	i
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	b662      	cpsie	i
 8005694:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005696:	bf00      	nop
 8005698:	bf00      	nop
 800569a:	e7fd      	b.n	8005698 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10d      	bne.n	80056be <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a6:	b672      	cpsid	i
 80056a8:	f383 8811 	msr	BASEPRI, r3
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	b662      	cpsie	i
 80056b6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80056b8:	bf00      	nop
 80056ba:	bf00      	nop
 80056bc:	e7fd      	b.n	80056ba <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <xQueueGenericCreateStatic+0x5e>
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <xQueueGenericCreateStatic+0x62>
 80056ca:	2301      	movs	r3, #1
 80056cc:	e000      	b.n	80056d0 <xQueueGenericCreateStatic+0x64>
 80056ce:	2300      	movs	r3, #0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10d      	bne.n	80056f0 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80056d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d8:	b672      	cpsid	i
 80056da:	f383 8811 	msr	BASEPRI, r3
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	b662      	cpsie	i
 80056e8:	623b      	str	r3, [r7, #32]
}
 80056ea:	bf00      	nop
 80056ec:	bf00      	nop
 80056ee:	e7fd      	b.n	80056ec <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d102      	bne.n	80056fc <xQueueGenericCreateStatic+0x90>
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <xQueueGenericCreateStatic+0x94>
 80056fc:	2301      	movs	r3, #1
 80056fe:	e000      	b.n	8005702 <xQueueGenericCreateStatic+0x96>
 8005700:	2300      	movs	r3, #0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10d      	bne.n	8005722 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8005706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800570a:	b672      	cpsid	i
 800570c:	f383 8811 	msr	BASEPRI, r3
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	b662      	cpsie	i
 800571a:	61fb      	str	r3, [r7, #28]
}
 800571c:	bf00      	nop
 800571e:	bf00      	nop
 8005720:	e7fd      	b.n	800571e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005722:	2348      	movs	r3, #72	@ 0x48
 8005724:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2b48      	cmp	r3, #72	@ 0x48
 800572a:	d00d      	beq.n	8005748 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800572c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005730:	b672      	cpsid	i
 8005732:	f383 8811 	msr	BASEPRI, r3
 8005736:	f3bf 8f6f 	isb	sy
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	b662      	cpsie	i
 8005740:	61bb      	str	r3, [r7, #24]
}
 8005742:	bf00      	nop
 8005744:	bf00      	nop
 8005746:	e7fd      	b.n	8005744 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005748:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800574e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00d      	beq.n	8005770 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800575c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	4613      	mov	r3, r2
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	68b9      	ldr	r1, [r7, #8]
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 f848 	bl	8005800 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005772:	4618      	mov	r0, r3
 8005774:	3730      	adds	r7, #48	@ 0x30
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800577a:	b580      	push	{r7, lr}
 800577c:	b08a      	sub	sp, #40	@ 0x28
 800577e:	af02      	add	r7, sp, #8
 8005780:	60f8      	str	r0, [r7, #12]
 8005782:	60b9      	str	r1, [r7, #8]
 8005784:	4613      	mov	r3, r2
 8005786:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10d      	bne.n	80057aa <xQueueGenericCreate+0x30>
	__asm volatile
 800578e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005792:	b672      	cpsid	i
 8005794:	f383 8811 	msr	BASEPRI, r3
 8005798:	f3bf 8f6f 	isb	sy
 800579c:	f3bf 8f4f 	dsb	sy
 80057a0:	b662      	cpsie	i
 80057a2:	613b      	str	r3, [r7, #16]
}
 80057a4:	bf00      	nop
 80057a6:	bf00      	nop
 80057a8:	e7fd      	b.n	80057a6 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d102      	bne.n	80057b6 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80057b0:	2300      	movs	r3, #0
 80057b2:	61fb      	str	r3, [r7, #28]
 80057b4:	e004      	b.n	80057c0 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	fb02 f303 	mul.w	r3, r2, r3
 80057be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	3348      	adds	r3, #72	@ 0x48
 80057c4:	4618      	mov	r0, r3
 80057c6:	f002 fc37 	bl	8008038 <pvPortMalloc>
 80057ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d011      	beq.n	80057f6 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	3348      	adds	r3, #72	@ 0x48
 80057da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80057e4:	79fa      	ldrb	r2, [r7, #7]
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	4613      	mov	r3, r2
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	68b9      	ldr	r1, [r7, #8]
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f000 f805 	bl	8005800 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80057f6:	69bb      	ldr	r3, [r7, #24]
	}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3720      	adds	r7, #32
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
 800580c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d103      	bne.n	800581c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	e002      	b.n	8005822 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800582e:	2101      	movs	r1, #1
 8005830:	69b8      	ldr	r0, [r7, #24]
 8005832:	f7ff feaf 	bl	8005594 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005836:	bf00      	nop
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800583e:	b580      	push	{r7, lr}
 8005840:	b082      	sub	sp, #8
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00e      	beq.n	800586a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800585e:	2300      	movs	r3, #0
 8005860:	2200      	movs	r2, #0
 8005862:	2100      	movs	r1, #0
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f81d 	bl	80058a4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800586a:	bf00      	nop
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005872:	b580      	push	{r7, lr}
 8005874:	b086      	sub	sp, #24
 8005876:	af00      	add	r7, sp, #0
 8005878:	4603      	mov	r3, r0
 800587a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800587c:	2301      	movs	r3, #1
 800587e:	617b      	str	r3, [r7, #20]
 8005880:	2300      	movs	r3, #0
 8005882:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	461a      	mov	r2, r3
 8005888:	6939      	ldr	r1, [r7, #16]
 800588a:	6978      	ldr	r0, [r7, #20]
 800588c:	f7ff ff75 	bl	800577a <xQueueGenericCreate>
 8005890:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f7ff ffd3 	bl	800583e <prvInitialiseMutex>

		return xNewQueue;
 8005898:	68fb      	ldr	r3, [r7, #12]
	}
 800589a:	4618      	mov	r0, r3
 800589c:	3718      	adds	r7, #24
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
	...

080058a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b08e      	sub	sp, #56	@ 0x38
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
 80058b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80058b2:	2300      	movs	r3, #0
 80058b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80058ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10d      	bne.n	80058dc <xQueueGenericSend+0x38>
	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c4:	b672      	cpsid	i
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	b662      	cpsie	i
 80058d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80058d6:	bf00      	nop
 80058d8:	bf00      	nop
 80058da:	e7fd      	b.n	80058d8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d103      	bne.n	80058ea <xQueueGenericSend+0x46>
 80058e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <xQueueGenericSend+0x4a>
 80058ea:	2301      	movs	r3, #1
 80058ec:	e000      	b.n	80058f0 <xQueueGenericSend+0x4c>
 80058ee:	2300      	movs	r3, #0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10d      	bne.n	8005910 <xQueueGenericSend+0x6c>
	__asm volatile
 80058f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f8:	b672      	cpsid	i
 80058fa:	f383 8811 	msr	BASEPRI, r3
 80058fe:	f3bf 8f6f 	isb	sy
 8005902:	f3bf 8f4f 	dsb	sy
 8005906:	b662      	cpsie	i
 8005908:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800590a:	bf00      	nop
 800590c:	bf00      	nop
 800590e:	e7fd      	b.n	800590c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	2b02      	cmp	r3, #2
 8005914:	d103      	bne.n	800591e <xQueueGenericSend+0x7a>
 8005916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800591a:	2b01      	cmp	r3, #1
 800591c:	d101      	bne.n	8005922 <xQueueGenericSend+0x7e>
 800591e:	2301      	movs	r3, #1
 8005920:	e000      	b.n	8005924 <xQueueGenericSend+0x80>
 8005922:	2300      	movs	r3, #0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10d      	bne.n	8005944 <xQueueGenericSend+0xa0>
	__asm volatile
 8005928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800592c:	b672      	cpsid	i
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	b662      	cpsie	i
 800593c:	623b      	str	r3, [r7, #32]
}
 800593e:	bf00      	nop
 8005940:	bf00      	nop
 8005942:	e7fd      	b.n	8005940 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005944:	f001 fb4a 	bl	8006fdc <xTaskGetSchedulerState>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d102      	bne.n	8005954 <xQueueGenericSend+0xb0>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <xQueueGenericSend+0xb4>
 8005954:	2301      	movs	r3, #1
 8005956:	e000      	b.n	800595a <xQueueGenericSend+0xb6>
 8005958:	2300      	movs	r3, #0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10d      	bne.n	800597a <xQueueGenericSend+0xd6>
	__asm volatile
 800595e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005962:	b672      	cpsid	i
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	b662      	cpsie	i
 8005972:	61fb      	str	r3, [r7, #28]
}
 8005974:	bf00      	nop
 8005976:	bf00      	nop
 8005978:	e7fd      	b.n	8005976 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800597a:	f002 fa2f 	bl	8007ddc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800597e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005980:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005986:	429a      	cmp	r2, r3
 8005988:	d302      	bcc.n	8005990 <xQueueGenericSend+0xec>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b02      	cmp	r3, #2
 800598e:	d129      	bne.n	80059e4 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	68b9      	ldr	r1, [r7, #8]
 8005994:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005996:	f000 fb4b 	bl	8006030 <prvCopyDataToQueue>
 800599a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800599c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d010      	beq.n	80059c6 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a6:	3324      	adds	r3, #36	@ 0x24
 80059a8:	4618      	mov	r0, r3
 80059aa:	f001 f949 	bl	8006c40 <xTaskRemoveFromEventList>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d013      	beq.n	80059dc <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80059b4:	4b3f      	ldr	r3, [pc, #252]	@ (8005ab4 <xQueueGenericSend+0x210>)
 80059b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	e00a      	b.n	80059dc <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80059c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d007      	beq.n	80059dc <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80059cc:	4b39      	ldr	r3, [pc, #228]	@ (8005ab4 <xQueueGenericSend+0x210>)
 80059ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80059dc:	f002 fa34 	bl	8007e48 <vPortExitCritical>
				return pdPASS;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e063      	b.n	8005aac <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d103      	bne.n	80059f2 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059ea:	f002 fa2d 	bl	8007e48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80059ee:	2300      	movs	r3, #0
 80059f0:	e05c      	b.n	8005aac <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d106      	bne.n	8005a06 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059f8:	f107 0314 	add.w	r3, r7, #20
 80059fc:	4618      	mov	r0, r3
 80059fe:	f001 f985 	bl	8006d0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a02:	2301      	movs	r3, #1
 8005a04:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a06:	f002 fa1f 	bl	8007e48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a0a:	f000 fee3 	bl	80067d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a0e:	f002 f9e5 	bl	8007ddc <vPortEnterCritical>
 8005a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a18:	b25b      	sxtb	r3, r3
 8005a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1e:	d103      	bne.n	8005a28 <xQueueGenericSend+0x184>
 8005a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a2e:	b25b      	sxtb	r3, r3
 8005a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a34:	d103      	bne.n	8005a3e <xQueueGenericSend+0x19a>
 8005a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a3e:	f002 fa03 	bl	8007e48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a42:	1d3a      	adds	r2, r7, #4
 8005a44:	f107 0314 	add.w	r3, r7, #20
 8005a48:	4611      	mov	r1, r2
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f001 f974 	bl	8006d38 <xTaskCheckForTimeOut>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d124      	bne.n	8005aa0 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a56:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a58:	f000 fbe2 	bl	8006220 <prvIsQueueFull>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d018      	beq.n	8005a94 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a64:	3310      	adds	r3, #16
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	4611      	mov	r1, r2
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f001 f892 	bl	8006b94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a72:	f000 fb6d 	bl	8006150 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a76:	f000 febb 	bl	80067f0 <xTaskResumeAll>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f47f af7c 	bne.w	800597a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8005a82:	4b0c      	ldr	r3, [pc, #48]	@ (8005ab4 <xQueueGenericSend+0x210>)
 8005a84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a88:	601a      	str	r2, [r3, #0]
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	e772      	b.n	800597a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005a94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a96:	f000 fb5b 	bl	8006150 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a9a:	f000 fea9 	bl	80067f0 <xTaskResumeAll>
 8005a9e:	e76c      	b.n	800597a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005aa0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005aa2:	f000 fb55 	bl	8006150 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005aa6:	f000 fea3 	bl	80067f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005aaa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3738      	adds	r7, #56	@ 0x38
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	e000ed04 	.word	0xe000ed04

08005ab8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b08e      	sub	sp, #56	@ 0x38
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
 8005ac4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10d      	bne.n	8005aec <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8005ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad4:	b672      	cpsid	i
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	b662      	cpsie	i
 8005ae4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ae6:	bf00      	nop
 8005ae8:	bf00      	nop
 8005aea:	e7fd      	b.n	8005ae8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d103      	bne.n	8005afa <xQueueGenericSendFromISR+0x42>
 8005af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <xQueueGenericSendFromISR+0x46>
 8005afa:	2301      	movs	r3, #1
 8005afc:	e000      	b.n	8005b00 <xQueueGenericSendFromISR+0x48>
 8005afe:	2300      	movs	r3, #0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10d      	bne.n	8005b20 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8005b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b08:	b672      	cpsid	i
 8005b0a:	f383 8811 	msr	BASEPRI, r3
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	f3bf 8f4f 	dsb	sy
 8005b16:	b662      	cpsie	i
 8005b18:	623b      	str	r3, [r7, #32]
}
 8005b1a:	bf00      	nop
 8005b1c:	bf00      	nop
 8005b1e:	e7fd      	b.n	8005b1c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d103      	bne.n	8005b2e <xQueueGenericSendFromISR+0x76>
 8005b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d101      	bne.n	8005b32 <xQueueGenericSendFromISR+0x7a>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e000      	b.n	8005b34 <xQueueGenericSendFromISR+0x7c>
 8005b32:	2300      	movs	r3, #0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10d      	bne.n	8005b54 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8005b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b3c:	b672      	cpsid	i
 8005b3e:	f383 8811 	msr	BASEPRI, r3
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	b662      	cpsie	i
 8005b4c:	61fb      	str	r3, [r7, #28]
}
 8005b4e:	bf00      	nop
 8005b50:	bf00      	nop
 8005b52:	e7fd      	b.n	8005b50 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b54:	f002 fa2a 	bl	8007fac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005b58:	f3ef 8211 	mrs	r2, BASEPRI
 8005b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b60:	b672      	cpsid	i
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	b662      	cpsie	i
 8005b70:	61ba      	str	r2, [r7, #24]
 8005b72:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005b74:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d302      	bcc.n	8005b8a <xQueueGenericSendFromISR+0xd2>
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d12c      	bne.n	8005be4 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b94:	683a      	ldr	r2, [r7, #0]
 8005b96:	68b9      	ldr	r1, [r7, #8]
 8005b98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b9a:	f000 fa49 	bl	8006030 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b9e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba6:	d112      	bne.n	8005bce <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d016      	beq.n	8005bde <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb2:	3324      	adds	r3, #36	@ 0x24
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f001 f843 	bl	8006c40 <xTaskRemoveFromEventList>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00e      	beq.n	8005bde <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00b      	beq.n	8005bde <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	601a      	str	r2, [r3, #0]
 8005bcc:	e007      	b.n	8005bde <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005bce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	b25a      	sxtb	r2, r3
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005bde:	2301      	movs	r3, #1
 8005be0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005be2:	e001      	b.n	8005be8 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005be4:	2300      	movs	r3, #0
 8005be6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bea:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005bf2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3738      	adds	r7, #56	@ 0x38
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
	...

08005c00 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b08c      	sub	sp, #48	@ 0x30
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10d      	bne.n	8005c36 <xQueueReceive+0x36>
	__asm volatile
 8005c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c1e:	b672      	cpsid	i
 8005c20:	f383 8811 	msr	BASEPRI, r3
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	f3bf 8f4f 	dsb	sy
 8005c2c:	b662      	cpsie	i
 8005c2e:	623b      	str	r3, [r7, #32]
}
 8005c30:	bf00      	nop
 8005c32:	bf00      	nop
 8005c34:	e7fd      	b.n	8005c32 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d103      	bne.n	8005c44 <xQueueReceive+0x44>
 8005c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <xQueueReceive+0x48>
 8005c44:	2301      	movs	r3, #1
 8005c46:	e000      	b.n	8005c4a <xQueueReceive+0x4a>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10d      	bne.n	8005c6a <xQueueReceive+0x6a>
	__asm volatile
 8005c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c52:	b672      	cpsid	i
 8005c54:	f383 8811 	msr	BASEPRI, r3
 8005c58:	f3bf 8f6f 	isb	sy
 8005c5c:	f3bf 8f4f 	dsb	sy
 8005c60:	b662      	cpsie	i
 8005c62:	61fb      	str	r3, [r7, #28]
}
 8005c64:	bf00      	nop
 8005c66:	bf00      	nop
 8005c68:	e7fd      	b.n	8005c66 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c6a:	f001 f9b7 	bl	8006fdc <xTaskGetSchedulerState>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d102      	bne.n	8005c7a <xQueueReceive+0x7a>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <xQueueReceive+0x7e>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e000      	b.n	8005c80 <xQueueReceive+0x80>
 8005c7e:	2300      	movs	r3, #0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10d      	bne.n	8005ca0 <xQueueReceive+0xa0>
	__asm volatile
 8005c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c88:	b672      	cpsid	i
 8005c8a:	f383 8811 	msr	BASEPRI, r3
 8005c8e:	f3bf 8f6f 	isb	sy
 8005c92:	f3bf 8f4f 	dsb	sy
 8005c96:	b662      	cpsie	i
 8005c98:	61bb      	str	r3, [r7, #24]
}
 8005c9a:	bf00      	nop
 8005c9c:	bf00      	nop
 8005c9e:	e7fd      	b.n	8005c9c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ca0:	f002 f89c 	bl	8007ddc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d01f      	beq.n	8005cf0 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cb0:	68b9      	ldr	r1, [r7, #8]
 8005cb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cb4:	f000 fa26 	bl	8006104 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cba:	1e5a      	subs	r2, r3, #1
 8005cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cbe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00f      	beq.n	8005ce8 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cca:	3310      	adds	r3, #16
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 ffb7 	bl	8006c40 <xTaskRemoveFromEventList>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d007      	beq.n	8005ce8 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005cd8:	4b3c      	ldr	r3, [pc, #240]	@ (8005dcc <xQueueReceive+0x1cc>)
 8005cda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cde:	601a      	str	r2, [r3, #0]
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ce8:	f002 f8ae 	bl	8007e48 <vPortExitCritical>
				return pdPASS;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e069      	b.n	8005dc4 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d103      	bne.n	8005cfe <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005cf6:	f002 f8a7 	bl	8007e48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	e062      	b.n	8005dc4 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d106      	bne.n	8005d12 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d04:	f107 0310 	add.w	r3, r7, #16
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f000 ffff 	bl	8006d0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d12:	f002 f899 	bl	8007e48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d16:	f000 fd5d 	bl	80067d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d1a:	f002 f85f 	bl	8007ddc <vPortEnterCritical>
 8005d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d24:	b25b      	sxtb	r3, r3
 8005d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2a:	d103      	bne.n	8005d34 <xQueueReceive+0x134>
 8005d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d3a:	b25b      	sxtb	r3, r3
 8005d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d40:	d103      	bne.n	8005d4a <xQueueReceive+0x14a>
 8005d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d4a:	f002 f87d 	bl	8007e48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d4e:	1d3a      	adds	r2, r7, #4
 8005d50:	f107 0310 	add.w	r3, r7, #16
 8005d54:	4611      	mov	r1, r2
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 ffee 	bl	8006d38 <xTaskCheckForTimeOut>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d123      	bne.n	8005daa <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d64:	f000 fa46 	bl	80061f4 <prvIsQueueEmpty>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d017      	beq.n	8005d9e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d70:	3324      	adds	r3, #36	@ 0x24
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	4611      	mov	r1, r2
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 ff0c 	bl	8006b94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d7e:	f000 f9e7 	bl	8006150 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d82:	f000 fd35 	bl	80067f0 <xTaskResumeAll>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d189      	bne.n	8005ca0 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8005d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8005dcc <xQueueReceive+0x1cc>)
 8005d8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	f3bf 8f6f 	isb	sy
 8005d9c:	e780      	b.n	8005ca0 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005d9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005da0:	f000 f9d6 	bl	8006150 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005da4:	f000 fd24 	bl	80067f0 <xTaskResumeAll>
 8005da8:	e77a      	b.n	8005ca0 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005daa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dac:	f000 f9d0 	bl	8006150 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005db0:	f000 fd1e 	bl	80067f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005db4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005db6:	f000 fa1d 	bl	80061f4 <prvIsQueueEmpty>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f43f af6f 	beq.w	8005ca0 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005dc2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3730      	adds	r7, #48	@ 0x30
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	e000ed04 	.word	0xe000ed04

08005dd0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08e      	sub	sp, #56	@ 0x38
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005de2:	2300      	movs	r3, #0
 8005de4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10d      	bne.n	8005e08 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8005dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df0:	b672      	cpsid	i
 8005df2:	f383 8811 	msr	BASEPRI, r3
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	b662      	cpsie	i
 8005e00:	623b      	str	r3, [r7, #32]
}
 8005e02:	bf00      	nop
 8005e04:	bf00      	nop
 8005e06:	e7fd      	b.n	8005e04 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00d      	beq.n	8005e2c <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e14:	b672      	cpsid	i
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	b662      	cpsie	i
 8005e24:	61fb      	str	r3, [r7, #28]
}
 8005e26:	bf00      	nop
 8005e28:	bf00      	nop
 8005e2a:	e7fd      	b.n	8005e28 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e2c:	f001 f8d6 	bl	8006fdc <xTaskGetSchedulerState>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d102      	bne.n	8005e3c <xQueueSemaphoreTake+0x6c>
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d101      	bne.n	8005e40 <xQueueSemaphoreTake+0x70>
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e000      	b.n	8005e42 <xQueueSemaphoreTake+0x72>
 8005e40:	2300      	movs	r3, #0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10d      	bne.n	8005e62 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8005e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e4a:	b672      	cpsid	i
 8005e4c:	f383 8811 	msr	BASEPRI, r3
 8005e50:	f3bf 8f6f 	isb	sy
 8005e54:	f3bf 8f4f 	dsb	sy
 8005e58:	b662      	cpsie	i
 8005e5a:	61bb      	str	r3, [r7, #24]
}
 8005e5c:	bf00      	nop
 8005e5e:	bf00      	nop
 8005e60:	e7fd      	b.n	8005e5e <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e62:	f001 ffbb 	bl	8007ddc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e6a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d024      	beq.n	8005ebc <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e74:	1e5a      	subs	r2, r3, #1
 8005e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e78:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d104      	bne.n	8005e8c <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005e82:	f001 fa75 	bl	8007370 <pvTaskIncrementMutexHeldCount>
 8005e86:	4602      	mov	r2, r0
 8005e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e8a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00f      	beq.n	8005eb4 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e96:	3310      	adds	r3, #16
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 fed1 	bl	8006c40 <xTaskRemoveFromEventList>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d007      	beq.n	8005eb4 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ea4:	4b55      	ldr	r3, [pc, #340]	@ (8005ffc <xQueueSemaphoreTake+0x22c>)
 8005ea6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005eb4:	f001 ffc8 	bl	8007e48 <vPortExitCritical>
				return pdPASS;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e09a      	b.n	8005ff2 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d114      	bne.n	8005eec <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00d      	beq.n	8005ee4 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8005ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ecc:	b672      	cpsid	i
 8005ece:	f383 8811 	msr	BASEPRI, r3
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	b662      	cpsie	i
 8005edc:	617b      	str	r3, [r7, #20]
}
 8005ede:	bf00      	nop
 8005ee0:	bf00      	nop
 8005ee2:	e7fd      	b.n	8005ee0 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005ee4:	f001 ffb0 	bl	8007e48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	e082      	b.n	8005ff2 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d106      	bne.n	8005f00 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ef2:	f107 030c 	add.w	r3, r7, #12
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 ff08 	bl	8006d0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005efc:	2301      	movs	r3, #1
 8005efe:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f00:	f001 ffa2 	bl	8007e48 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f04:	f000 fc66 	bl	80067d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f08:	f001 ff68 	bl	8007ddc <vPortEnterCritical>
 8005f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f0e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f12:	b25b      	sxtb	r3, r3
 8005f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f18:	d103      	bne.n	8005f22 <xQueueSemaphoreTake+0x152>
 8005f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f28:	b25b      	sxtb	r3, r3
 8005f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2e:	d103      	bne.n	8005f38 <xQueueSemaphoreTake+0x168>
 8005f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f38:	f001 ff86 	bl	8007e48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f3c:	463a      	mov	r2, r7
 8005f3e:	f107 030c 	add.w	r3, r7, #12
 8005f42:	4611      	mov	r1, r2
 8005f44:	4618      	mov	r0, r3
 8005f46:	f000 fef7 	bl	8006d38 <xTaskCheckForTimeOut>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d132      	bne.n	8005fb6 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f52:	f000 f94f 	bl	80061f4 <prvIsQueueEmpty>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d026      	beq.n	8005faa <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d109      	bne.n	8005f78 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8005f64:	f001 ff3a 	bl	8007ddc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f001 f853 	bl	8007018 <xTaskPriorityInherit>
 8005f72:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005f74:	f001 ff68 	bl	8007e48 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f7a:	3324      	adds	r3, #36	@ 0x24
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	4611      	mov	r1, r2
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 fe07 	bl	8006b94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f88:	f000 f8e2 	bl	8006150 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f8c:	f000 fc30 	bl	80067f0 <xTaskResumeAll>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f47f af65 	bne.w	8005e62 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8005f98:	4b18      	ldr	r3, [pc, #96]	@ (8005ffc <xQueueSemaphoreTake+0x22c>)
 8005f9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	e75b      	b.n	8005e62 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005faa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005fac:	f000 f8d0 	bl	8006150 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fb0:	f000 fc1e 	bl	80067f0 <xTaskResumeAll>
 8005fb4:	e755      	b.n	8005e62 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005fb6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005fb8:	f000 f8ca 	bl	8006150 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fbc:	f000 fc18 	bl	80067f0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fc0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005fc2:	f000 f917 	bl	80061f4 <prvIsQueueEmpty>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f43f af4a 	beq.w	8005e62 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00d      	beq.n	8005ff0 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8005fd4:	f001 ff02 	bl	8007ddc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005fd8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005fda:	f000 f811 	bl	8006000 <prvGetDisinheritPriorityAfterTimeout>
 8005fde:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f001 f922 	bl	8007230 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005fec:	f001 ff2c 	bl	8007e48 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ff0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3738      	adds	r7, #56	@ 0x38
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	e000ed04 	.word	0xe000ed04

08006000 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600c:	2b00      	cmp	r3, #0
 800600e:	d006      	beq.n	800601e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f1c3 0307 	rsb	r3, r3, #7
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	e001      	b.n	8006022 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800601e:	2300      	movs	r3, #0
 8006020:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006022:	68fb      	ldr	r3, [r7, #12]
	}
 8006024:	4618      	mov	r0, r3
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800603c:	2300      	movs	r3, #0
 800603e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006044:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10d      	bne.n	800606a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d14d      	bne.n	80060f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	4618      	mov	r0, r3
 800605c:	f001 f85c 	bl	8007118 <xTaskPriorityDisinherit>
 8006060:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	609a      	str	r2, [r3, #8]
 8006068:	e043      	b.n	80060f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d119      	bne.n	80060a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6858      	ldr	r0, [r3, #4]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006078:	461a      	mov	r2, r3
 800607a:	68b9      	ldr	r1, [r7, #8]
 800607c:	f003 f80b 	bl	8009096 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006088:	441a      	add	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	429a      	cmp	r2, r3
 8006098:	d32b      	bcc.n	80060f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	605a      	str	r2, [r3, #4]
 80060a2:	e026      	b.n	80060f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	68d8      	ldr	r0, [r3, #12]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ac:	461a      	mov	r2, r3
 80060ae:	68b9      	ldr	r1, [r7, #8]
 80060b0:	f002 fff1 	bl	8009096 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	68da      	ldr	r2, [r3, #12]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060bc:	425b      	negs	r3, r3
 80060be:	441a      	add	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	68da      	ldr	r2, [r3, #12]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d207      	bcs.n	80060e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	689a      	ldr	r2, [r3, #8]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d8:	425b      	negs	r3, r3
 80060da:	441a      	add	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d105      	bne.n	80060f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	3b01      	subs	r3, #1
 80060f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	1c5a      	adds	r2, r3, #1
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80060fa:	697b      	ldr	r3, [r7, #20]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3718      	adds	r7, #24
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006112:	2b00      	cmp	r3, #0
 8006114:	d018      	beq.n	8006148 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68da      	ldr	r2, [r3, #12]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800611e:	441a      	add	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68da      	ldr	r2, [r3, #12]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	429a      	cmp	r2, r3
 800612e:	d303      	bcc.n	8006138 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68d9      	ldr	r1, [r3, #12]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006140:	461a      	mov	r2, r3
 8006142:	6838      	ldr	r0, [r7, #0]
 8006144:	f002 ffa7 	bl	8009096 <memcpy>
	}
}
 8006148:	bf00      	nop
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006158:	f001 fe40 	bl	8007ddc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006162:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006164:	e011      	b.n	800618a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616a:	2b00      	cmp	r3, #0
 800616c:	d012      	beq.n	8006194 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	3324      	adds	r3, #36	@ 0x24
 8006172:	4618      	mov	r0, r3
 8006174:	f000 fd64 	bl	8006c40 <xTaskRemoveFromEventList>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800617e:	f000 fe43 	bl	8006e08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006182:	7bfb      	ldrb	r3, [r7, #15]
 8006184:	3b01      	subs	r3, #1
 8006186:	b2db      	uxtb	r3, r3
 8006188:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800618a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800618e:	2b00      	cmp	r3, #0
 8006190:	dce9      	bgt.n	8006166 <prvUnlockQueue+0x16>
 8006192:	e000      	b.n	8006196 <prvUnlockQueue+0x46>
					break;
 8006194:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	22ff      	movs	r2, #255	@ 0xff
 800619a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800619e:	f001 fe53 	bl	8007e48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80061a2:	f001 fe1b 	bl	8007ddc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061ae:	e011      	b.n	80061d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d012      	beq.n	80061de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	3310      	adds	r3, #16
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 fd3f 	bl	8006c40 <xTaskRemoveFromEventList>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80061c8:	f000 fe1e 	bl	8006e08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80061cc:	7bbb      	ldrb	r3, [r7, #14]
 80061ce:	3b01      	subs	r3, #1
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	dce9      	bgt.n	80061b0 <prvUnlockQueue+0x60>
 80061dc:	e000      	b.n	80061e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80061de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	22ff      	movs	r2, #255	@ 0xff
 80061e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80061e8:	f001 fe2e 	bl	8007e48 <vPortExitCritical>
}
 80061ec:	bf00      	nop
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061fc:	f001 fdee 	bl	8007ddc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006204:	2b00      	cmp	r3, #0
 8006206:	d102      	bne.n	800620e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006208:	2301      	movs	r3, #1
 800620a:	60fb      	str	r3, [r7, #12]
 800620c:	e001      	b.n	8006212 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800620e:	2300      	movs	r3, #0
 8006210:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006212:	f001 fe19 	bl	8007e48 <vPortExitCritical>

	return xReturn;
 8006216:	68fb      	ldr	r3, [r7, #12]
}
 8006218:	4618      	mov	r0, r3
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006228:	f001 fdd8 	bl	8007ddc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006234:	429a      	cmp	r2, r3
 8006236:	d102      	bne.n	800623e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006238:	2301      	movs	r3, #1
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	e001      	b.n	8006242 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800623e:	2300      	movs	r3, #0
 8006240:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006242:	f001 fe01 	bl	8007e48 <vPortExitCritical>

	return xReturn;
 8006246:	68fb      	ldr	r3, [r7, #12]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800625a:	2300      	movs	r3, #0
 800625c:	60fb      	str	r3, [r7, #12]
 800625e:	e014      	b.n	800628a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006260:	4a0f      	ldr	r2, [pc, #60]	@ (80062a0 <vQueueAddToRegistry+0x50>)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10b      	bne.n	8006284 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800626c:	490c      	ldr	r1, [pc, #48]	@ (80062a0 <vQueueAddToRegistry+0x50>)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	683a      	ldr	r2, [r7, #0]
 8006272:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006276:	4a0a      	ldr	r2, [pc, #40]	@ (80062a0 <vQueueAddToRegistry+0x50>)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	00db      	lsls	r3, r3, #3
 800627c:	4413      	add	r3, r2
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006282:	e006      	b.n	8006292 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	3301      	adds	r3, #1
 8006288:	60fb      	str	r3, [r7, #12]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2b07      	cmp	r3, #7
 800628e:	d9e7      	bls.n	8006260 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006290:	bf00      	nop
 8006292:	bf00      	nop
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	20000a18 	.word	0x20000a18

080062a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80062b4:	f001 fd92 	bl	8007ddc <vPortEnterCritical>
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062be:	b25b      	sxtb	r3, r3
 80062c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c4:	d103      	bne.n	80062ce <vQueueWaitForMessageRestricted+0x2a>
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062d4:	b25b      	sxtb	r3, r3
 80062d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062da:	d103      	bne.n	80062e4 <vQueueWaitForMessageRestricted+0x40>
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062e4:	f001 fdb0 	bl	8007e48 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d106      	bne.n	80062fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	3324      	adds	r3, #36	@ 0x24
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	68b9      	ldr	r1, [r7, #8]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 fc73 	bl	8006be4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80062fe:	6978      	ldr	r0, [r7, #20]
 8006300:	f7ff ff26 	bl	8006150 <prvUnlockQueue>
	}
 8006304:	bf00      	nop
 8006306:	3718      	adds	r7, #24
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800630c:	b580      	push	{r7, lr}
 800630e:	b08e      	sub	sp, #56	@ 0x38
 8006310:	af04      	add	r7, sp, #16
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800631a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800631c:	2b00      	cmp	r3, #0
 800631e:	d10d      	bne.n	800633c <xTaskCreateStatic+0x30>
	__asm volatile
 8006320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006324:	b672      	cpsid	i
 8006326:	f383 8811 	msr	BASEPRI, r3
 800632a:	f3bf 8f6f 	isb	sy
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	b662      	cpsie	i
 8006334:	623b      	str	r3, [r7, #32]
}
 8006336:	bf00      	nop
 8006338:	bf00      	nop
 800633a:	e7fd      	b.n	8006338 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800633c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10d      	bne.n	800635e <xTaskCreateStatic+0x52>
	__asm volatile
 8006342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006346:	b672      	cpsid	i
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	b662      	cpsie	i
 8006356:	61fb      	str	r3, [r7, #28]
}
 8006358:	bf00      	nop
 800635a:	bf00      	nop
 800635c:	e7fd      	b.n	800635a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800635e:	23a0      	movs	r3, #160	@ 0xa0
 8006360:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	2ba0      	cmp	r3, #160	@ 0xa0
 8006366:	d00d      	beq.n	8006384 <xTaskCreateStatic+0x78>
	__asm volatile
 8006368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636c:	b672      	cpsid	i
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	b662      	cpsie	i
 800637c:	61bb      	str	r3, [r7, #24]
}
 800637e:	bf00      	nop
 8006380:	bf00      	nop
 8006382:	e7fd      	b.n	8006380 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006384:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006388:	2b00      	cmp	r3, #0
 800638a:	d01e      	beq.n	80063ca <xTaskCreateStatic+0xbe>
 800638c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800638e:	2b00      	cmp	r3, #0
 8006390:	d01b      	beq.n	80063ca <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006394:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006398:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800639a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800639c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639e:	2202      	movs	r2, #2
 80063a0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80063a4:	2300      	movs	r3, #0
 80063a6:	9303      	str	r3, [sp, #12]
 80063a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063aa:	9302      	str	r3, [sp, #8]
 80063ac:	f107 0314 	add.w	r3, r7, #20
 80063b0:	9301      	str	r3, [sp, #4]
 80063b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	68b9      	ldr	r1, [r7, #8]
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 f851 	bl	8006464 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80063c4:	f000 f8f0 	bl	80065a8 <prvAddNewTaskToReadyList>
 80063c8:	e001      	b.n	80063ce <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80063ca:	2300      	movs	r3, #0
 80063cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80063ce:	697b      	ldr	r3, [r7, #20]
	}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3728      	adds	r7, #40	@ 0x28
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08c      	sub	sp, #48	@ 0x30
 80063dc:	af04      	add	r7, sp, #16
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	603b      	str	r3, [r7, #0]
 80063e4:	4613      	mov	r3, r2
 80063e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80063e8:	88fb      	ldrh	r3, [r7, #6]
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4618      	mov	r0, r3
 80063ee:	f001 fe23 	bl	8008038 <pvPortMalloc>
 80063f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00e      	beq.n	8006418 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80063fa:	20a0      	movs	r0, #160	@ 0xa0
 80063fc:	f001 fe1c 	bl	8008038 <pvPortMalloc>
 8006400:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d003      	beq.n	8006410 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	631a      	str	r2, [r3, #48]	@ 0x30
 800640e:	e005      	b.n	800641c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006410:	6978      	ldr	r0, [r7, #20]
 8006412:	f001 fedf 	bl	80081d4 <vPortFree>
 8006416:	e001      	b.n	800641c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006418:	2300      	movs	r3, #0
 800641a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d017      	beq.n	8006452 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800642a:	88fa      	ldrh	r2, [r7, #6]
 800642c:	2300      	movs	r3, #0
 800642e:	9303      	str	r3, [sp, #12]
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	9302      	str	r3, [sp, #8]
 8006434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006436:	9301      	str	r3, [sp, #4]
 8006438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	68b9      	ldr	r1, [r7, #8]
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 f80f 	bl	8006464 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006446:	69f8      	ldr	r0, [r7, #28]
 8006448:	f000 f8ae 	bl	80065a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800644c:	2301      	movs	r3, #1
 800644e:	61bb      	str	r3, [r7, #24]
 8006450:	e002      	b.n	8006458 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006452:	f04f 33ff 	mov.w	r3, #4294967295
 8006456:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006458:	69bb      	ldr	r3, [r7, #24]
	}
 800645a:	4618      	mov	r0, r3
 800645c:	3720      	adds	r7, #32
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
	...

08006464 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b088      	sub	sp, #32
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
 8006470:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006474:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006476:	6879      	ldr	r1, [r7, #4]
 8006478:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800647c:	440b      	add	r3, r1
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	f023 0307 	bic.w	r3, r3, #7
 800648a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	f003 0307 	and.w	r3, r3, #7
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00d      	beq.n	80064b2 <prvInitialiseNewTask+0x4e>
	__asm volatile
 8006496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800649a:	b672      	cpsid	i
 800649c:	f383 8811 	msr	BASEPRI, r3
 80064a0:	f3bf 8f6f 	isb	sy
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	b662      	cpsie	i
 80064aa:	617b      	str	r3, [r7, #20]
}
 80064ac:	bf00      	nop
 80064ae:	bf00      	nop
 80064b0:	e7fd      	b.n	80064ae <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d01f      	beq.n	80064f8 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064b8:	2300      	movs	r3, #0
 80064ba:	61fb      	str	r3, [r7, #28]
 80064bc:	e012      	b.n	80064e4 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	4413      	add	r3, r2
 80064c4:	7819      	ldrb	r1, [r3, #0]
 80064c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	4413      	add	r3, r2
 80064cc:	3334      	adds	r3, #52	@ 0x34
 80064ce:	460a      	mov	r2, r1
 80064d0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	4413      	add	r3, r2
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d006      	beq.n	80064ec <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	3301      	adds	r3, #1
 80064e2:	61fb      	str	r3, [r7, #28]
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	2b0f      	cmp	r3, #15
 80064e8:	d9e9      	bls.n	80064be <prvInitialiseNewTask+0x5a>
 80064ea:	e000      	b.n	80064ee <prvInitialiseNewTask+0x8a>
			{
				break;
 80064ec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80064ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80064f6:	e003      	b.n	8006500 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80064f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006502:	2b06      	cmp	r3, #6
 8006504:	d901      	bls.n	800650a <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006506:	2306      	movs	r3, #6
 8006508:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800650a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800650e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006512:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006514:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006518:	2200      	movs	r2, #0
 800651a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800651c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800651e:	3304      	adds	r3, #4
 8006520:	4618      	mov	r0, r3
 8006522:	f7fe ffa2 	bl	800546a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006528:	3318      	adds	r3, #24
 800652a:	4618      	mov	r0, r3
 800652c:	f7fe ff9d 	bl	800546a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006532:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006534:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006538:	f1c3 0207 	rsb	r2, r3, #7
 800653c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006542:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006544:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006548:	2200      	movs	r2, #0
 800654a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800654e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006550:	2200      	movs	r2, #0
 8006552:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006558:	334c      	adds	r3, #76	@ 0x4c
 800655a:	224c      	movs	r2, #76	@ 0x4c
 800655c:	2100      	movs	r1, #0
 800655e:	4618      	mov	r0, r3
 8006560:	f002 fcc3 	bl	8008eea <memset>
 8006564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006566:	4a0d      	ldr	r2, [pc, #52]	@ (800659c <prvInitialiseNewTask+0x138>)
 8006568:	651a      	str	r2, [r3, #80]	@ 0x50
 800656a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656c:	4a0c      	ldr	r2, [pc, #48]	@ (80065a0 <prvInitialiseNewTask+0x13c>)
 800656e:	655a      	str	r2, [r3, #84]	@ 0x54
 8006570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006572:	4a0c      	ldr	r2, [pc, #48]	@ (80065a4 <prvInitialiseNewTask+0x140>)
 8006574:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	68f9      	ldr	r1, [r7, #12]
 800657a:	69b8      	ldr	r0, [r7, #24]
 800657c:	f001 fb1c 	bl	8007bb8 <pxPortInitialiseStack>
 8006580:	4602      	mov	r2, r0
 8006582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006584:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006588:	2b00      	cmp	r3, #0
 800658a:	d002      	beq.n	8006592 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800658c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800658e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006590:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006592:	bf00      	nop
 8006594:	3720      	adds	r7, #32
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	200048a0 	.word	0x200048a0
 80065a0:	20004908 	.word	0x20004908
 80065a4:	20004970 	.word	0x20004970

080065a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065b0:	f001 fc14 	bl	8007ddc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80065b4:	4b2a      	ldr	r3, [pc, #168]	@ (8006660 <prvAddNewTaskToReadyList+0xb8>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3301      	adds	r3, #1
 80065ba:	4a29      	ldr	r2, [pc, #164]	@ (8006660 <prvAddNewTaskToReadyList+0xb8>)
 80065bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80065be:	4b29      	ldr	r3, [pc, #164]	@ (8006664 <prvAddNewTaskToReadyList+0xbc>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d109      	bne.n	80065da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80065c6:	4a27      	ldr	r2, [pc, #156]	@ (8006664 <prvAddNewTaskToReadyList+0xbc>)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80065cc:	4b24      	ldr	r3, [pc, #144]	@ (8006660 <prvAddNewTaskToReadyList+0xb8>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d110      	bne.n	80065f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80065d4:	f000 fc3c 	bl	8006e50 <prvInitialiseTaskLists>
 80065d8:	e00d      	b.n	80065f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80065da:	4b23      	ldr	r3, [pc, #140]	@ (8006668 <prvAddNewTaskToReadyList+0xc0>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d109      	bne.n	80065f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80065e2:	4b20      	ldr	r3, [pc, #128]	@ (8006664 <prvAddNewTaskToReadyList+0xbc>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d802      	bhi.n	80065f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80065f0:	4a1c      	ldr	r2, [pc, #112]	@ (8006664 <prvAddNewTaskToReadyList+0xbc>)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80065f6:	4b1d      	ldr	r3, [pc, #116]	@ (800666c <prvAddNewTaskToReadyList+0xc4>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3301      	adds	r3, #1
 80065fc:	4a1b      	ldr	r2, [pc, #108]	@ (800666c <prvAddNewTaskToReadyList+0xc4>)
 80065fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006604:	2201      	movs	r2, #1
 8006606:	409a      	lsls	r2, r3
 8006608:	4b19      	ldr	r3, [pc, #100]	@ (8006670 <prvAddNewTaskToReadyList+0xc8>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4313      	orrs	r3, r2
 800660e:	4a18      	ldr	r2, [pc, #96]	@ (8006670 <prvAddNewTaskToReadyList+0xc8>)
 8006610:	6013      	str	r3, [r2, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006616:	4613      	mov	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4a15      	ldr	r2, [pc, #84]	@ (8006674 <prvAddNewTaskToReadyList+0xcc>)
 8006620:	441a      	add	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	3304      	adds	r3, #4
 8006626:	4619      	mov	r1, r3
 8006628:	4610      	mov	r0, r2
 800662a:	f7fe ff2b 	bl	8005484 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800662e:	f001 fc0b 	bl	8007e48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006632:	4b0d      	ldr	r3, [pc, #52]	@ (8006668 <prvAddNewTaskToReadyList+0xc0>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00e      	beq.n	8006658 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800663a:	4b0a      	ldr	r3, [pc, #40]	@ (8006664 <prvAddNewTaskToReadyList+0xbc>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006644:	429a      	cmp	r2, r3
 8006646:	d207      	bcs.n	8006658 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006648:	4b0b      	ldr	r3, [pc, #44]	@ (8006678 <prvAddNewTaskToReadyList+0xd0>)
 800664a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800664e:	601a      	str	r2, [r3, #0]
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006658:	bf00      	nop
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	20000b58 	.word	0x20000b58
 8006664:	20000a58 	.word	0x20000a58
 8006668:	20000b64 	.word	0x20000b64
 800666c:	20000b74 	.word	0x20000b74
 8006670:	20000b60 	.word	0x20000b60
 8006674:	20000a5c 	.word	0x20000a5c
 8006678:	e000ed04 	.word	0xe000ed04

0800667c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006684:	2300      	movs	r3, #0
 8006686:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d01a      	beq.n	80066c4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800668e:	4b15      	ldr	r3, [pc, #84]	@ (80066e4 <vTaskDelay+0x68>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00d      	beq.n	80066b2 <vTaskDelay+0x36>
	__asm volatile
 8006696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800669a:	b672      	cpsid	i
 800669c:	f383 8811 	msr	BASEPRI, r3
 80066a0:	f3bf 8f6f 	isb	sy
 80066a4:	f3bf 8f4f 	dsb	sy
 80066a8:	b662      	cpsie	i
 80066aa:	60bb      	str	r3, [r7, #8]
}
 80066ac:	bf00      	nop
 80066ae:	bf00      	nop
 80066b0:	e7fd      	b.n	80066ae <vTaskDelay+0x32>
			vTaskSuspendAll();
 80066b2:	f000 f88f 	bl	80067d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80066b6:	2100      	movs	r1, #0
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 fe6d 	bl	8007398 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80066be:	f000 f897 	bl	80067f0 <xTaskResumeAll>
 80066c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d107      	bne.n	80066da <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80066ca:	4b07      	ldr	r3, [pc, #28]	@ (80066e8 <vTaskDelay+0x6c>)
 80066cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066d0:	601a      	str	r2, [r3, #0]
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80066da:	bf00      	nop
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	20000b80 	.word	0x20000b80
 80066e8:	e000ed04 	.word	0xe000ed04

080066ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b08a      	sub	sp, #40	@ 0x28
 80066f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80066f2:	2300      	movs	r3, #0
 80066f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80066f6:	2300      	movs	r3, #0
 80066f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80066fa:	463a      	mov	r2, r7
 80066fc:	1d39      	adds	r1, r7, #4
 80066fe:	f107 0308 	add.w	r3, r7, #8
 8006702:	4618      	mov	r0, r3
 8006704:	f7fa fbe8 	bl	8000ed8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006708:	6839      	ldr	r1, [r7, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	9202      	str	r2, [sp, #8]
 8006710:	9301      	str	r3, [sp, #4]
 8006712:	2300      	movs	r3, #0
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	2300      	movs	r3, #0
 8006718:	460a      	mov	r2, r1
 800671a:	4926      	ldr	r1, [pc, #152]	@ (80067b4 <vTaskStartScheduler+0xc8>)
 800671c:	4826      	ldr	r0, [pc, #152]	@ (80067b8 <vTaskStartScheduler+0xcc>)
 800671e:	f7ff fdf5 	bl	800630c <xTaskCreateStatic>
 8006722:	4603      	mov	r3, r0
 8006724:	4a25      	ldr	r2, [pc, #148]	@ (80067bc <vTaskStartScheduler+0xd0>)
 8006726:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006728:	4b24      	ldr	r3, [pc, #144]	@ (80067bc <vTaskStartScheduler+0xd0>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d002      	beq.n	8006736 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006730:	2301      	movs	r3, #1
 8006732:	617b      	str	r3, [r7, #20]
 8006734:	e001      	b.n	800673a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006736:	2300      	movs	r3, #0
 8006738:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d102      	bne.n	8006746 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006740:	f000 fe90 	bl	8007464 <xTimerCreateTimerTask>
 8006744:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d11d      	bne.n	8006788 <vTaskStartScheduler+0x9c>
	__asm volatile
 800674c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006750:	b672      	cpsid	i
 8006752:	f383 8811 	msr	BASEPRI, r3
 8006756:	f3bf 8f6f 	isb	sy
 800675a:	f3bf 8f4f 	dsb	sy
 800675e:	b662      	cpsie	i
 8006760:	613b      	str	r3, [r7, #16]
}
 8006762:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006764:	4b16      	ldr	r3, [pc, #88]	@ (80067c0 <vTaskStartScheduler+0xd4>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	334c      	adds	r3, #76	@ 0x4c
 800676a:	4a16      	ldr	r2, [pc, #88]	@ (80067c4 <vTaskStartScheduler+0xd8>)
 800676c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800676e:	4b16      	ldr	r3, [pc, #88]	@ (80067c8 <vTaskStartScheduler+0xdc>)
 8006770:	f04f 32ff 	mov.w	r2, #4294967295
 8006774:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006776:	4b15      	ldr	r3, [pc, #84]	@ (80067cc <vTaskStartScheduler+0xe0>)
 8006778:	2201      	movs	r2, #1
 800677a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800677c:	4b14      	ldr	r3, [pc, #80]	@ (80067d0 <vTaskStartScheduler+0xe4>)
 800677e:	2200      	movs	r2, #0
 8006780:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006782:	f001 faad 	bl	8007ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006786:	e011      	b.n	80067ac <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800678e:	d10d      	bne.n	80067ac <vTaskStartScheduler+0xc0>
	__asm volatile
 8006790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006794:	b672      	cpsid	i
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	b662      	cpsie	i
 80067a4:	60fb      	str	r3, [r7, #12]
}
 80067a6:	bf00      	nop
 80067a8:	bf00      	nop
 80067aa:	e7fd      	b.n	80067a8 <vTaskStartScheduler+0xbc>
}
 80067ac:	bf00      	nop
 80067ae:	3718      	adds	r7, #24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	0800ae78 	.word	0x0800ae78
 80067b8:	08006e21 	.word	0x08006e21
 80067bc:	20000b7c 	.word	0x20000b7c
 80067c0:	20000a58 	.word	0x20000a58
 80067c4:	20000024 	.word	0x20000024
 80067c8:	20000b78 	.word	0x20000b78
 80067cc:	20000b64 	.word	0x20000b64
 80067d0:	20000b5c 	.word	0x20000b5c

080067d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80067d4:	b480      	push	{r7}
 80067d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80067d8:	4b04      	ldr	r3, [pc, #16]	@ (80067ec <vTaskSuspendAll+0x18>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3301      	adds	r3, #1
 80067de:	4a03      	ldr	r2, [pc, #12]	@ (80067ec <vTaskSuspendAll+0x18>)
 80067e0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80067e2:	bf00      	nop
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	20000b80 	.word	0x20000b80

080067f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80067f6:	2300      	movs	r3, #0
 80067f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80067fa:	2300      	movs	r3, #0
 80067fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80067fe:	4b43      	ldr	r3, [pc, #268]	@ (800690c <xTaskResumeAll+0x11c>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10d      	bne.n	8006822 <xTaskResumeAll+0x32>
	__asm volatile
 8006806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800680a:	b672      	cpsid	i
 800680c:	f383 8811 	msr	BASEPRI, r3
 8006810:	f3bf 8f6f 	isb	sy
 8006814:	f3bf 8f4f 	dsb	sy
 8006818:	b662      	cpsie	i
 800681a:	603b      	str	r3, [r7, #0]
}
 800681c:	bf00      	nop
 800681e:	bf00      	nop
 8006820:	e7fd      	b.n	800681e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006822:	f001 fadb 	bl	8007ddc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006826:	4b39      	ldr	r3, [pc, #228]	@ (800690c <xTaskResumeAll+0x11c>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	3b01      	subs	r3, #1
 800682c:	4a37      	ldr	r2, [pc, #220]	@ (800690c <xTaskResumeAll+0x11c>)
 800682e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006830:	4b36      	ldr	r3, [pc, #216]	@ (800690c <xTaskResumeAll+0x11c>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d161      	bne.n	80068fc <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006838:	4b35      	ldr	r3, [pc, #212]	@ (8006910 <xTaskResumeAll+0x120>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d05d      	beq.n	80068fc <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006840:	e02e      	b.n	80068a0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006842:	4b34      	ldr	r3, [pc, #208]	@ (8006914 <xTaskResumeAll+0x124>)
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	3318      	adds	r3, #24
 800684e:	4618      	mov	r0, r3
 8006850:	f7fe fe75 	bl	800553e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	3304      	adds	r3, #4
 8006858:	4618      	mov	r0, r3
 800685a:	f7fe fe70 	bl	800553e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006862:	2201      	movs	r2, #1
 8006864:	409a      	lsls	r2, r3
 8006866:	4b2c      	ldr	r3, [pc, #176]	@ (8006918 <xTaskResumeAll+0x128>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4313      	orrs	r3, r2
 800686c:	4a2a      	ldr	r2, [pc, #168]	@ (8006918 <xTaskResumeAll+0x128>)
 800686e:	6013      	str	r3, [r2, #0]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006874:	4613      	mov	r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4413      	add	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4a27      	ldr	r2, [pc, #156]	@ (800691c <xTaskResumeAll+0x12c>)
 800687e:	441a      	add	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	3304      	adds	r3, #4
 8006884:	4619      	mov	r1, r3
 8006886:	4610      	mov	r0, r2
 8006888:	f7fe fdfc 	bl	8005484 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006890:	4b23      	ldr	r3, [pc, #140]	@ (8006920 <xTaskResumeAll+0x130>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006896:	429a      	cmp	r2, r3
 8006898:	d302      	bcc.n	80068a0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800689a:	4b22      	ldr	r3, [pc, #136]	@ (8006924 <xTaskResumeAll+0x134>)
 800689c:	2201      	movs	r2, #1
 800689e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068a0:	4b1c      	ldr	r3, [pc, #112]	@ (8006914 <xTaskResumeAll+0x124>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1cc      	bne.n	8006842 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068ae:	f000 fb75 	bl	8006f9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80068b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006928 <xTaskResumeAll+0x138>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d010      	beq.n	80068e0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068be:	f000 f847 	bl	8006950 <xTaskIncrementTick>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d002      	beq.n	80068ce <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80068c8:	4b16      	ldr	r3, [pc, #88]	@ (8006924 <xTaskResumeAll+0x134>)
 80068ca:	2201      	movs	r2, #1
 80068cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	3b01      	subs	r3, #1
 80068d2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1f1      	bne.n	80068be <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80068da:	4b13      	ldr	r3, [pc, #76]	@ (8006928 <xTaskResumeAll+0x138>)
 80068dc:	2200      	movs	r2, #0
 80068de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80068e0:	4b10      	ldr	r3, [pc, #64]	@ (8006924 <xTaskResumeAll+0x134>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d009      	beq.n	80068fc <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80068e8:	2301      	movs	r3, #1
 80068ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80068ec:	4b0f      	ldr	r3, [pc, #60]	@ (800692c <xTaskResumeAll+0x13c>)
 80068ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068f2:	601a      	str	r2, [r3, #0]
 80068f4:	f3bf 8f4f 	dsb	sy
 80068f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068fc:	f001 faa4 	bl	8007e48 <vPortExitCritical>

	return xAlreadyYielded;
 8006900:	68bb      	ldr	r3, [r7, #8]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20000b80 	.word	0x20000b80
 8006910:	20000b58 	.word	0x20000b58
 8006914:	20000b18 	.word	0x20000b18
 8006918:	20000b60 	.word	0x20000b60
 800691c:	20000a5c 	.word	0x20000a5c
 8006920:	20000a58 	.word	0x20000a58
 8006924:	20000b6c 	.word	0x20000b6c
 8006928:	20000b68 	.word	0x20000b68
 800692c:	e000ed04 	.word	0xe000ed04

08006930 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006936:	4b05      	ldr	r3, [pc, #20]	@ (800694c <xTaskGetTickCount+0x1c>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800693c:	687b      	ldr	r3, [r7, #4]
}
 800693e:	4618      	mov	r0, r3
 8006940:	370c      	adds	r7, #12
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	20000b5c 	.word	0x20000b5c

08006950 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006956:	2300      	movs	r3, #0
 8006958:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800695a:	4b50      	ldr	r3, [pc, #320]	@ (8006a9c <xTaskIncrementTick+0x14c>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	f040 808b 	bne.w	8006a7a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006964:	4b4e      	ldr	r3, [pc, #312]	@ (8006aa0 <xTaskIncrementTick+0x150>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	3301      	adds	r3, #1
 800696a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800696c:	4a4c      	ldr	r2, [pc, #304]	@ (8006aa0 <xTaskIncrementTick+0x150>)
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d123      	bne.n	80069c0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8006978:	4b4a      	ldr	r3, [pc, #296]	@ (8006aa4 <xTaskIncrementTick+0x154>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00d      	beq.n	800699e <xTaskIncrementTick+0x4e>
	__asm volatile
 8006982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006986:	b672      	cpsid	i
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	b662      	cpsie	i
 8006996:	603b      	str	r3, [r7, #0]
}
 8006998:	bf00      	nop
 800699a:	bf00      	nop
 800699c:	e7fd      	b.n	800699a <xTaskIncrementTick+0x4a>
 800699e:	4b41      	ldr	r3, [pc, #260]	@ (8006aa4 <xTaskIncrementTick+0x154>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	4b40      	ldr	r3, [pc, #256]	@ (8006aa8 <xTaskIncrementTick+0x158>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a3e      	ldr	r2, [pc, #248]	@ (8006aa4 <xTaskIncrementTick+0x154>)
 80069aa:	6013      	str	r3, [r2, #0]
 80069ac:	4a3e      	ldr	r2, [pc, #248]	@ (8006aa8 <xTaskIncrementTick+0x158>)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6013      	str	r3, [r2, #0]
 80069b2:	4b3e      	ldr	r3, [pc, #248]	@ (8006aac <xTaskIncrementTick+0x15c>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	3301      	adds	r3, #1
 80069b8:	4a3c      	ldr	r2, [pc, #240]	@ (8006aac <xTaskIncrementTick+0x15c>)
 80069ba:	6013      	str	r3, [r2, #0]
 80069bc:	f000 faee 	bl	8006f9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069c0:	4b3b      	ldr	r3, [pc, #236]	@ (8006ab0 <xTaskIncrementTick+0x160>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d348      	bcc.n	8006a5c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069ca:	4b36      	ldr	r3, [pc, #216]	@ (8006aa4 <xTaskIncrementTick+0x154>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d104      	bne.n	80069de <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069d4:	4b36      	ldr	r3, [pc, #216]	@ (8006ab0 <xTaskIncrementTick+0x160>)
 80069d6:	f04f 32ff 	mov.w	r2, #4294967295
 80069da:	601a      	str	r2, [r3, #0]
					break;
 80069dc:	e03e      	b.n	8006a5c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069de:	4b31      	ldr	r3, [pc, #196]	@ (8006aa4 <xTaskIncrementTick+0x154>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d203      	bcs.n	80069fe <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80069f6:	4a2e      	ldr	r2, [pc, #184]	@ (8006ab0 <xTaskIncrementTick+0x160>)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80069fc:	e02e      	b.n	8006a5c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	3304      	adds	r3, #4
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7fe fd9b 	bl	800553e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d004      	beq.n	8006a1a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	3318      	adds	r3, #24
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7fe fd92 	bl	800553e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a1e:	2201      	movs	r2, #1
 8006a20:	409a      	lsls	r2, r3
 8006a22:	4b24      	ldr	r3, [pc, #144]	@ (8006ab4 <xTaskIncrementTick+0x164>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	4a22      	ldr	r2, [pc, #136]	@ (8006ab4 <xTaskIncrementTick+0x164>)
 8006a2a:	6013      	str	r3, [r2, #0]
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a30:	4613      	mov	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4a1f      	ldr	r2, [pc, #124]	@ (8006ab8 <xTaskIncrementTick+0x168>)
 8006a3a:	441a      	add	r2, r3
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	3304      	adds	r3, #4
 8006a40:	4619      	mov	r1, r3
 8006a42:	4610      	mov	r0, r2
 8006a44:	f7fe fd1e 	bl	8005484 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8006abc <xTaskIncrementTick+0x16c>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d3b9      	bcc.n	80069ca <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8006a56:	2301      	movs	r3, #1
 8006a58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a5a:	e7b6      	b.n	80069ca <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a5c:	4b17      	ldr	r3, [pc, #92]	@ (8006abc <xTaskIncrementTick+0x16c>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a62:	4915      	ldr	r1, [pc, #84]	@ (8006ab8 <xTaskIncrementTick+0x168>)
 8006a64:	4613      	mov	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	440b      	add	r3, r1
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d907      	bls.n	8006a84 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8006a74:	2301      	movs	r3, #1
 8006a76:	617b      	str	r3, [r7, #20]
 8006a78:	e004      	b.n	8006a84 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006a7a:	4b11      	ldr	r3, [pc, #68]	@ (8006ac0 <xTaskIncrementTick+0x170>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	4a0f      	ldr	r2, [pc, #60]	@ (8006ac0 <xTaskIncrementTick+0x170>)
 8006a82:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006a84:	4b0f      	ldr	r3, [pc, #60]	@ (8006ac4 <xTaskIncrementTick+0x174>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006a90:	697b      	ldr	r3, [r7, #20]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3718      	adds	r7, #24
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	20000b80 	.word	0x20000b80
 8006aa0:	20000b5c 	.word	0x20000b5c
 8006aa4:	20000b10 	.word	0x20000b10
 8006aa8:	20000b14 	.word	0x20000b14
 8006aac:	20000b70 	.word	0x20000b70
 8006ab0:	20000b78 	.word	0x20000b78
 8006ab4:	20000b60 	.word	0x20000b60
 8006ab8:	20000a5c 	.word	0x20000a5c
 8006abc:	20000a58 	.word	0x20000a58
 8006ac0:	20000b68 	.word	0x20000b68
 8006ac4:	20000b6c 	.word	0x20000b6c

08006ac8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b087      	sub	sp, #28
 8006acc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ace:	4b2b      	ldr	r3, [pc, #172]	@ (8006b7c <vTaskSwitchContext+0xb4>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d003      	beq.n	8006ade <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ad6:	4b2a      	ldr	r3, [pc, #168]	@ (8006b80 <vTaskSwitchContext+0xb8>)
 8006ad8:	2201      	movs	r2, #1
 8006ada:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006adc:	e047      	b.n	8006b6e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006ade:	4b28      	ldr	r3, [pc, #160]	@ (8006b80 <vTaskSwitchContext+0xb8>)
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ae4:	4b27      	ldr	r3, [pc, #156]	@ (8006b84 <vTaskSwitchContext+0xbc>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	fab3 f383 	clz	r3, r3
 8006af0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006af2:	7afb      	ldrb	r3, [r7, #11]
 8006af4:	f1c3 031f 	rsb	r3, r3, #31
 8006af8:	617b      	str	r3, [r7, #20]
 8006afa:	4923      	ldr	r1, [pc, #140]	@ (8006b88 <vTaskSwitchContext+0xc0>)
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	4613      	mov	r3, r2
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4413      	add	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	440b      	add	r3, r1
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10d      	bne.n	8006b2a <vTaskSwitchContext+0x62>
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b12:	b672      	cpsid	i
 8006b14:	f383 8811 	msr	BASEPRI, r3
 8006b18:	f3bf 8f6f 	isb	sy
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	b662      	cpsie	i
 8006b22:	607b      	str	r3, [r7, #4]
}
 8006b24:	bf00      	nop
 8006b26:	bf00      	nop
 8006b28:	e7fd      	b.n	8006b26 <vTaskSwitchContext+0x5e>
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	4a14      	ldr	r2, [pc, #80]	@ (8006b88 <vTaskSwitchContext+0xc0>)
 8006b36:	4413      	add	r3, r2
 8006b38:	613b      	str	r3, [r7, #16]
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	685a      	ldr	r2, [r3, #4]
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	605a      	str	r2, [r3, #4]
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	3308      	adds	r3, #8
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d104      	bne.n	8006b5a <vTaskSwitchContext+0x92>
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	605a      	str	r2, [r3, #4]
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	4a0a      	ldr	r2, [pc, #40]	@ (8006b8c <vTaskSwitchContext+0xc4>)
 8006b62:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b64:	4b09      	ldr	r3, [pc, #36]	@ (8006b8c <vTaskSwitchContext+0xc4>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	334c      	adds	r3, #76	@ 0x4c
 8006b6a:	4a09      	ldr	r2, [pc, #36]	@ (8006b90 <vTaskSwitchContext+0xc8>)
 8006b6c:	6013      	str	r3, [r2, #0]
}
 8006b6e:	bf00      	nop
 8006b70:	371c      	adds	r7, #28
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	20000b80 	.word	0x20000b80
 8006b80:	20000b6c 	.word	0x20000b6c
 8006b84:	20000b60 	.word	0x20000b60
 8006b88:	20000a5c 	.word	0x20000a5c
 8006b8c:	20000a58 	.word	0x20000a58
 8006b90:	20000024 	.word	0x20000024

08006b94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10d      	bne.n	8006bc0 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8006ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba8:	b672      	cpsid	i
 8006baa:	f383 8811 	msr	BASEPRI, r3
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	b662      	cpsie	i
 8006bb8:	60fb      	str	r3, [r7, #12]
}
 8006bba:	bf00      	nop
 8006bbc:	bf00      	nop
 8006bbe:	e7fd      	b.n	8006bbc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bc0:	4b07      	ldr	r3, [pc, #28]	@ (8006be0 <vTaskPlaceOnEventList+0x4c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	3318      	adds	r3, #24
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f7fe fc7f 	bl	80054cc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006bce:	2101      	movs	r1, #1
 8006bd0:	6838      	ldr	r0, [r7, #0]
 8006bd2:	f000 fbe1 	bl	8007398 <prvAddCurrentTaskToDelayedList>
}
 8006bd6:	bf00      	nop
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	20000a58 	.word	0x20000a58

08006be4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b086      	sub	sp, #24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d10d      	bne.n	8006c12 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bfa:	b672      	cpsid	i
 8006bfc:	f383 8811 	msr	BASEPRI, r3
 8006c00:	f3bf 8f6f 	isb	sy
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	b662      	cpsie	i
 8006c0a:	617b      	str	r3, [r7, #20]
}
 8006c0c:	bf00      	nop
 8006c0e:	bf00      	nop
 8006c10:	e7fd      	b.n	8006c0e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c12:	4b0a      	ldr	r3, [pc, #40]	@ (8006c3c <vTaskPlaceOnEventListRestricted+0x58>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	3318      	adds	r3, #24
 8006c18:	4619      	mov	r1, r3
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f7fe fc32 	bl	8005484 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d002      	beq.n	8006c2c <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8006c26:	f04f 33ff 	mov.w	r3, #4294967295
 8006c2a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006c2c:	6879      	ldr	r1, [r7, #4]
 8006c2e:	68b8      	ldr	r0, [r7, #8]
 8006c30:	f000 fbb2 	bl	8007398 <prvAddCurrentTaskToDelayedList>
	}
 8006c34:	bf00      	nop
 8006c36:	3718      	adds	r7, #24
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	20000a58 	.word	0x20000a58

08006c40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10d      	bne.n	8006c72 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8006c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c5a:	b672      	cpsid	i
 8006c5c:	f383 8811 	msr	BASEPRI, r3
 8006c60:	f3bf 8f6f 	isb	sy
 8006c64:	f3bf 8f4f 	dsb	sy
 8006c68:	b662      	cpsie	i
 8006c6a:	60fb      	str	r3, [r7, #12]
}
 8006c6c:	bf00      	nop
 8006c6e:	bf00      	nop
 8006c70:	e7fd      	b.n	8006c6e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	3318      	adds	r3, #24
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7fe fc61 	bl	800553e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8006cf4 <xTaskRemoveFromEventList+0xb4>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d11c      	bne.n	8006cbe <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	3304      	adds	r3, #4
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7fe fc58 	bl	800553e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c92:	2201      	movs	r2, #1
 8006c94:	409a      	lsls	r2, r3
 8006c96:	4b18      	ldr	r3, [pc, #96]	@ (8006cf8 <xTaskRemoveFromEventList+0xb8>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	4a16      	ldr	r2, [pc, #88]	@ (8006cf8 <xTaskRemoveFromEventList+0xb8>)
 8006c9e:	6013      	str	r3, [r2, #0]
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4a13      	ldr	r2, [pc, #76]	@ (8006cfc <xTaskRemoveFromEventList+0xbc>)
 8006cae:	441a      	add	r2, r3
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	3304      	adds	r3, #4
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	4610      	mov	r0, r2
 8006cb8:	f7fe fbe4 	bl	8005484 <vListInsertEnd>
 8006cbc:	e005      	b.n	8006cca <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	3318      	adds	r3, #24
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	480e      	ldr	r0, [pc, #56]	@ (8006d00 <xTaskRemoveFromEventList+0xc0>)
 8006cc6:	f7fe fbdd 	bl	8005484 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cce:	4b0d      	ldr	r3, [pc, #52]	@ (8006d04 <xTaskRemoveFromEventList+0xc4>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d905      	bls.n	8006ce4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8006d08 <xTaskRemoveFromEventList+0xc8>)
 8006cde:	2201      	movs	r2, #1
 8006ce0:	601a      	str	r2, [r3, #0]
 8006ce2:	e001      	b.n	8006ce8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006ce8:	697b      	ldr	r3, [r7, #20]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3718      	adds	r7, #24
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	20000b80 	.word	0x20000b80
 8006cf8:	20000b60 	.word	0x20000b60
 8006cfc:	20000a5c 	.word	0x20000a5c
 8006d00:	20000b18 	.word	0x20000b18
 8006d04:	20000a58 	.word	0x20000a58
 8006d08:	20000b6c 	.word	0x20000b6c

08006d0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006d14:	4b06      	ldr	r3, [pc, #24]	@ (8006d30 <vTaskInternalSetTimeOutState+0x24>)
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d1c:	4b05      	ldr	r3, [pc, #20]	@ (8006d34 <vTaskInternalSetTimeOutState+0x28>)
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	605a      	str	r2, [r3, #4]
}
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	20000b70 	.word	0x20000b70
 8006d34:	20000b5c 	.word	0x20000b5c

08006d38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b088      	sub	sp, #32
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10d      	bne.n	8006d64 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8006d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4c:	b672      	cpsid	i
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	b662      	cpsie	i
 8006d5c:	613b      	str	r3, [r7, #16]
}
 8006d5e:	bf00      	nop
 8006d60:	bf00      	nop
 8006d62:	e7fd      	b.n	8006d60 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10d      	bne.n	8006d86 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8006d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6e:	b672      	cpsid	i
 8006d70:	f383 8811 	msr	BASEPRI, r3
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	b662      	cpsie	i
 8006d7e:	60fb      	str	r3, [r7, #12]
}
 8006d80:	bf00      	nop
 8006d82:	bf00      	nop
 8006d84:	e7fd      	b.n	8006d82 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8006d86:	f001 f829 	bl	8007ddc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8006e00 <xTaskCheckForTimeOut+0xc8>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	69ba      	ldr	r2, [r7, #24]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da2:	d102      	bne.n	8006daa <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006da4:	2300      	movs	r3, #0
 8006da6:	61fb      	str	r3, [r7, #28]
 8006da8:	e023      	b.n	8006df2 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	4b15      	ldr	r3, [pc, #84]	@ (8006e04 <xTaskCheckForTimeOut+0xcc>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d007      	beq.n	8006dc6 <xTaskCheckForTimeOut+0x8e>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	69ba      	ldr	r2, [r7, #24]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d302      	bcc.n	8006dc6 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	61fb      	str	r3, [r7, #28]
 8006dc4:	e015      	b.n	8006df2 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d20b      	bcs.n	8006de8 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	1ad2      	subs	r2, r2, r3
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7ff ff95 	bl	8006d0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006de2:	2300      	movs	r3, #0
 8006de4:	61fb      	str	r3, [r7, #28]
 8006de6:	e004      	b.n	8006df2 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	2200      	movs	r2, #0
 8006dec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006dee:	2301      	movs	r3, #1
 8006df0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006df2:	f001 f829 	bl	8007e48 <vPortExitCritical>

	return xReturn;
 8006df6:	69fb      	ldr	r3, [r7, #28]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3720      	adds	r7, #32
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	20000b5c 	.word	0x20000b5c
 8006e04:	20000b70 	.word	0x20000b70

08006e08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e08:	b480      	push	{r7}
 8006e0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006e0c:	4b03      	ldr	r3, [pc, #12]	@ (8006e1c <vTaskMissedYield+0x14>)
 8006e0e:	2201      	movs	r2, #1
 8006e10:	601a      	str	r2, [r3, #0]
}
 8006e12:	bf00      	nop
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	20000b6c 	.word	0x20000b6c

08006e20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e28:	f000 f852 	bl	8006ed0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e2c:	4b06      	ldr	r3, [pc, #24]	@ (8006e48 <prvIdleTask+0x28>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d9f9      	bls.n	8006e28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e34:	4b05      	ldr	r3, [pc, #20]	@ (8006e4c <prvIdleTask+0x2c>)
 8006e36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e44:	e7f0      	b.n	8006e28 <prvIdleTask+0x8>
 8006e46:	bf00      	nop
 8006e48:	20000a5c 	.word	0x20000a5c
 8006e4c:	e000ed04 	.word	0xe000ed04

08006e50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e56:	2300      	movs	r3, #0
 8006e58:	607b      	str	r3, [r7, #4]
 8006e5a:	e00c      	b.n	8006e76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	4a12      	ldr	r2, [pc, #72]	@ (8006eb0 <prvInitialiseTaskLists+0x60>)
 8006e68:	4413      	add	r3, r2
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7fe fadd 	bl	800542a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	3301      	adds	r3, #1
 8006e74:	607b      	str	r3, [r7, #4]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b06      	cmp	r3, #6
 8006e7a:	d9ef      	bls.n	8006e5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e7c:	480d      	ldr	r0, [pc, #52]	@ (8006eb4 <prvInitialiseTaskLists+0x64>)
 8006e7e:	f7fe fad4 	bl	800542a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e82:	480d      	ldr	r0, [pc, #52]	@ (8006eb8 <prvInitialiseTaskLists+0x68>)
 8006e84:	f7fe fad1 	bl	800542a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e88:	480c      	ldr	r0, [pc, #48]	@ (8006ebc <prvInitialiseTaskLists+0x6c>)
 8006e8a:	f7fe face 	bl	800542a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e8e:	480c      	ldr	r0, [pc, #48]	@ (8006ec0 <prvInitialiseTaskLists+0x70>)
 8006e90:	f7fe facb 	bl	800542a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e94:	480b      	ldr	r0, [pc, #44]	@ (8006ec4 <prvInitialiseTaskLists+0x74>)
 8006e96:	f7fe fac8 	bl	800542a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ec8 <prvInitialiseTaskLists+0x78>)
 8006e9c:	4a05      	ldr	r2, [pc, #20]	@ (8006eb4 <prvInitialiseTaskLists+0x64>)
 8006e9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8006ecc <prvInitialiseTaskLists+0x7c>)
 8006ea2:	4a05      	ldr	r2, [pc, #20]	@ (8006eb8 <prvInitialiseTaskLists+0x68>)
 8006ea4:	601a      	str	r2, [r3, #0]
}
 8006ea6:	bf00      	nop
 8006ea8:	3708      	adds	r7, #8
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	20000a5c 	.word	0x20000a5c
 8006eb4:	20000ae8 	.word	0x20000ae8
 8006eb8:	20000afc 	.word	0x20000afc
 8006ebc:	20000b18 	.word	0x20000b18
 8006ec0:	20000b2c 	.word	0x20000b2c
 8006ec4:	20000b44 	.word	0x20000b44
 8006ec8:	20000b10 	.word	0x20000b10
 8006ecc:	20000b14 	.word	0x20000b14

08006ed0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ed6:	e019      	b.n	8006f0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ed8:	f000 ff80 	bl	8007ddc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006edc:	4b10      	ldr	r3, [pc, #64]	@ (8006f20 <prvCheckTasksWaitingTermination+0x50>)
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	3304      	adds	r3, #4
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7fe fb28 	bl	800553e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006eee:	4b0d      	ldr	r3, [pc, #52]	@ (8006f24 <prvCheckTasksWaitingTermination+0x54>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	4a0b      	ldr	r2, [pc, #44]	@ (8006f24 <prvCheckTasksWaitingTermination+0x54>)
 8006ef6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8006f28 <prvCheckTasksWaitingTermination+0x58>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3b01      	subs	r3, #1
 8006efe:	4a0a      	ldr	r2, [pc, #40]	@ (8006f28 <prvCheckTasksWaitingTermination+0x58>)
 8006f00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006f02:	f000 ffa1 	bl	8007e48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f810 	bl	8006f2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f0c:	4b06      	ldr	r3, [pc, #24]	@ (8006f28 <prvCheckTasksWaitingTermination+0x58>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1e1      	bne.n	8006ed8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006f14:	bf00      	nop
 8006f16:	bf00      	nop
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	20000b2c 	.word	0x20000b2c
 8006f24:	20000b58 	.word	0x20000b58
 8006f28:	20000b40 	.word	0x20000b40

08006f2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	334c      	adds	r3, #76	@ 0x4c
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f001 fff3 	bl	8008f24 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d108      	bne.n	8006f5a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f001 f941 	bl	80081d4 <vPortFree>
				vPortFree( pxTCB );
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f001 f93e 	bl	80081d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f58:	e01b      	b.n	8006f92 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d103      	bne.n	8006f6c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f001 f935 	bl	80081d4 <vPortFree>
	}
 8006f6a:	e012      	b.n	8006f92 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d00d      	beq.n	8006f92 <prvDeleteTCB+0x66>
	__asm volatile
 8006f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f7a:	b672      	cpsid	i
 8006f7c:	f383 8811 	msr	BASEPRI, r3
 8006f80:	f3bf 8f6f 	isb	sy
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	b662      	cpsie	i
 8006f8a:	60fb      	str	r3, [r7, #12]
}
 8006f8c:	bf00      	nop
 8006f8e:	bf00      	nop
 8006f90:	e7fd      	b.n	8006f8e <prvDeleteTCB+0x62>
	}
 8006f92:	bf00      	nop
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
	...

08006f9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8006fd4 <prvResetNextTaskUnblockTime+0x38>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d104      	bne.n	8006fb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006fac:	4b0a      	ldr	r3, [pc, #40]	@ (8006fd8 <prvResetNextTaskUnblockTime+0x3c>)
 8006fae:	f04f 32ff 	mov.w	r2, #4294967295
 8006fb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006fb4:	e008      	b.n	8006fc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fb6:	4b07      	ldr	r3, [pc, #28]	@ (8006fd4 <prvResetNextTaskUnblockTime+0x38>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	4a04      	ldr	r2, [pc, #16]	@ (8006fd8 <prvResetNextTaskUnblockTime+0x3c>)
 8006fc6:	6013      	str	r3, [r2, #0]
}
 8006fc8:	bf00      	nop
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr
 8006fd4:	20000b10 	.word	0x20000b10
 8006fd8:	20000b78 	.word	0x20000b78

08006fdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8007010 <xTaskGetSchedulerState+0x34>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d102      	bne.n	8006ff0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006fea:	2301      	movs	r3, #1
 8006fec:	607b      	str	r3, [r7, #4]
 8006fee:	e008      	b.n	8007002 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ff0:	4b08      	ldr	r3, [pc, #32]	@ (8007014 <xTaskGetSchedulerState+0x38>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d102      	bne.n	8006ffe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	607b      	str	r3, [r7, #4]
 8006ffc:	e001      	b.n	8007002 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ffe:	2300      	movs	r3, #0
 8007000:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007002:	687b      	ldr	r3, [r7, #4]
	}
 8007004:	4618      	mov	r0, r3
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	20000b64 	.word	0x20000b64
 8007014:	20000b80 	.word	0x20000b80

08007018 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007024:	2300      	movs	r3, #0
 8007026:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d069      	beq.n	8007102 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007032:	4b36      	ldr	r3, [pc, #216]	@ (800710c <xTaskPriorityInherit+0xf4>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007038:	429a      	cmp	r2, r3
 800703a:	d259      	bcs.n	80070f0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	2b00      	cmp	r3, #0
 8007042:	db06      	blt.n	8007052 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007044:	4b31      	ldr	r3, [pc, #196]	@ (800710c <xTaskPriorityInherit+0xf4>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800704a:	f1c3 0207 	rsb	r2, r3, #7
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	6959      	ldr	r1, [r3, #20]
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800705a:	4613      	mov	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	4413      	add	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	4a2b      	ldr	r2, [pc, #172]	@ (8007110 <xTaskPriorityInherit+0xf8>)
 8007064:	4413      	add	r3, r2
 8007066:	4299      	cmp	r1, r3
 8007068:	d13a      	bne.n	80070e0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	3304      	adds	r3, #4
 800706e:	4618      	mov	r0, r3
 8007070:	f7fe fa65 	bl	800553e <uxListRemove>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d115      	bne.n	80070a6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800707e:	4924      	ldr	r1, [pc, #144]	@ (8007110 <xTaskPriorityInherit+0xf8>)
 8007080:	4613      	mov	r3, r2
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	440b      	add	r3, r1
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10a      	bne.n	80070a6 <xTaskPriorityInherit+0x8e>
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007094:	2201      	movs	r2, #1
 8007096:	fa02 f303 	lsl.w	r3, r2, r3
 800709a:	43da      	mvns	r2, r3
 800709c:	4b1d      	ldr	r3, [pc, #116]	@ (8007114 <xTaskPriorityInherit+0xfc>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4013      	ands	r3, r2
 80070a2:	4a1c      	ldr	r2, [pc, #112]	@ (8007114 <xTaskPriorityInherit+0xfc>)
 80070a4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80070a6:	4b19      	ldr	r3, [pc, #100]	@ (800710c <xTaskPriorityInherit+0xf4>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b4:	2201      	movs	r2, #1
 80070b6:	409a      	lsls	r2, r3
 80070b8:	4b16      	ldr	r3, [pc, #88]	@ (8007114 <xTaskPriorityInherit+0xfc>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4313      	orrs	r3, r2
 80070be:	4a15      	ldr	r2, [pc, #84]	@ (8007114 <xTaskPriorityInherit+0xfc>)
 80070c0:	6013      	str	r3, [r2, #0]
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070c6:	4613      	mov	r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	4413      	add	r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4a10      	ldr	r2, [pc, #64]	@ (8007110 <xTaskPriorityInherit+0xf8>)
 80070d0:	441a      	add	r2, r3
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	3304      	adds	r3, #4
 80070d6:	4619      	mov	r1, r3
 80070d8:	4610      	mov	r0, r2
 80070da:	f7fe f9d3 	bl	8005484 <vListInsertEnd>
 80070de:	e004      	b.n	80070ea <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80070e0:	4b0a      	ldr	r3, [pc, #40]	@ (800710c <xTaskPriorityInherit+0xf4>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80070ea:	2301      	movs	r3, #1
 80070ec:	60fb      	str	r3, [r7, #12]
 80070ee:	e008      	b.n	8007102 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070f4:	4b05      	ldr	r3, [pc, #20]	@ (800710c <xTaskPriorityInherit+0xf4>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d201      	bcs.n	8007102 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80070fe:	2301      	movs	r3, #1
 8007100:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007102:	68fb      	ldr	r3, [r7, #12]
	}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	20000a58 	.word	0x20000a58
 8007110:	20000a5c 	.word	0x20000a5c
 8007114:	20000b60 	.word	0x20000b60

08007118 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007124:	2300      	movs	r3, #0
 8007126:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d074      	beq.n	8007218 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800712e:	4b3d      	ldr	r3, [pc, #244]	@ (8007224 <xTaskPriorityDisinherit+0x10c>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	429a      	cmp	r2, r3
 8007136:	d00d      	beq.n	8007154 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8007138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800713c:	b672      	cpsid	i
 800713e:	f383 8811 	msr	BASEPRI, r3
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	b662      	cpsie	i
 800714c:	60fb      	str	r3, [r7, #12]
}
 800714e:	bf00      	nop
 8007150:	bf00      	nop
 8007152:	e7fd      	b.n	8007150 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007158:	2b00      	cmp	r3, #0
 800715a:	d10d      	bne.n	8007178 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800715c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007160:	b672      	cpsid	i
 8007162:	f383 8811 	msr	BASEPRI, r3
 8007166:	f3bf 8f6f 	isb	sy
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	b662      	cpsie	i
 8007170:	60bb      	str	r3, [r7, #8]
}
 8007172:	bf00      	nop
 8007174:	bf00      	nop
 8007176:	e7fd      	b.n	8007174 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800717c:	1e5a      	subs	r2, r3, #1
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800718a:	429a      	cmp	r2, r3
 800718c:	d044      	beq.n	8007218 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007192:	2b00      	cmp	r3, #0
 8007194:	d140      	bne.n	8007218 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	3304      	adds	r3, #4
 800719a:	4618      	mov	r0, r3
 800719c:	f7fe f9cf 	bl	800553e <uxListRemove>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d115      	bne.n	80071d2 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071aa:	491f      	ldr	r1, [pc, #124]	@ (8007228 <xTaskPriorityDisinherit+0x110>)
 80071ac:	4613      	mov	r3, r2
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	4413      	add	r3, r2
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	440b      	add	r3, r1
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10a      	bne.n	80071d2 <xTaskPriorityDisinherit+0xba>
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c0:	2201      	movs	r2, #1
 80071c2:	fa02 f303 	lsl.w	r3, r2, r3
 80071c6:	43da      	mvns	r2, r3
 80071c8:	4b18      	ldr	r3, [pc, #96]	@ (800722c <xTaskPriorityDisinherit+0x114>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4013      	ands	r3, r2
 80071ce:	4a17      	ldr	r2, [pc, #92]	@ (800722c <xTaskPriorityDisinherit+0x114>)
 80071d0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071de:	f1c3 0207 	rsb	r2, r3, #7
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ea:	2201      	movs	r2, #1
 80071ec:	409a      	lsls	r2, r3
 80071ee:	4b0f      	ldr	r3, [pc, #60]	@ (800722c <xTaskPriorityDisinherit+0x114>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	4a0d      	ldr	r2, [pc, #52]	@ (800722c <xTaskPriorityDisinherit+0x114>)
 80071f6:	6013      	str	r3, [r2, #0]
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071fc:	4613      	mov	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	4a08      	ldr	r2, [pc, #32]	@ (8007228 <xTaskPriorityDisinherit+0x110>)
 8007206:	441a      	add	r2, r3
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	3304      	adds	r3, #4
 800720c:	4619      	mov	r1, r3
 800720e:	4610      	mov	r0, r2
 8007210:	f7fe f938 	bl	8005484 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007214:	2301      	movs	r3, #1
 8007216:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007218:	697b      	ldr	r3, [r7, #20]
	}
 800721a:	4618      	mov	r0, r3
 800721c:	3718      	adds	r7, #24
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	20000a58 	.word	0x20000a58
 8007228:	20000a5c 	.word	0x20000a5c
 800722c:	20000b60 	.word	0x20000b60

08007230 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007230:	b580      	push	{r7, lr}
 8007232:	b088      	sub	sp, #32
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800723e:	2301      	movs	r3, #1
 8007240:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	f000 8089 	beq.w	800735c <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10d      	bne.n	800726e <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8007252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007256:	b672      	cpsid	i
 8007258:	f383 8811 	msr	BASEPRI, r3
 800725c:	f3bf 8f6f 	isb	sy
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	b662      	cpsie	i
 8007266:	60fb      	str	r3, [r7, #12]
}
 8007268:	bf00      	nop
 800726a:	bf00      	nop
 800726c:	e7fd      	b.n	800726a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	429a      	cmp	r2, r3
 8007276:	d902      	bls.n	800727e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	61fb      	str	r3, [r7, #28]
 800727c:	e002      	b.n	8007284 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007282:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007288:	69fa      	ldr	r2, [r7, #28]
 800728a:	429a      	cmp	r2, r3
 800728c:	d066      	beq.n	800735c <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	429a      	cmp	r2, r3
 8007296:	d161      	bne.n	800735c <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007298:	4b32      	ldr	r3, [pc, #200]	@ (8007364 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	69ba      	ldr	r2, [r7, #24]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d10d      	bne.n	80072be <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 80072a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072a6:	b672      	cpsid	i
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	b662      	cpsie	i
 80072b6:	60bb      	str	r3, [r7, #8]
}
 80072b8:	bf00      	nop
 80072ba:	bf00      	nop
 80072bc:	e7fd      	b.n	80072ba <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	69fa      	ldr	r2, [r7, #28]
 80072c8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	db04      	blt.n	80072dc <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	f1c3 0207 	rsb	r2, r3, #7
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	6959      	ldr	r1, [r3, #20]
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	4613      	mov	r3, r2
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	4413      	add	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4a1f      	ldr	r2, [pc, #124]	@ (8007368 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80072ec:	4413      	add	r3, r2
 80072ee:	4299      	cmp	r1, r3
 80072f0:	d134      	bne.n	800735c <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	3304      	adds	r3, #4
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7fe f921 	bl	800553e <uxListRemove>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d115      	bne.n	800732e <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007306:	4918      	ldr	r1, [pc, #96]	@ (8007368 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007308:	4613      	mov	r3, r2
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	4413      	add	r3, r2
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	440b      	add	r3, r1
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10a      	bne.n	800732e <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800731c:	2201      	movs	r2, #1
 800731e:	fa02 f303 	lsl.w	r3, r2, r3
 8007322:	43da      	mvns	r2, r3
 8007324:	4b11      	ldr	r3, [pc, #68]	@ (800736c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4013      	ands	r3, r2
 800732a:	4a10      	ldr	r2, [pc, #64]	@ (800736c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800732c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007332:	2201      	movs	r2, #1
 8007334:	409a      	lsls	r2, r3
 8007336:	4b0d      	ldr	r3, [pc, #52]	@ (800736c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4313      	orrs	r3, r2
 800733c:	4a0b      	ldr	r2, [pc, #44]	@ (800736c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800733e:	6013      	str	r3, [r2, #0]
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007344:	4613      	mov	r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	4413      	add	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4a06      	ldr	r2, [pc, #24]	@ (8007368 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800734e:	441a      	add	r2, r3
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	3304      	adds	r3, #4
 8007354:	4619      	mov	r1, r3
 8007356:	4610      	mov	r0, r2
 8007358:	f7fe f894 	bl	8005484 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800735c:	bf00      	nop
 800735e:	3720      	adds	r7, #32
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	20000a58 	.word	0x20000a58
 8007368:	20000a5c 	.word	0x20000a5c
 800736c:	20000b60 	.word	0x20000b60

08007370 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007370:	b480      	push	{r7}
 8007372:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007374:	4b07      	ldr	r3, [pc, #28]	@ (8007394 <pvTaskIncrementMutexHeldCount+0x24>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d004      	beq.n	8007386 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800737c:	4b05      	ldr	r3, [pc, #20]	@ (8007394 <pvTaskIncrementMutexHeldCount+0x24>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007382:	3201      	adds	r2, #1
 8007384:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8007386:	4b03      	ldr	r3, [pc, #12]	@ (8007394 <pvTaskIncrementMutexHeldCount+0x24>)
 8007388:	681b      	ldr	r3, [r3, #0]
	}
 800738a:	4618      	mov	r0, r3
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	20000a58 	.word	0x20000a58

08007398 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073a2:	4b29      	ldr	r3, [pc, #164]	@ (8007448 <prvAddCurrentTaskToDelayedList+0xb0>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073a8:	4b28      	ldr	r3, [pc, #160]	@ (800744c <prvAddCurrentTaskToDelayedList+0xb4>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	3304      	adds	r3, #4
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7fe f8c5 	bl	800553e <uxListRemove>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d10b      	bne.n	80073d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80073ba:	4b24      	ldr	r3, [pc, #144]	@ (800744c <prvAddCurrentTaskToDelayedList+0xb4>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c0:	2201      	movs	r2, #1
 80073c2:	fa02 f303 	lsl.w	r3, r2, r3
 80073c6:	43da      	mvns	r2, r3
 80073c8:	4b21      	ldr	r3, [pc, #132]	@ (8007450 <prvAddCurrentTaskToDelayedList+0xb8>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4013      	ands	r3, r2
 80073ce:	4a20      	ldr	r2, [pc, #128]	@ (8007450 <prvAddCurrentTaskToDelayedList+0xb8>)
 80073d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d8:	d10a      	bne.n	80073f0 <prvAddCurrentTaskToDelayedList+0x58>
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d007      	beq.n	80073f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073e0:	4b1a      	ldr	r3, [pc, #104]	@ (800744c <prvAddCurrentTaskToDelayedList+0xb4>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	3304      	adds	r3, #4
 80073e6:	4619      	mov	r1, r3
 80073e8:	481a      	ldr	r0, [pc, #104]	@ (8007454 <prvAddCurrentTaskToDelayedList+0xbc>)
 80073ea:	f7fe f84b 	bl	8005484 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80073ee:	e026      	b.n	800743e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4413      	add	r3, r2
 80073f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80073f8:	4b14      	ldr	r3, [pc, #80]	@ (800744c <prvAddCurrentTaskToDelayedList+0xb4>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	429a      	cmp	r2, r3
 8007406:	d209      	bcs.n	800741c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007408:	4b13      	ldr	r3, [pc, #76]	@ (8007458 <prvAddCurrentTaskToDelayedList+0xc0>)
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	4b0f      	ldr	r3, [pc, #60]	@ (800744c <prvAddCurrentTaskToDelayedList+0xb4>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	3304      	adds	r3, #4
 8007412:	4619      	mov	r1, r3
 8007414:	4610      	mov	r0, r2
 8007416:	f7fe f859 	bl	80054cc <vListInsert>
}
 800741a:	e010      	b.n	800743e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800741c:	4b0f      	ldr	r3, [pc, #60]	@ (800745c <prvAddCurrentTaskToDelayedList+0xc4>)
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	4b0a      	ldr	r3, [pc, #40]	@ (800744c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3304      	adds	r3, #4
 8007426:	4619      	mov	r1, r3
 8007428:	4610      	mov	r0, r2
 800742a:	f7fe f84f 	bl	80054cc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800742e:	4b0c      	ldr	r3, [pc, #48]	@ (8007460 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68ba      	ldr	r2, [r7, #8]
 8007434:	429a      	cmp	r2, r3
 8007436:	d202      	bcs.n	800743e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007438:	4a09      	ldr	r2, [pc, #36]	@ (8007460 <prvAddCurrentTaskToDelayedList+0xc8>)
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	6013      	str	r3, [r2, #0]
}
 800743e:	bf00      	nop
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	20000b5c 	.word	0x20000b5c
 800744c:	20000a58 	.word	0x20000a58
 8007450:	20000b60 	.word	0x20000b60
 8007454:	20000b44 	.word	0x20000b44
 8007458:	20000b14 	.word	0x20000b14
 800745c:	20000b10 	.word	0x20000b10
 8007460:	20000b78 	.word	0x20000b78

08007464 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b08a      	sub	sp, #40	@ 0x28
 8007468:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800746a:	2300      	movs	r3, #0
 800746c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800746e:	f000 fb63 	bl	8007b38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007472:	4b1e      	ldr	r3, [pc, #120]	@ (80074ec <xTimerCreateTimerTask+0x88>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d021      	beq.n	80074be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800747a:	2300      	movs	r3, #0
 800747c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800747e:	2300      	movs	r3, #0
 8007480:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007482:	1d3a      	adds	r2, r7, #4
 8007484:	f107 0108 	add.w	r1, r7, #8
 8007488:	f107 030c 	add.w	r3, r7, #12
 800748c:	4618      	mov	r0, r3
 800748e:	f7f9 fd3d 	bl	8000f0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007492:	6879      	ldr	r1, [r7, #4]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	9202      	str	r2, [sp, #8]
 800749a:	9301      	str	r3, [sp, #4]
 800749c:	2302      	movs	r3, #2
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	2300      	movs	r3, #0
 80074a2:	460a      	mov	r2, r1
 80074a4:	4912      	ldr	r1, [pc, #72]	@ (80074f0 <xTimerCreateTimerTask+0x8c>)
 80074a6:	4813      	ldr	r0, [pc, #76]	@ (80074f4 <xTimerCreateTimerTask+0x90>)
 80074a8:	f7fe ff30 	bl	800630c <xTaskCreateStatic>
 80074ac:	4603      	mov	r3, r0
 80074ae:	4a12      	ldr	r2, [pc, #72]	@ (80074f8 <xTimerCreateTimerTask+0x94>)
 80074b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80074b2:	4b11      	ldr	r3, [pc, #68]	@ (80074f8 <xTimerCreateTimerTask+0x94>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d001      	beq.n	80074be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80074ba:	2301      	movs	r3, #1
 80074bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10d      	bne.n	80074e0 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 80074c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c8:	b672      	cpsid	i
 80074ca:	f383 8811 	msr	BASEPRI, r3
 80074ce:	f3bf 8f6f 	isb	sy
 80074d2:	f3bf 8f4f 	dsb	sy
 80074d6:	b662      	cpsie	i
 80074d8:	613b      	str	r3, [r7, #16]
}
 80074da:	bf00      	nop
 80074dc:	bf00      	nop
 80074de:	e7fd      	b.n	80074dc <xTimerCreateTimerTask+0x78>
	return xReturn;
 80074e0:	697b      	ldr	r3, [r7, #20]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3718      	adds	r7, #24
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	20000bb4 	.word	0x20000bb4
 80074f0:	0800ae80 	.word	0x0800ae80
 80074f4:	080076fd 	.word	0x080076fd
 80074f8:	20000bb8 	.word	0x20000bb8

080074fc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b088      	sub	sp, #32
 8007500:	af02      	add	r7, sp, #8
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	607a      	str	r2, [r7, #4]
 8007508:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800750a:	2028      	movs	r0, #40	@ 0x28
 800750c:	f000 fd94 	bl	8008038 <pvPortMalloc>
 8007510:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00d      	beq.n	8007534 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	9301      	str	r3, [sp, #4]
 8007524:	6a3b      	ldr	r3, [r7, #32]
 8007526:	9300      	str	r3, [sp, #0]
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	68b9      	ldr	r1, [r7, #8]
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f000 f805 	bl	800753e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007534:	697b      	ldr	r3, [r7, #20]
	}
 8007536:	4618      	mov	r0, r3
 8007538:	3718      	adds	r7, #24
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b086      	sub	sp, #24
 8007542:	af00      	add	r7, sp, #0
 8007544:	60f8      	str	r0, [r7, #12]
 8007546:	60b9      	str	r1, [r7, #8]
 8007548:	607a      	str	r2, [r7, #4]
 800754a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10d      	bne.n	800756e <prvInitialiseNewTimer+0x30>
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007556:	b672      	cpsid	i
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	b662      	cpsie	i
 8007566:	617b      	str	r3, [r7, #20]
}
 8007568:	bf00      	nop
 800756a:	bf00      	nop
 800756c:	e7fd      	b.n	800756a <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800756e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007570:	2b00      	cmp	r3, #0
 8007572:	d01e      	beq.n	80075b2 <prvInitialiseNewTimer+0x74>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007574:	f000 fae0 	bl	8007b38 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800757e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800758a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758c:	6a3a      	ldr	r2, [r7, #32]
 800758e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007592:	3304      	adds	r3, #4
 8007594:	4618      	mov	r0, r3
 8007596:	f7fd ff68 	bl	800546a <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d008      	beq.n	80075b2 <prvInitialiseNewTimer+0x74>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80075a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80075a6:	f043 0304 	orr.w	r3, r3, #4
 80075aa:	b2da      	uxtb	r2, r3
 80075ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80075b2:	bf00      	nop
 80075b4:	3718      	adds	r7, #24
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
	...

080075bc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b08a      	sub	sp, #40	@ 0x28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
 80075c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80075ca:	2300      	movs	r3, #0
 80075cc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10d      	bne.n	80075f0 <xTimerGenericCommand+0x34>
	__asm volatile
 80075d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d8:	b672      	cpsid	i
 80075da:	f383 8811 	msr	BASEPRI, r3
 80075de:	f3bf 8f6f 	isb	sy
 80075e2:	f3bf 8f4f 	dsb	sy
 80075e6:	b662      	cpsie	i
 80075e8:	623b      	str	r3, [r7, #32]
}
 80075ea:	bf00      	nop
 80075ec:	bf00      	nop
 80075ee:	e7fd      	b.n	80075ec <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80075f0:	4b19      	ldr	r3, [pc, #100]	@ (8007658 <xTimerGenericCommand+0x9c>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d02a      	beq.n	800764e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2b05      	cmp	r3, #5
 8007608:	dc18      	bgt.n	800763c <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800760a:	f7ff fce7 	bl	8006fdc <xTaskGetSchedulerState>
 800760e:	4603      	mov	r3, r0
 8007610:	2b02      	cmp	r3, #2
 8007612:	d109      	bne.n	8007628 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007614:	4b10      	ldr	r3, [pc, #64]	@ (8007658 <xTimerGenericCommand+0x9c>)
 8007616:	6818      	ldr	r0, [r3, #0]
 8007618:	f107 0114 	add.w	r1, r7, #20
 800761c:	2300      	movs	r3, #0
 800761e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007620:	f7fe f940 	bl	80058a4 <xQueueGenericSend>
 8007624:	6278      	str	r0, [r7, #36]	@ 0x24
 8007626:	e012      	b.n	800764e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007628:	4b0b      	ldr	r3, [pc, #44]	@ (8007658 <xTimerGenericCommand+0x9c>)
 800762a:	6818      	ldr	r0, [r3, #0]
 800762c:	f107 0114 	add.w	r1, r7, #20
 8007630:	2300      	movs	r3, #0
 8007632:	2200      	movs	r2, #0
 8007634:	f7fe f936 	bl	80058a4 <xQueueGenericSend>
 8007638:	6278      	str	r0, [r7, #36]	@ 0x24
 800763a:	e008      	b.n	800764e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800763c:	4b06      	ldr	r3, [pc, #24]	@ (8007658 <xTimerGenericCommand+0x9c>)
 800763e:	6818      	ldr	r0, [r3, #0]
 8007640:	f107 0114 	add.w	r1, r7, #20
 8007644:	2300      	movs	r3, #0
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	f7fe fa36 	bl	8005ab8 <xQueueGenericSendFromISR>
 800764c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800764e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007650:	4618      	mov	r0, r3
 8007652:	3728      	adds	r7, #40	@ 0x28
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	20000bb4 	.word	0x20000bb4

0800765c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b088      	sub	sp, #32
 8007660:	af02      	add	r7, sp, #8
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007666:	4b24      	ldr	r3, [pc, #144]	@ (80076f8 <prvProcessExpiredTimer+0x9c>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	3304      	adds	r3, #4
 8007674:	4618      	mov	r0, r3
 8007676:	f7fd ff62 	bl	800553e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007680:	f003 0304 	and.w	r3, r3, #4
 8007684:	2b00      	cmp	r3, #0
 8007686:	d025      	beq.n	80076d4 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	699a      	ldr	r2, [r3, #24]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	18d1      	adds	r1, r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	6978      	ldr	r0, [r7, #20]
 8007696:	f000 f8d7 	bl	8007848 <prvInsertTimerInActiveList>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d022      	beq.n	80076e6 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80076a0:	2300      	movs	r3, #0
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	2300      	movs	r3, #0
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	2100      	movs	r1, #0
 80076aa:	6978      	ldr	r0, [r7, #20]
 80076ac:	f7ff ff86 	bl	80075bc <xTimerGenericCommand>
 80076b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d116      	bne.n	80076e6 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 80076b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076bc:	b672      	cpsid	i
 80076be:	f383 8811 	msr	BASEPRI, r3
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	f3bf 8f4f 	dsb	sy
 80076ca:	b662      	cpsie	i
 80076cc:	60fb      	str	r3, [r7, #12]
}
 80076ce:	bf00      	nop
 80076d0:	bf00      	nop
 80076d2:	e7fd      	b.n	80076d0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80076da:	f023 0301 	bic.w	r3, r3, #1
 80076de:	b2da      	uxtb	r2, r3
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	6a1b      	ldr	r3, [r3, #32]
 80076ea:	6978      	ldr	r0, [r7, #20]
 80076ec:	4798      	blx	r3
}
 80076ee:	bf00      	nop
 80076f0:	3718      	adds	r7, #24
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	20000bac 	.word	0x20000bac

080076fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007704:	f107 0308 	add.w	r3, r7, #8
 8007708:	4618      	mov	r0, r3
 800770a:	f000 f859 	bl	80077c0 <prvGetNextExpireTime>
 800770e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	4619      	mov	r1, r3
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 f805 	bl	8007724 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800771a:	f000 f8d7 	bl	80078cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800771e:	bf00      	nop
 8007720:	e7f0      	b.n	8007704 <prvTimerTask+0x8>
	...

08007724 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800772e:	f7ff f851 	bl	80067d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007732:	f107 0308 	add.w	r3, r7, #8
 8007736:	4618      	mov	r0, r3
 8007738:	f000 f866 	bl	8007808 <prvSampleTimeNow>
 800773c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d130      	bne.n	80077a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10a      	bne.n	8007760 <prvProcessTimerOrBlockTask+0x3c>
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	429a      	cmp	r2, r3
 8007750:	d806      	bhi.n	8007760 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007752:	f7ff f84d 	bl	80067f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007756:	68f9      	ldr	r1, [r7, #12]
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7ff ff7f 	bl	800765c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800775e:	e024      	b.n	80077aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d008      	beq.n	8007778 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007766:	4b13      	ldr	r3, [pc, #76]	@ (80077b4 <prvProcessTimerOrBlockTask+0x90>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d101      	bne.n	8007774 <prvProcessTimerOrBlockTask+0x50>
 8007770:	2301      	movs	r3, #1
 8007772:	e000      	b.n	8007776 <prvProcessTimerOrBlockTask+0x52>
 8007774:	2300      	movs	r3, #0
 8007776:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007778:	4b0f      	ldr	r3, [pc, #60]	@ (80077b8 <prvProcessTimerOrBlockTask+0x94>)
 800777a:	6818      	ldr	r0, [r3, #0]
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	683a      	ldr	r2, [r7, #0]
 8007784:	4619      	mov	r1, r3
 8007786:	f7fe fd8d 	bl	80062a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800778a:	f7ff f831 	bl	80067f0 <xTaskResumeAll>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10a      	bne.n	80077aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007794:	4b09      	ldr	r3, [pc, #36]	@ (80077bc <prvProcessTimerOrBlockTask+0x98>)
 8007796:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800779a:	601a      	str	r2, [r3, #0]
 800779c:	f3bf 8f4f 	dsb	sy
 80077a0:	f3bf 8f6f 	isb	sy
}
 80077a4:	e001      	b.n	80077aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80077a6:	f7ff f823 	bl	80067f0 <xTaskResumeAll>
}
 80077aa:	bf00      	nop
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	20000bb0 	.word	0x20000bb0
 80077b8:	20000bb4 	.word	0x20000bb4
 80077bc:	e000ed04 	.word	0xe000ed04

080077c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80077c8:	4b0e      	ldr	r3, [pc, #56]	@ (8007804 <prvGetNextExpireTime+0x44>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d101      	bne.n	80077d6 <prvGetNextExpireTime+0x16>
 80077d2:	2201      	movs	r2, #1
 80077d4:	e000      	b.n	80077d8 <prvGetNextExpireTime+0x18>
 80077d6:	2200      	movs	r2, #0
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d105      	bne.n	80077f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80077e4:	4b07      	ldr	r3, [pc, #28]	@ (8007804 <prvGetNextExpireTime+0x44>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	60fb      	str	r3, [r7, #12]
 80077ee:	e001      	b.n	80077f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80077f0:	2300      	movs	r3, #0
 80077f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80077f4:	68fb      	ldr	r3, [r7, #12]
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	20000bac 	.word	0x20000bac

08007808 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007810:	f7ff f88e 	bl	8006930 <xTaskGetTickCount>
 8007814:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007816:	4b0b      	ldr	r3, [pc, #44]	@ (8007844 <prvSampleTimeNow+0x3c>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	429a      	cmp	r2, r3
 800781e:	d205      	bcs.n	800782c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007820:	f000 f922 	bl	8007a68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	601a      	str	r2, [r3, #0]
 800782a:	e002      	b.n	8007832 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007832:	4a04      	ldr	r2, [pc, #16]	@ (8007844 <prvSampleTimeNow+0x3c>)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007838:	68fb      	ldr	r3, [r7, #12]
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	20000bbc 	.word	0x20000bbc

08007848 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b086      	sub	sp, #24
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	607a      	str	r2, [r7, #4]
 8007854:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007856:	2300      	movs	r3, #0
 8007858:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	429a      	cmp	r2, r3
 800786c:	d812      	bhi.n	8007894 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	1ad2      	subs	r2, r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	429a      	cmp	r2, r3
 800787a:	d302      	bcc.n	8007882 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800787c:	2301      	movs	r3, #1
 800787e:	617b      	str	r3, [r7, #20]
 8007880:	e01b      	b.n	80078ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007882:	4b10      	ldr	r3, [pc, #64]	@ (80078c4 <prvInsertTimerInActiveList+0x7c>)
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	3304      	adds	r3, #4
 800788a:	4619      	mov	r1, r3
 800788c:	4610      	mov	r0, r2
 800788e:	f7fd fe1d 	bl	80054cc <vListInsert>
 8007892:	e012      	b.n	80078ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	429a      	cmp	r2, r3
 800789a:	d206      	bcs.n	80078aa <prvInsertTimerInActiveList+0x62>
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d302      	bcc.n	80078aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80078a4:	2301      	movs	r3, #1
 80078a6:	617b      	str	r3, [r7, #20]
 80078a8:	e007      	b.n	80078ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80078aa:	4b07      	ldr	r3, [pc, #28]	@ (80078c8 <prvInsertTimerInActiveList+0x80>)
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	3304      	adds	r3, #4
 80078b2:	4619      	mov	r1, r3
 80078b4:	4610      	mov	r0, r2
 80078b6:	f7fd fe09 	bl	80054cc <vListInsert>
		}
	}

	return xProcessTimerNow;
 80078ba:	697b      	ldr	r3, [r7, #20]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3718      	adds	r7, #24
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	20000bb0 	.word	0x20000bb0
 80078c8:	20000bac 	.word	0x20000bac

080078cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b08c      	sub	sp, #48	@ 0x30
 80078d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80078d2:	e0b6      	b.n	8007a42 <prvProcessReceivedCommands+0x176>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f2c0 80b3 	blt.w	8007a42 <prvProcessReceivedCommands+0x176>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80078e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e2:	695b      	ldr	r3, [r3, #20]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d004      	beq.n	80078f2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ea:	3304      	adds	r3, #4
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7fd fe26 	bl	800553e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078f2:	1d3b      	adds	r3, r7, #4
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7ff ff87 	bl	8007808 <prvSampleTimeNow>
 80078fa:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	2b09      	cmp	r3, #9
 8007900:	f200 809c 	bhi.w	8007a3c <prvProcessReceivedCommands+0x170>
 8007904:	a201      	add	r2, pc, #4	@ (adr r2, 800790c <prvProcessReceivedCommands+0x40>)
 8007906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790a:	bf00      	nop
 800790c:	08007935 	.word	0x08007935
 8007910:	08007935 	.word	0x08007935
 8007914:	08007935 	.word	0x08007935
 8007918:	080079af 	.word	0x080079af
 800791c:	080079c3 	.word	0x080079c3
 8007920:	08007a13 	.word	0x08007a13
 8007924:	08007935 	.word	0x08007935
 8007928:	08007935 	.word	0x08007935
 800792c:	080079af 	.word	0x080079af
 8007930:	080079c3 	.word	0x080079c3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007936:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800793a:	f043 0301 	orr.w	r3, r3, #1
 800793e:	b2da      	uxtb	r2, r3
 8007940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007942:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	18d1      	adds	r1, r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6a3a      	ldr	r2, [r7, #32]
 8007952:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007954:	f7ff ff78 	bl	8007848 <prvInsertTimerInActiveList>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d070      	beq.n	8007a40 <prvProcessReceivedCommands+0x174>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800795e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007960:	6a1b      	ldr	r3, [r3, #32]
 8007962:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007964:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007968:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800796c:	f003 0304 	and.w	r3, r3, #4
 8007970:	2b00      	cmp	r3, #0
 8007972:	d065      	beq.n	8007a40 <prvProcessReceivedCommands+0x174>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007978:	699b      	ldr	r3, [r3, #24]
 800797a:	441a      	add	r2, r3
 800797c:	2300      	movs	r3, #0
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	2300      	movs	r3, #0
 8007982:	2100      	movs	r1, #0
 8007984:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007986:	f7ff fe19 	bl	80075bc <xTimerGenericCommand>
 800798a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d156      	bne.n	8007a40 <prvProcessReceivedCommands+0x174>
	__asm volatile
 8007992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007996:	b672      	cpsid	i
 8007998:	f383 8811 	msr	BASEPRI, r3
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	b662      	cpsie	i
 80079a6:	61bb      	str	r3, [r7, #24]
}
 80079a8:	bf00      	nop
 80079aa:	bf00      	nop
 80079ac:	e7fd      	b.n	80079aa <prvProcessReceivedCommands+0xde>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80079b4:	f023 0301 	bic.w	r3, r3, #1
 80079b8:	b2da      	uxtb	r2, r3
 80079ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 80079c0:	e03f      	b.n	8007a42 <prvProcessReceivedCommands+0x176>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80079c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80079c8:	f043 0301 	orr.w	r3, r3, #1
 80079cc:	b2da      	uxtb	r2, r3
 80079ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80079da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10d      	bne.n	80079fe <prvProcessReceivedCommands+0x132>
	__asm volatile
 80079e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e6:	b672      	cpsid	i
 80079e8:	f383 8811 	msr	BASEPRI, r3
 80079ec:	f3bf 8f6f 	isb	sy
 80079f0:	f3bf 8f4f 	dsb	sy
 80079f4:	b662      	cpsie	i
 80079f6:	617b      	str	r3, [r7, #20]
}
 80079f8:	bf00      	nop
 80079fa:	bf00      	nop
 80079fc:	e7fd      	b.n	80079fa <prvProcessReceivedCommands+0x12e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80079fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a00:	699a      	ldr	r2, [r3, #24]
 8007a02:	6a3b      	ldr	r3, [r7, #32]
 8007a04:	18d1      	adds	r1, r2, r3
 8007a06:	6a3b      	ldr	r3, [r7, #32]
 8007a08:	6a3a      	ldr	r2, [r7, #32]
 8007a0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007a0c:	f7ff ff1c 	bl	8007848 <prvInsertTimerInActiveList>
					break;
 8007a10:	e017      	b.n	8007a42 <prvProcessReceivedCommands+0x176>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a14:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007a18:	f003 0302 	and.w	r3, r3, #2
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d103      	bne.n	8007a28 <prvProcessReceivedCommands+0x15c>
						{
							vPortFree( pxTimer );
 8007a20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007a22:	f000 fbd7 	bl	80081d4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007a26:	e00c      	b.n	8007a42 <prvProcessReceivedCommands+0x176>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a2a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007a2e:	f023 0301 	bic.w	r3, r3, #1
 8007a32:	b2da      	uxtb	r2, r3
 8007a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 8007a3a:	e002      	b.n	8007a42 <prvProcessReceivedCommands+0x176>

				default	:
					/* Don't expect to get here. */
					break;
 8007a3c:	bf00      	nop
 8007a3e:	e000      	b.n	8007a42 <prvProcessReceivedCommands+0x176>
					break;
 8007a40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a42:	4b08      	ldr	r3, [pc, #32]	@ (8007a64 <prvProcessReceivedCommands+0x198>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f107 0108 	add.w	r1, r7, #8
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7fe f8d7 	bl	8005c00 <xQueueReceive>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f47f af3d 	bne.w	80078d4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007a5a:	bf00      	nop
 8007a5c:	bf00      	nop
 8007a5e:	3728      	adds	r7, #40	@ 0x28
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	20000bb4 	.word	0x20000bb4

08007a68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b088      	sub	sp, #32
 8007a6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a6e:	e04b      	b.n	8007b08 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a70:	4b2f      	ldr	r3, [pc, #188]	@ (8007b30 <prvSwitchTimerLists+0xc8>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a7a:	4b2d      	ldr	r3, [pc, #180]	@ (8007b30 <prvSwitchTimerLists+0xc8>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	3304      	adds	r3, #4
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7fd fd58 	bl	800553e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6a1b      	ldr	r3, [r3, #32]
 8007a92:	68f8      	ldr	r0, [r7, #12]
 8007a94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007a9c:	f003 0304 	and.w	r3, r3, #4
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d031      	beq.n	8007b08 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	699b      	ldr	r3, [r3, #24]
 8007aa8:	693a      	ldr	r2, [r7, #16]
 8007aaa:	4413      	add	r3, r2
 8007aac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d90e      	bls.n	8007ad4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	68ba      	ldr	r2, [r7, #8]
 8007aba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8007b30 <prvSwitchTimerLists+0xc8>)
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	3304      	adds	r3, #4
 8007aca:	4619      	mov	r1, r3
 8007acc:	4610      	mov	r0, r2
 8007ace:	f7fd fcfd 	bl	80054cc <vListInsert>
 8007ad2:	e019      	b.n	8007b08 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	2300      	movs	r3, #0
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	2100      	movs	r1, #0
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f7ff fd6c 	bl	80075bc <xTimerGenericCommand>
 8007ae4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d10d      	bne.n	8007b08 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8007aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af0:	b672      	cpsid	i
 8007af2:	f383 8811 	msr	BASEPRI, r3
 8007af6:	f3bf 8f6f 	isb	sy
 8007afa:	f3bf 8f4f 	dsb	sy
 8007afe:	b662      	cpsie	i
 8007b00:	603b      	str	r3, [r7, #0]
}
 8007b02:	bf00      	nop
 8007b04:	bf00      	nop
 8007b06:	e7fd      	b.n	8007b04 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b08:	4b09      	ldr	r3, [pc, #36]	@ (8007b30 <prvSwitchTimerLists+0xc8>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1ae      	bne.n	8007a70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007b12:	4b07      	ldr	r3, [pc, #28]	@ (8007b30 <prvSwitchTimerLists+0xc8>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007b18:	4b06      	ldr	r3, [pc, #24]	@ (8007b34 <prvSwitchTimerLists+0xcc>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a04      	ldr	r2, [pc, #16]	@ (8007b30 <prvSwitchTimerLists+0xc8>)
 8007b1e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007b20:	4a04      	ldr	r2, [pc, #16]	@ (8007b34 <prvSwitchTimerLists+0xcc>)
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	6013      	str	r3, [r2, #0]
}
 8007b26:	bf00      	nop
 8007b28:	3718      	adds	r7, #24
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	20000bac 	.word	0x20000bac
 8007b34:	20000bb0 	.word	0x20000bb0

08007b38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007b3e:	f000 f94d 	bl	8007ddc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007b42:	4b15      	ldr	r3, [pc, #84]	@ (8007b98 <prvCheckForValidListAndQueue+0x60>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d120      	bne.n	8007b8c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007b4a:	4814      	ldr	r0, [pc, #80]	@ (8007b9c <prvCheckForValidListAndQueue+0x64>)
 8007b4c:	f7fd fc6d 	bl	800542a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007b50:	4813      	ldr	r0, [pc, #76]	@ (8007ba0 <prvCheckForValidListAndQueue+0x68>)
 8007b52:	f7fd fc6a 	bl	800542a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007b56:	4b13      	ldr	r3, [pc, #76]	@ (8007ba4 <prvCheckForValidListAndQueue+0x6c>)
 8007b58:	4a10      	ldr	r2, [pc, #64]	@ (8007b9c <prvCheckForValidListAndQueue+0x64>)
 8007b5a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007b5c:	4b12      	ldr	r3, [pc, #72]	@ (8007ba8 <prvCheckForValidListAndQueue+0x70>)
 8007b5e:	4a10      	ldr	r2, [pc, #64]	@ (8007ba0 <prvCheckForValidListAndQueue+0x68>)
 8007b60:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007b62:	2300      	movs	r3, #0
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	4b11      	ldr	r3, [pc, #68]	@ (8007bac <prvCheckForValidListAndQueue+0x74>)
 8007b68:	4a11      	ldr	r2, [pc, #68]	@ (8007bb0 <prvCheckForValidListAndQueue+0x78>)
 8007b6a:	210c      	movs	r1, #12
 8007b6c:	200a      	movs	r0, #10
 8007b6e:	f7fd fd7d 	bl	800566c <xQueueGenericCreateStatic>
 8007b72:	4603      	mov	r3, r0
 8007b74:	4a08      	ldr	r2, [pc, #32]	@ (8007b98 <prvCheckForValidListAndQueue+0x60>)
 8007b76:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007b78:	4b07      	ldr	r3, [pc, #28]	@ (8007b98 <prvCheckForValidListAndQueue+0x60>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d005      	beq.n	8007b8c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007b80:	4b05      	ldr	r3, [pc, #20]	@ (8007b98 <prvCheckForValidListAndQueue+0x60>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	490b      	ldr	r1, [pc, #44]	@ (8007bb4 <prvCheckForValidListAndQueue+0x7c>)
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7fe fb62 	bl	8006250 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b8c:	f000 f95c 	bl	8007e48 <vPortExitCritical>
}
 8007b90:	bf00      	nop
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	20000bb4 	.word	0x20000bb4
 8007b9c:	20000b84 	.word	0x20000b84
 8007ba0:	20000b98 	.word	0x20000b98
 8007ba4:	20000bac 	.word	0x20000bac
 8007ba8:	20000bb0 	.word	0x20000bb0
 8007bac:	20000c38 	.word	0x20000c38
 8007bb0:	20000bc0 	.word	0x20000bc0
 8007bb4:	0800ae88 	.word	0x0800ae88

08007bb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	3b04      	subs	r3, #4
 8007bc8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007bd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	3b04      	subs	r3, #4
 8007bd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	f023 0201 	bic.w	r2, r3, #1
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	3b04      	subs	r3, #4
 8007be6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007be8:	4a0c      	ldr	r2, [pc, #48]	@ (8007c1c <pxPortInitialiseStack+0x64>)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	3b14      	subs	r3, #20
 8007bf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	3b04      	subs	r3, #4
 8007bfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f06f 0202 	mvn.w	r2, #2
 8007c06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	3b20      	subs	r3, #32
 8007c0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3714      	adds	r7, #20
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr
 8007c1c:	08007c21 	.word	0x08007c21

08007c20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007c26:	2300      	movs	r3, #0
 8007c28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007c2a:	4b15      	ldr	r3, [pc, #84]	@ (8007c80 <prvTaskExitError+0x60>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c32:	d00d      	beq.n	8007c50 <prvTaskExitError+0x30>
	__asm volatile
 8007c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c38:	b672      	cpsid	i
 8007c3a:	f383 8811 	msr	BASEPRI, r3
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f3bf 8f4f 	dsb	sy
 8007c46:	b662      	cpsie	i
 8007c48:	60fb      	str	r3, [r7, #12]
}
 8007c4a:	bf00      	nop
 8007c4c:	bf00      	nop
 8007c4e:	e7fd      	b.n	8007c4c <prvTaskExitError+0x2c>
	__asm volatile
 8007c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c54:	b672      	cpsid	i
 8007c56:	f383 8811 	msr	BASEPRI, r3
 8007c5a:	f3bf 8f6f 	isb	sy
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	b662      	cpsie	i
 8007c64:	60bb      	str	r3, [r7, #8]
}
 8007c66:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007c68:	bf00      	nop
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d0fc      	beq.n	8007c6a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c70:	bf00      	nop
 8007c72:	bf00      	nop
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	20000014 	.word	0x20000014
	...

08007c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c90:	4b07      	ldr	r3, [pc, #28]	@ (8007cb0 <pxCurrentTCBConst2>)
 8007c92:	6819      	ldr	r1, [r3, #0]
 8007c94:	6808      	ldr	r0, [r1, #0]
 8007c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c9a:	f380 8809 	msr	PSP, r0
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f04f 0000 	mov.w	r0, #0
 8007ca6:	f380 8811 	msr	BASEPRI, r0
 8007caa:	4770      	bx	lr
 8007cac:	f3af 8000 	nop.w

08007cb0 <pxCurrentTCBConst2>:
 8007cb0:	20000a58 	.word	0x20000a58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007cb4:	bf00      	nop
 8007cb6:	bf00      	nop

08007cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007cb8:	4808      	ldr	r0, [pc, #32]	@ (8007cdc <prvPortStartFirstTask+0x24>)
 8007cba:	6800      	ldr	r0, [r0, #0]
 8007cbc:	6800      	ldr	r0, [r0, #0]
 8007cbe:	f380 8808 	msr	MSP, r0
 8007cc2:	f04f 0000 	mov.w	r0, #0
 8007cc6:	f380 8814 	msr	CONTROL, r0
 8007cca:	b662      	cpsie	i
 8007ccc:	b661      	cpsie	f
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	f3bf 8f6f 	isb	sy
 8007cd6:	df00      	svc	0
 8007cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007cda:	bf00      	nop
 8007cdc:	e000ed08 	.word	0xe000ed08

08007ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ce6:	4b37      	ldr	r3, [pc, #220]	@ (8007dc4 <xPortStartScheduler+0xe4>)
 8007ce8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	22ff      	movs	r2, #255	@ 0xff
 8007cf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d00:	78fb      	ldrb	r3, [r7, #3]
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007d08:	b2da      	uxtb	r2, r3
 8007d0a:	4b2f      	ldr	r3, [pc, #188]	@ (8007dc8 <xPortStartScheduler+0xe8>)
 8007d0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007d0e:	4b2f      	ldr	r3, [pc, #188]	@ (8007dcc <xPortStartScheduler+0xec>)
 8007d10:	2207      	movs	r2, #7
 8007d12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d14:	e009      	b.n	8007d2a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007d16:	4b2d      	ldr	r3, [pc, #180]	@ (8007dcc <xPortStartScheduler+0xec>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	4a2b      	ldr	r2, [pc, #172]	@ (8007dcc <xPortStartScheduler+0xec>)
 8007d1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d20:	78fb      	ldrb	r3, [r7, #3]
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	005b      	lsls	r3, r3, #1
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d2a:	78fb      	ldrb	r3, [r7, #3]
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d32:	2b80      	cmp	r3, #128	@ 0x80
 8007d34:	d0ef      	beq.n	8007d16 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d36:	4b25      	ldr	r3, [pc, #148]	@ (8007dcc <xPortStartScheduler+0xec>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f1c3 0307 	rsb	r3, r3, #7
 8007d3e:	2b04      	cmp	r3, #4
 8007d40:	d00d      	beq.n	8007d5e <xPortStartScheduler+0x7e>
	__asm volatile
 8007d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d46:	b672      	cpsid	i
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	b662      	cpsie	i
 8007d56:	60bb      	str	r3, [r7, #8]
}
 8007d58:	bf00      	nop
 8007d5a:	bf00      	nop
 8007d5c:	e7fd      	b.n	8007d5a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8007dcc <xPortStartScheduler+0xec>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	021b      	lsls	r3, r3, #8
 8007d64:	4a19      	ldr	r2, [pc, #100]	@ (8007dcc <xPortStartScheduler+0xec>)
 8007d66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d68:	4b18      	ldr	r3, [pc, #96]	@ (8007dcc <xPortStartScheduler+0xec>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007d70:	4a16      	ldr	r2, [pc, #88]	@ (8007dcc <xPortStartScheduler+0xec>)
 8007d72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	b2da      	uxtb	r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d7c:	4b14      	ldr	r3, [pc, #80]	@ (8007dd0 <xPortStartScheduler+0xf0>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a13      	ldr	r2, [pc, #76]	@ (8007dd0 <xPortStartScheduler+0xf0>)
 8007d82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007d86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d88:	4b11      	ldr	r3, [pc, #68]	@ (8007dd0 <xPortStartScheduler+0xf0>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a10      	ldr	r2, [pc, #64]	@ (8007dd0 <xPortStartScheduler+0xf0>)
 8007d8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007d92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d94:	f000 f8dc 	bl	8007f50 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d98:	4b0e      	ldr	r3, [pc, #56]	@ (8007dd4 <xPortStartScheduler+0xf4>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d9e:	f000 f8fb 	bl	8007f98 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007da2:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd8 <xPortStartScheduler+0xf8>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a0c      	ldr	r2, [pc, #48]	@ (8007dd8 <xPortStartScheduler+0xf8>)
 8007da8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007dac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007dae:	f7ff ff83 	bl	8007cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007db2:	f7fe fe89 	bl	8006ac8 <vTaskSwitchContext>
	prvTaskExitError();
 8007db6:	f7ff ff33 	bl	8007c20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	e000e400 	.word	0xe000e400
 8007dc8:	20000c80 	.word	0x20000c80
 8007dcc:	20000c84 	.word	0x20000c84
 8007dd0:	e000ed20 	.word	0xe000ed20
 8007dd4:	20000014 	.word	0x20000014
 8007dd8:	e000ef34 	.word	0xe000ef34

08007ddc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
	__asm volatile
 8007de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de6:	b672      	cpsid	i
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f3bf 8f6f 	isb	sy
 8007df0:	f3bf 8f4f 	dsb	sy
 8007df4:	b662      	cpsie	i
 8007df6:	607b      	str	r3, [r7, #4]
}
 8007df8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007dfa:	4b11      	ldr	r3, [pc, #68]	@ (8007e40 <vPortEnterCritical+0x64>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	4a0f      	ldr	r2, [pc, #60]	@ (8007e40 <vPortEnterCritical+0x64>)
 8007e02:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007e04:	4b0e      	ldr	r3, [pc, #56]	@ (8007e40 <vPortEnterCritical+0x64>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d112      	bne.n	8007e32 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8007e44 <vPortEnterCritical+0x68>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00d      	beq.n	8007e32 <vPortEnterCritical+0x56>
	__asm volatile
 8007e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e1a:	b672      	cpsid	i
 8007e1c:	f383 8811 	msr	BASEPRI, r3
 8007e20:	f3bf 8f6f 	isb	sy
 8007e24:	f3bf 8f4f 	dsb	sy
 8007e28:	b662      	cpsie	i
 8007e2a:	603b      	str	r3, [r7, #0]
}
 8007e2c:	bf00      	nop
 8007e2e:	bf00      	nop
 8007e30:	e7fd      	b.n	8007e2e <vPortEnterCritical+0x52>
	}
}
 8007e32:	bf00      	nop
 8007e34:	370c      	adds	r7, #12
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	20000014 	.word	0x20000014
 8007e44:	e000ed04 	.word	0xe000ed04

08007e48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007e4e:	4b13      	ldr	r3, [pc, #76]	@ (8007e9c <vPortExitCritical+0x54>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10d      	bne.n	8007e72 <vPortExitCritical+0x2a>
	__asm volatile
 8007e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e5a:	b672      	cpsid	i
 8007e5c:	f383 8811 	msr	BASEPRI, r3
 8007e60:	f3bf 8f6f 	isb	sy
 8007e64:	f3bf 8f4f 	dsb	sy
 8007e68:	b662      	cpsie	i
 8007e6a:	607b      	str	r3, [r7, #4]
}
 8007e6c:	bf00      	nop
 8007e6e:	bf00      	nop
 8007e70:	e7fd      	b.n	8007e6e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007e72:	4b0a      	ldr	r3, [pc, #40]	@ (8007e9c <vPortExitCritical+0x54>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	3b01      	subs	r3, #1
 8007e78:	4a08      	ldr	r2, [pc, #32]	@ (8007e9c <vPortExitCritical+0x54>)
 8007e7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e7c:	4b07      	ldr	r3, [pc, #28]	@ (8007e9c <vPortExitCritical+0x54>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d105      	bne.n	8007e90 <vPortExitCritical+0x48>
 8007e84:	2300      	movs	r3, #0
 8007e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	f383 8811 	msr	BASEPRI, r3
}
 8007e8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e90:	bf00      	nop
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	20000014 	.word	0x20000014

08007ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ea0:	f3ef 8009 	mrs	r0, PSP
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	4b15      	ldr	r3, [pc, #84]	@ (8007f00 <pxCurrentTCBConst>)
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	f01e 0f10 	tst.w	lr, #16
 8007eb0:	bf08      	it	eq
 8007eb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007eb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eba:	6010      	str	r0, [r2, #0]
 8007ebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ec0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007ec4:	b672      	cpsid	i
 8007ec6:	f380 8811 	msr	BASEPRI, r0
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	b662      	cpsie	i
 8007ed4:	f7fe fdf8 	bl	8006ac8 <vTaskSwitchContext>
 8007ed8:	f04f 0000 	mov.w	r0, #0
 8007edc:	f380 8811 	msr	BASEPRI, r0
 8007ee0:	bc09      	pop	{r0, r3}
 8007ee2:	6819      	ldr	r1, [r3, #0]
 8007ee4:	6808      	ldr	r0, [r1, #0]
 8007ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eea:	f01e 0f10 	tst.w	lr, #16
 8007eee:	bf08      	it	eq
 8007ef0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ef4:	f380 8809 	msr	PSP, r0
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop

08007f00 <pxCurrentTCBConst>:
 8007f00:	20000a58 	.word	0x20000a58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007f04:	bf00      	nop
 8007f06:	bf00      	nop

08007f08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f12:	b672      	cpsid	i
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	b662      	cpsie	i
 8007f22:	607b      	str	r3, [r7, #4]
}
 8007f24:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007f26:	f7fe fd13 	bl	8006950 <xTaskIncrementTick>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d003      	beq.n	8007f38 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f30:	4b06      	ldr	r3, [pc, #24]	@ (8007f4c <SysTick_Handler+0x44>)
 8007f32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f36:	601a      	str	r2, [r3, #0]
 8007f38:	2300      	movs	r3, #0
 8007f3a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	f383 8811 	msr	BASEPRI, r3
}
 8007f42:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f44:	bf00      	nop
 8007f46:	3708      	adds	r7, #8
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	e000ed04 	.word	0xe000ed04

08007f50 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f50:	b480      	push	{r7}
 8007f52:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f54:	4b0b      	ldr	r3, [pc, #44]	@ (8007f84 <vPortSetupTimerInterrupt+0x34>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8007f88 <vPortSetupTimerInterrupt+0x38>)
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f60:	4b0a      	ldr	r3, [pc, #40]	@ (8007f8c <vPortSetupTimerInterrupt+0x3c>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a0a      	ldr	r2, [pc, #40]	@ (8007f90 <vPortSetupTimerInterrupt+0x40>)
 8007f66:	fba2 2303 	umull	r2, r3, r2, r3
 8007f6a:	099b      	lsrs	r3, r3, #6
 8007f6c:	4a09      	ldr	r2, [pc, #36]	@ (8007f94 <vPortSetupTimerInterrupt+0x44>)
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f72:	4b04      	ldr	r3, [pc, #16]	@ (8007f84 <vPortSetupTimerInterrupt+0x34>)
 8007f74:	2207      	movs	r2, #7
 8007f76:	601a      	str	r2, [r3, #0]
}
 8007f78:	bf00      	nop
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	e000e010 	.word	0xe000e010
 8007f88:	e000e018 	.word	0xe000e018
 8007f8c:	20000008 	.word	0x20000008
 8007f90:	10624dd3 	.word	0x10624dd3
 8007f94:	e000e014 	.word	0xe000e014

08007f98 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f98:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007fa8 <vPortEnableVFP+0x10>
 8007f9c:	6801      	ldr	r1, [r0, #0]
 8007f9e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007fa2:	6001      	str	r1, [r0, #0]
 8007fa4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007fa6:	bf00      	nop
 8007fa8:	e000ed88 	.word	0xe000ed88

08007fac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007fb2:	f3ef 8305 	mrs	r3, IPSR
 8007fb6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2b0f      	cmp	r3, #15
 8007fbc:	d917      	bls.n	8007fee <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007fbe:	4a1a      	ldr	r2, [pc, #104]	@ (8008028 <vPortValidateInterruptPriority+0x7c>)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007fc8:	4b18      	ldr	r3, [pc, #96]	@ (800802c <vPortValidateInterruptPriority+0x80>)
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	7afa      	ldrb	r2, [r7, #11]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d20d      	bcs.n	8007fee <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8007fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd6:	b672      	cpsid	i
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	b662      	cpsie	i
 8007fe6:	607b      	str	r3, [r7, #4]
}
 8007fe8:	bf00      	nop
 8007fea:	bf00      	nop
 8007fec:	e7fd      	b.n	8007fea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007fee:	4b10      	ldr	r3, [pc, #64]	@ (8008030 <vPortValidateInterruptPriority+0x84>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8008034 <vPortValidateInterruptPriority+0x88>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d90d      	bls.n	800801a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8007ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008002:	b672      	cpsid	i
 8008004:	f383 8811 	msr	BASEPRI, r3
 8008008:	f3bf 8f6f 	isb	sy
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	b662      	cpsie	i
 8008012:	603b      	str	r3, [r7, #0]
}
 8008014:	bf00      	nop
 8008016:	bf00      	nop
 8008018:	e7fd      	b.n	8008016 <vPortValidateInterruptPriority+0x6a>
	}
 800801a:	bf00      	nop
 800801c:	3714      	adds	r7, #20
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	e000e3f0 	.word	0xe000e3f0
 800802c:	20000c80 	.word	0x20000c80
 8008030:	e000ed0c 	.word	0xe000ed0c
 8008034:	20000c84 	.word	0x20000c84

08008038 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b08a      	sub	sp, #40	@ 0x28
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008040:	2300      	movs	r3, #0
 8008042:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008044:	f7fe fbc6 	bl	80067d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008048:	4b5d      	ldr	r3, [pc, #372]	@ (80081c0 <pvPortMalloc+0x188>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d101      	bne.n	8008054 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008050:	f000 f920 	bl	8008294 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008054:	4b5b      	ldr	r3, [pc, #364]	@ (80081c4 <pvPortMalloc+0x18c>)
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4013      	ands	r3, r2
 800805c:	2b00      	cmp	r3, #0
 800805e:	f040 8094 	bne.w	800818a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d020      	beq.n	80080aa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8008068:	2208      	movs	r2, #8
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4413      	add	r3, r2
 800806e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f003 0307 	and.w	r3, r3, #7
 8008076:	2b00      	cmp	r3, #0
 8008078:	d017      	beq.n	80080aa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f023 0307 	bic.w	r3, r3, #7
 8008080:	3308      	adds	r3, #8
 8008082:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f003 0307 	and.w	r3, r3, #7
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00d      	beq.n	80080aa <pvPortMalloc+0x72>
	__asm volatile
 800808e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008092:	b672      	cpsid	i
 8008094:	f383 8811 	msr	BASEPRI, r3
 8008098:	f3bf 8f6f 	isb	sy
 800809c:	f3bf 8f4f 	dsb	sy
 80080a0:	b662      	cpsie	i
 80080a2:	617b      	str	r3, [r7, #20]
}
 80080a4:	bf00      	nop
 80080a6:	bf00      	nop
 80080a8:	e7fd      	b.n	80080a6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d06c      	beq.n	800818a <pvPortMalloc+0x152>
 80080b0:	4b45      	ldr	r3, [pc, #276]	@ (80081c8 <pvPortMalloc+0x190>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d867      	bhi.n	800818a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80080ba:	4b44      	ldr	r3, [pc, #272]	@ (80081cc <pvPortMalloc+0x194>)
 80080bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80080be:	4b43      	ldr	r3, [pc, #268]	@ (80081cc <pvPortMalloc+0x194>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80080c4:	e004      	b.n	80080d0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80080c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80080ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80080d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d903      	bls.n	80080e2 <pvPortMalloc+0xaa>
 80080da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1f1      	bne.n	80080c6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80080e2:	4b37      	ldr	r3, [pc, #220]	@ (80081c0 <pvPortMalloc+0x188>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d04e      	beq.n	800818a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80080ec:	6a3b      	ldr	r3, [r7, #32]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2208      	movs	r2, #8
 80080f2:	4413      	add	r3, r2
 80080f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80080f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	6a3b      	ldr	r3, [r7, #32]
 80080fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80080fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008100:	685a      	ldr	r2, [r3, #4]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	1ad2      	subs	r2, r2, r3
 8008106:	2308      	movs	r3, #8
 8008108:	005b      	lsls	r3, r3, #1
 800810a:	429a      	cmp	r2, r3
 800810c:	d922      	bls.n	8008154 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800810e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4413      	add	r3, r2
 8008114:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	f003 0307 	and.w	r3, r3, #7
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00d      	beq.n	800813c <pvPortMalloc+0x104>
	__asm volatile
 8008120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008124:	b672      	cpsid	i
 8008126:	f383 8811 	msr	BASEPRI, r3
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	b662      	cpsie	i
 8008134:	613b      	str	r3, [r7, #16]
}
 8008136:	bf00      	nop
 8008138:	bf00      	nop
 800813a:	e7fd      	b.n	8008138 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800813c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813e:	685a      	ldr	r2, [r3, #4]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	1ad2      	subs	r2, r2, r3
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800814e:	69b8      	ldr	r0, [r7, #24]
 8008150:	f000 f902 	bl	8008358 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008154:	4b1c      	ldr	r3, [pc, #112]	@ (80081c8 <pvPortMalloc+0x190>)
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	1ad3      	subs	r3, r2, r3
 800815e:	4a1a      	ldr	r2, [pc, #104]	@ (80081c8 <pvPortMalloc+0x190>)
 8008160:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008162:	4b19      	ldr	r3, [pc, #100]	@ (80081c8 <pvPortMalloc+0x190>)
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	4b1a      	ldr	r3, [pc, #104]	@ (80081d0 <pvPortMalloc+0x198>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	429a      	cmp	r2, r3
 800816c:	d203      	bcs.n	8008176 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800816e:	4b16      	ldr	r3, [pc, #88]	@ (80081c8 <pvPortMalloc+0x190>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a17      	ldr	r2, [pc, #92]	@ (80081d0 <pvPortMalloc+0x198>)
 8008174:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008178:	685a      	ldr	r2, [r3, #4]
 800817a:	4b12      	ldr	r3, [pc, #72]	@ (80081c4 <pvPortMalloc+0x18c>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	431a      	orrs	r2, r3
 8008180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008182:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008186:	2200      	movs	r2, #0
 8008188:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800818a:	f7fe fb31 	bl	80067f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	f003 0307 	and.w	r3, r3, #7
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00d      	beq.n	80081b4 <pvPortMalloc+0x17c>
	__asm volatile
 8008198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800819c:	b672      	cpsid	i
 800819e:	f383 8811 	msr	BASEPRI, r3
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	f3bf 8f4f 	dsb	sy
 80081aa:	b662      	cpsie	i
 80081ac:	60fb      	str	r3, [r7, #12]
}
 80081ae:	bf00      	nop
 80081b0:	bf00      	nop
 80081b2:	e7fd      	b.n	80081b0 <pvPortMalloc+0x178>
	return pvReturn;
 80081b4:	69fb      	ldr	r3, [r7, #28]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3728      	adds	r7, #40	@ 0x28
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	20004890 	.word	0x20004890
 80081c4:	2000489c 	.word	0x2000489c
 80081c8:	20004894 	.word	0x20004894
 80081cc:	20004888 	.word	0x20004888
 80081d0:	20004898 	.word	0x20004898

080081d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d04e      	beq.n	8008284 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80081e6:	2308      	movs	r3, #8
 80081e8:	425b      	negs	r3, r3
 80081ea:	697a      	ldr	r2, [r7, #20]
 80081ec:	4413      	add	r3, r2
 80081ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	685a      	ldr	r2, [r3, #4]
 80081f8:	4b24      	ldr	r3, [pc, #144]	@ (800828c <vPortFree+0xb8>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4013      	ands	r3, r2
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d10d      	bne.n	800821e <vPortFree+0x4a>
	__asm volatile
 8008202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008206:	b672      	cpsid	i
 8008208:	f383 8811 	msr	BASEPRI, r3
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	b662      	cpsie	i
 8008216:	60fb      	str	r3, [r7, #12]
}
 8008218:	bf00      	nop
 800821a:	bf00      	nop
 800821c:	e7fd      	b.n	800821a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00d      	beq.n	8008242 <vPortFree+0x6e>
	__asm volatile
 8008226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800822a:	b672      	cpsid	i
 800822c:	f383 8811 	msr	BASEPRI, r3
 8008230:	f3bf 8f6f 	isb	sy
 8008234:	f3bf 8f4f 	dsb	sy
 8008238:	b662      	cpsie	i
 800823a:	60bb      	str	r3, [r7, #8]
}
 800823c:	bf00      	nop
 800823e:	bf00      	nop
 8008240:	e7fd      	b.n	800823e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	685a      	ldr	r2, [r3, #4]
 8008246:	4b11      	ldr	r3, [pc, #68]	@ (800828c <vPortFree+0xb8>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4013      	ands	r3, r2
 800824c:	2b00      	cmp	r3, #0
 800824e:	d019      	beq.n	8008284 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d115      	bne.n	8008284 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	685a      	ldr	r2, [r3, #4]
 800825c:	4b0b      	ldr	r3, [pc, #44]	@ (800828c <vPortFree+0xb8>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	43db      	mvns	r3, r3
 8008262:	401a      	ands	r2, r3
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008268:	f7fe fab4 	bl	80067d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	685a      	ldr	r2, [r3, #4]
 8008270:	4b07      	ldr	r3, [pc, #28]	@ (8008290 <vPortFree+0xbc>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4413      	add	r3, r2
 8008276:	4a06      	ldr	r2, [pc, #24]	@ (8008290 <vPortFree+0xbc>)
 8008278:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800827a:	6938      	ldr	r0, [r7, #16]
 800827c:	f000 f86c 	bl	8008358 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008280:	f7fe fab6 	bl	80067f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008284:	bf00      	nop
 8008286:	3718      	adds	r7, #24
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}
 800828c:	2000489c 	.word	0x2000489c
 8008290:	20004894 	.word	0x20004894

08008294 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800829a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800829e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80082a0:	4b27      	ldr	r3, [pc, #156]	@ (8008340 <prvHeapInit+0xac>)
 80082a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f003 0307 	and.w	r3, r3, #7
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00c      	beq.n	80082c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	3307      	adds	r3, #7
 80082b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f023 0307 	bic.w	r3, r3, #7
 80082ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80082bc:	68ba      	ldr	r2, [r7, #8]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	4a1f      	ldr	r2, [pc, #124]	@ (8008340 <prvHeapInit+0xac>)
 80082c4:	4413      	add	r3, r2
 80082c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80082cc:	4a1d      	ldr	r2, [pc, #116]	@ (8008344 <prvHeapInit+0xb0>)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80082d2:	4b1c      	ldr	r3, [pc, #112]	@ (8008344 <prvHeapInit+0xb0>)
 80082d4:	2200      	movs	r2, #0
 80082d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	4413      	add	r3, r2
 80082de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80082e0:	2208      	movs	r2, #8
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	1a9b      	subs	r3, r3, r2
 80082e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f023 0307 	bic.w	r3, r3, #7
 80082ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	4a15      	ldr	r2, [pc, #84]	@ (8008348 <prvHeapInit+0xb4>)
 80082f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80082f6:	4b14      	ldr	r3, [pc, #80]	@ (8008348 <prvHeapInit+0xb4>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2200      	movs	r2, #0
 80082fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80082fe:	4b12      	ldr	r3, [pc, #72]	@ (8008348 <prvHeapInit+0xb4>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2200      	movs	r2, #0
 8008304:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	1ad2      	subs	r2, r2, r3
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008314:	4b0c      	ldr	r3, [pc, #48]	@ (8008348 <prvHeapInit+0xb4>)
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	4a0a      	ldr	r2, [pc, #40]	@ (800834c <prvHeapInit+0xb8>)
 8008322:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	4a09      	ldr	r2, [pc, #36]	@ (8008350 <prvHeapInit+0xbc>)
 800832a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800832c:	4b09      	ldr	r3, [pc, #36]	@ (8008354 <prvHeapInit+0xc0>)
 800832e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008332:	601a      	str	r2, [r3, #0]
}
 8008334:	bf00      	nop
 8008336:	3714      	adds	r7, #20
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr
 8008340:	20000c88 	.word	0x20000c88
 8008344:	20004888 	.word	0x20004888
 8008348:	20004890 	.word	0x20004890
 800834c:	20004898 	.word	0x20004898
 8008350:	20004894 	.word	0x20004894
 8008354:	2000489c 	.word	0x2000489c

08008358 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008358:	b480      	push	{r7}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008360:	4b28      	ldr	r3, [pc, #160]	@ (8008404 <prvInsertBlockIntoFreeList+0xac>)
 8008362:	60fb      	str	r3, [r7, #12]
 8008364:	e002      	b.n	800836c <prvInsertBlockIntoFreeList+0x14>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	60fb      	str	r3, [r7, #12]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	429a      	cmp	r2, r3
 8008374:	d8f7      	bhi.n	8008366 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	4413      	add	r3, r2
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	429a      	cmp	r2, r3
 8008386:	d108      	bne.n	800839a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	685a      	ldr	r2, [r3, #4]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	441a      	add	r2, r3
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	68ba      	ldr	r2, [r7, #8]
 80083a4:	441a      	add	r2, r3
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d118      	bne.n	80083e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	4b15      	ldr	r3, [pc, #84]	@ (8008408 <prvInsertBlockIntoFreeList+0xb0>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d00d      	beq.n	80083d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	441a      	add	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	e008      	b.n	80083e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80083d6:	4b0c      	ldr	r3, [pc, #48]	@ (8008408 <prvInsertBlockIntoFreeList+0xb0>)
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	601a      	str	r2, [r3, #0]
 80083de:	e003      	b.n	80083e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d002      	beq.n	80083f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083f6:	bf00      	nop
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	20004888 	.word	0x20004888
 8008408:	20004890 	.word	0x20004890

0800840c <__cvt>:
 800840c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008410:	ec57 6b10 	vmov	r6, r7, d0
 8008414:	2f00      	cmp	r7, #0
 8008416:	460c      	mov	r4, r1
 8008418:	4619      	mov	r1, r3
 800841a:	463b      	mov	r3, r7
 800841c:	bfbb      	ittet	lt
 800841e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008422:	461f      	movlt	r7, r3
 8008424:	2300      	movge	r3, #0
 8008426:	232d      	movlt	r3, #45	@ 0x2d
 8008428:	700b      	strb	r3, [r1, #0]
 800842a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800842c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008430:	4691      	mov	r9, r2
 8008432:	f023 0820 	bic.w	r8, r3, #32
 8008436:	bfbc      	itt	lt
 8008438:	4632      	movlt	r2, r6
 800843a:	4616      	movlt	r6, r2
 800843c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008440:	d005      	beq.n	800844e <__cvt+0x42>
 8008442:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008446:	d100      	bne.n	800844a <__cvt+0x3e>
 8008448:	3401      	adds	r4, #1
 800844a:	2102      	movs	r1, #2
 800844c:	e000      	b.n	8008450 <__cvt+0x44>
 800844e:	2103      	movs	r1, #3
 8008450:	ab03      	add	r3, sp, #12
 8008452:	9301      	str	r3, [sp, #4]
 8008454:	ab02      	add	r3, sp, #8
 8008456:	9300      	str	r3, [sp, #0]
 8008458:	ec47 6b10 	vmov	d0, r6, r7
 800845c:	4653      	mov	r3, sl
 800845e:	4622      	mov	r2, r4
 8008460:	f000 feb2 	bl	80091c8 <_dtoa_r>
 8008464:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008468:	4605      	mov	r5, r0
 800846a:	d119      	bne.n	80084a0 <__cvt+0x94>
 800846c:	f019 0f01 	tst.w	r9, #1
 8008470:	d00e      	beq.n	8008490 <__cvt+0x84>
 8008472:	eb00 0904 	add.w	r9, r0, r4
 8008476:	2200      	movs	r2, #0
 8008478:	2300      	movs	r3, #0
 800847a:	4630      	mov	r0, r6
 800847c:	4639      	mov	r1, r7
 800847e:	f7f8 fb43 	bl	8000b08 <__aeabi_dcmpeq>
 8008482:	b108      	cbz	r0, 8008488 <__cvt+0x7c>
 8008484:	f8cd 900c 	str.w	r9, [sp, #12]
 8008488:	2230      	movs	r2, #48	@ 0x30
 800848a:	9b03      	ldr	r3, [sp, #12]
 800848c:	454b      	cmp	r3, r9
 800848e:	d31e      	bcc.n	80084ce <__cvt+0xc2>
 8008490:	9b03      	ldr	r3, [sp, #12]
 8008492:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008494:	1b5b      	subs	r3, r3, r5
 8008496:	4628      	mov	r0, r5
 8008498:	6013      	str	r3, [r2, #0]
 800849a:	b004      	add	sp, #16
 800849c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80084a4:	eb00 0904 	add.w	r9, r0, r4
 80084a8:	d1e5      	bne.n	8008476 <__cvt+0x6a>
 80084aa:	7803      	ldrb	r3, [r0, #0]
 80084ac:	2b30      	cmp	r3, #48	@ 0x30
 80084ae:	d10a      	bne.n	80084c6 <__cvt+0xba>
 80084b0:	2200      	movs	r2, #0
 80084b2:	2300      	movs	r3, #0
 80084b4:	4630      	mov	r0, r6
 80084b6:	4639      	mov	r1, r7
 80084b8:	f7f8 fb26 	bl	8000b08 <__aeabi_dcmpeq>
 80084bc:	b918      	cbnz	r0, 80084c6 <__cvt+0xba>
 80084be:	f1c4 0401 	rsb	r4, r4, #1
 80084c2:	f8ca 4000 	str.w	r4, [sl]
 80084c6:	f8da 3000 	ldr.w	r3, [sl]
 80084ca:	4499      	add	r9, r3
 80084cc:	e7d3      	b.n	8008476 <__cvt+0x6a>
 80084ce:	1c59      	adds	r1, r3, #1
 80084d0:	9103      	str	r1, [sp, #12]
 80084d2:	701a      	strb	r2, [r3, #0]
 80084d4:	e7d9      	b.n	800848a <__cvt+0x7e>

080084d6 <__exponent>:
 80084d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084d8:	2900      	cmp	r1, #0
 80084da:	bfba      	itte	lt
 80084dc:	4249      	neglt	r1, r1
 80084de:	232d      	movlt	r3, #45	@ 0x2d
 80084e0:	232b      	movge	r3, #43	@ 0x2b
 80084e2:	2909      	cmp	r1, #9
 80084e4:	7002      	strb	r2, [r0, #0]
 80084e6:	7043      	strb	r3, [r0, #1]
 80084e8:	dd29      	ble.n	800853e <__exponent+0x68>
 80084ea:	f10d 0307 	add.w	r3, sp, #7
 80084ee:	461d      	mov	r5, r3
 80084f0:	270a      	movs	r7, #10
 80084f2:	461a      	mov	r2, r3
 80084f4:	fbb1 f6f7 	udiv	r6, r1, r7
 80084f8:	fb07 1416 	mls	r4, r7, r6, r1
 80084fc:	3430      	adds	r4, #48	@ 0x30
 80084fe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008502:	460c      	mov	r4, r1
 8008504:	2c63      	cmp	r4, #99	@ 0x63
 8008506:	f103 33ff 	add.w	r3, r3, #4294967295
 800850a:	4631      	mov	r1, r6
 800850c:	dcf1      	bgt.n	80084f2 <__exponent+0x1c>
 800850e:	3130      	adds	r1, #48	@ 0x30
 8008510:	1e94      	subs	r4, r2, #2
 8008512:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008516:	1c41      	adds	r1, r0, #1
 8008518:	4623      	mov	r3, r4
 800851a:	42ab      	cmp	r3, r5
 800851c:	d30a      	bcc.n	8008534 <__exponent+0x5e>
 800851e:	f10d 0309 	add.w	r3, sp, #9
 8008522:	1a9b      	subs	r3, r3, r2
 8008524:	42ac      	cmp	r4, r5
 8008526:	bf88      	it	hi
 8008528:	2300      	movhi	r3, #0
 800852a:	3302      	adds	r3, #2
 800852c:	4403      	add	r3, r0
 800852e:	1a18      	subs	r0, r3, r0
 8008530:	b003      	add	sp, #12
 8008532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008534:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008538:	f801 6f01 	strb.w	r6, [r1, #1]!
 800853c:	e7ed      	b.n	800851a <__exponent+0x44>
 800853e:	2330      	movs	r3, #48	@ 0x30
 8008540:	3130      	adds	r1, #48	@ 0x30
 8008542:	7083      	strb	r3, [r0, #2]
 8008544:	70c1      	strb	r1, [r0, #3]
 8008546:	1d03      	adds	r3, r0, #4
 8008548:	e7f1      	b.n	800852e <__exponent+0x58>
	...

0800854c <_printf_float>:
 800854c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008550:	b08d      	sub	sp, #52	@ 0x34
 8008552:	460c      	mov	r4, r1
 8008554:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008558:	4616      	mov	r6, r2
 800855a:	461f      	mov	r7, r3
 800855c:	4605      	mov	r5, r0
 800855e:	f000 fccd 	bl	8008efc <_localeconv_r>
 8008562:	6803      	ldr	r3, [r0, #0]
 8008564:	9304      	str	r3, [sp, #16]
 8008566:	4618      	mov	r0, r3
 8008568:	f7f7 fea2 	bl	80002b0 <strlen>
 800856c:	2300      	movs	r3, #0
 800856e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008570:	f8d8 3000 	ldr.w	r3, [r8]
 8008574:	9005      	str	r0, [sp, #20]
 8008576:	3307      	adds	r3, #7
 8008578:	f023 0307 	bic.w	r3, r3, #7
 800857c:	f103 0208 	add.w	r2, r3, #8
 8008580:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008584:	f8d4 b000 	ldr.w	fp, [r4]
 8008588:	f8c8 2000 	str.w	r2, [r8]
 800858c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008590:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008594:	9307      	str	r3, [sp, #28]
 8008596:	f8cd 8018 	str.w	r8, [sp, #24]
 800859a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800859e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085a2:	4b9c      	ldr	r3, [pc, #624]	@ (8008814 <_printf_float+0x2c8>)
 80085a4:	f04f 32ff 	mov.w	r2, #4294967295
 80085a8:	f7f8 fae0 	bl	8000b6c <__aeabi_dcmpun>
 80085ac:	bb70      	cbnz	r0, 800860c <_printf_float+0xc0>
 80085ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085b2:	4b98      	ldr	r3, [pc, #608]	@ (8008814 <_printf_float+0x2c8>)
 80085b4:	f04f 32ff 	mov.w	r2, #4294967295
 80085b8:	f7f8 faba 	bl	8000b30 <__aeabi_dcmple>
 80085bc:	bb30      	cbnz	r0, 800860c <_printf_float+0xc0>
 80085be:	2200      	movs	r2, #0
 80085c0:	2300      	movs	r3, #0
 80085c2:	4640      	mov	r0, r8
 80085c4:	4649      	mov	r1, r9
 80085c6:	f7f8 faa9 	bl	8000b1c <__aeabi_dcmplt>
 80085ca:	b110      	cbz	r0, 80085d2 <_printf_float+0x86>
 80085cc:	232d      	movs	r3, #45	@ 0x2d
 80085ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085d2:	4a91      	ldr	r2, [pc, #580]	@ (8008818 <_printf_float+0x2cc>)
 80085d4:	4b91      	ldr	r3, [pc, #580]	@ (800881c <_printf_float+0x2d0>)
 80085d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80085da:	bf94      	ite	ls
 80085dc:	4690      	movls	r8, r2
 80085de:	4698      	movhi	r8, r3
 80085e0:	2303      	movs	r3, #3
 80085e2:	6123      	str	r3, [r4, #16]
 80085e4:	f02b 0304 	bic.w	r3, fp, #4
 80085e8:	6023      	str	r3, [r4, #0]
 80085ea:	f04f 0900 	mov.w	r9, #0
 80085ee:	9700      	str	r7, [sp, #0]
 80085f0:	4633      	mov	r3, r6
 80085f2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80085f4:	4621      	mov	r1, r4
 80085f6:	4628      	mov	r0, r5
 80085f8:	f000 f9d2 	bl	80089a0 <_printf_common>
 80085fc:	3001      	adds	r0, #1
 80085fe:	f040 808d 	bne.w	800871c <_printf_float+0x1d0>
 8008602:	f04f 30ff 	mov.w	r0, #4294967295
 8008606:	b00d      	add	sp, #52	@ 0x34
 8008608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800860c:	4642      	mov	r2, r8
 800860e:	464b      	mov	r3, r9
 8008610:	4640      	mov	r0, r8
 8008612:	4649      	mov	r1, r9
 8008614:	f7f8 faaa 	bl	8000b6c <__aeabi_dcmpun>
 8008618:	b140      	cbz	r0, 800862c <_printf_float+0xe0>
 800861a:	464b      	mov	r3, r9
 800861c:	2b00      	cmp	r3, #0
 800861e:	bfbc      	itt	lt
 8008620:	232d      	movlt	r3, #45	@ 0x2d
 8008622:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008626:	4a7e      	ldr	r2, [pc, #504]	@ (8008820 <_printf_float+0x2d4>)
 8008628:	4b7e      	ldr	r3, [pc, #504]	@ (8008824 <_printf_float+0x2d8>)
 800862a:	e7d4      	b.n	80085d6 <_printf_float+0x8a>
 800862c:	6863      	ldr	r3, [r4, #4]
 800862e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008632:	9206      	str	r2, [sp, #24]
 8008634:	1c5a      	adds	r2, r3, #1
 8008636:	d13b      	bne.n	80086b0 <_printf_float+0x164>
 8008638:	2306      	movs	r3, #6
 800863a:	6063      	str	r3, [r4, #4]
 800863c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008640:	2300      	movs	r3, #0
 8008642:	6022      	str	r2, [r4, #0]
 8008644:	9303      	str	r3, [sp, #12]
 8008646:	ab0a      	add	r3, sp, #40	@ 0x28
 8008648:	e9cd a301 	strd	sl, r3, [sp, #4]
 800864c:	ab09      	add	r3, sp, #36	@ 0x24
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	6861      	ldr	r1, [r4, #4]
 8008652:	ec49 8b10 	vmov	d0, r8, r9
 8008656:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800865a:	4628      	mov	r0, r5
 800865c:	f7ff fed6 	bl	800840c <__cvt>
 8008660:	9b06      	ldr	r3, [sp, #24]
 8008662:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008664:	2b47      	cmp	r3, #71	@ 0x47
 8008666:	4680      	mov	r8, r0
 8008668:	d129      	bne.n	80086be <_printf_float+0x172>
 800866a:	1cc8      	adds	r0, r1, #3
 800866c:	db02      	blt.n	8008674 <_printf_float+0x128>
 800866e:	6863      	ldr	r3, [r4, #4]
 8008670:	4299      	cmp	r1, r3
 8008672:	dd41      	ble.n	80086f8 <_printf_float+0x1ac>
 8008674:	f1aa 0a02 	sub.w	sl, sl, #2
 8008678:	fa5f fa8a 	uxtb.w	sl, sl
 800867c:	3901      	subs	r1, #1
 800867e:	4652      	mov	r2, sl
 8008680:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008684:	9109      	str	r1, [sp, #36]	@ 0x24
 8008686:	f7ff ff26 	bl	80084d6 <__exponent>
 800868a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800868c:	1813      	adds	r3, r2, r0
 800868e:	2a01      	cmp	r2, #1
 8008690:	4681      	mov	r9, r0
 8008692:	6123      	str	r3, [r4, #16]
 8008694:	dc02      	bgt.n	800869c <_printf_float+0x150>
 8008696:	6822      	ldr	r2, [r4, #0]
 8008698:	07d2      	lsls	r2, r2, #31
 800869a:	d501      	bpl.n	80086a0 <_printf_float+0x154>
 800869c:	3301      	adds	r3, #1
 800869e:	6123      	str	r3, [r4, #16]
 80086a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d0a2      	beq.n	80085ee <_printf_float+0xa2>
 80086a8:	232d      	movs	r3, #45	@ 0x2d
 80086aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086ae:	e79e      	b.n	80085ee <_printf_float+0xa2>
 80086b0:	9a06      	ldr	r2, [sp, #24]
 80086b2:	2a47      	cmp	r2, #71	@ 0x47
 80086b4:	d1c2      	bne.n	800863c <_printf_float+0xf0>
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1c0      	bne.n	800863c <_printf_float+0xf0>
 80086ba:	2301      	movs	r3, #1
 80086bc:	e7bd      	b.n	800863a <_printf_float+0xee>
 80086be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80086c2:	d9db      	bls.n	800867c <_printf_float+0x130>
 80086c4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80086c8:	d118      	bne.n	80086fc <_printf_float+0x1b0>
 80086ca:	2900      	cmp	r1, #0
 80086cc:	6863      	ldr	r3, [r4, #4]
 80086ce:	dd0b      	ble.n	80086e8 <_printf_float+0x19c>
 80086d0:	6121      	str	r1, [r4, #16]
 80086d2:	b913      	cbnz	r3, 80086da <_printf_float+0x18e>
 80086d4:	6822      	ldr	r2, [r4, #0]
 80086d6:	07d0      	lsls	r0, r2, #31
 80086d8:	d502      	bpl.n	80086e0 <_printf_float+0x194>
 80086da:	3301      	adds	r3, #1
 80086dc:	440b      	add	r3, r1
 80086de:	6123      	str	r3, [r4, #16]
 80086e0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80086e2:	f04f 0900 	mov.w	r9, #0
 80086e6:	e7db      	b.n	80086a0 <_printf_float+0x154>
 80086e8:	b913      	cbnz	r3, 80086f0 <_printf_float+0x1a4>
 80086ea:	6822      	ldr	r2, [r4, #0]
 80086ec:	07d2      	lsls	r2, r2, #31
 80086ee:	d501      	bpl.n	80086f4 <_printf_float+0x1a8>
 80086f0:	3302      	adds	r3, #2
 80086f2:	e7f4      	b.n	80086de <_printf_float+0x192>
 80086f4:	2301      	movs	r3, #1
 80086f6:	e7f2      	b.n	80086de <_printf_float+0x192>
 80086f8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80086fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086fe:	4299      	cmp	r1, r3
 8008700:	db05      	blt.n	800870e <_printf_float+0x1c2>
 8008702:	6823      	ldr	r3, [r4, #0]
 8008704:	6121      	str	r1, [r4, #16]
 8008706:	07d8      	lsls	r0, r3, #31
 8008708:	d5ea      	bpl.n	80086e0 <_printf_float+0x194>
 800870a:	1c4b      	adds	r3, r1, #1
 800870c:	e7e7      	b.n	80086de <_printf_float+0x192>
 800870e:	2900      	cmp	r1, #0
 8008710:	bfd4      	ite	le
 8008712:	f1c1 0202 	rsble	r2, r1, #2
 8008716:	2201      	movgt	r2, #1
 8008718:	4413      	add	r3, r2
 800871a:	e7e0      	b.n	80086de <_printf_float+0x192>
 800871c:	6823      	ldr	r3, [r4, #0]
 800871e:	055a      	lsls	r2, r3, #21
 8008720:	d407      	bmi.n	8008732 <_printf_float+0x1e6>
 8008722:	6923      	ldr	r3, [r4, #16]
 8008724:	4642      	mov	r2, r8
 8008726:	4631      	mov	r1, r6
 8008728:	4628      	mov	r0, r5
 800872a:	47b8      	blx	r7
 800872c:	3001      	adds	r0, #1
 800872e:	d12b      	bne.n	8008788 <_printf_float+0x23c>
 8008730:	e767      	b.n	8008602 <_printf_float+0xb6>
 8008732:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008736:	f240 80dd 	bls.w	80088f4 <_printf_float+0x3a8>
 800873a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800873e:	2200      	movs	r2, #0
 8008740:	2300      	movs	r3, #0
 8008742:	f7f8 f9e1 	bl	8000b08 <__aeabi_dcmpeq>
 8008746:	2800      	cmp	r0, #0
 8008748:	d033      	beq.n	80087b2 <_printf_float+0x266>
 800874a:	4a37      	ldr	r2, [pc, #220]	@ (8008828 <_printf_float+0x2dc>)
 800874c:	2301      	movs	r3, #1
 800874e:	4631      	mov	r1, r6
 8008750:	4628      	mov	r0, r5
 8008752:	47b8      	blx	r7
 8008754:	3001      	adds	r0, #1
 8008756:	f43f af54 	beq.w	8008602 <_printf_float+0xb6>
 800875a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800875e:	4543      	cmp	r3, r8
 8008760:	db02      	blt.n	8008768 <_printf_float+0x21c>
 8008762:	6823      	ldr	r3, [r4, #0]
 8008764:	07d8      	lsls	r0, r3, #31
 8008766:	d50f      	bpl.n	8008788 <_printf_float+0x23c>
 8008768:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800876c:	4631      	mov	r1, r6
 800876e:	4628      	mov	r0, r5
 8008770:	47b8      	blx	r7
 8008772:	3001      	adds	r0, #1
 8008774:	f43f af45 	beq.w	8008602 <_printf_float+0xb6>
 8008778:	f04f 0900 	mov.w	r9, #0
 800877c:	f108 38ff 	add.w	r8, r8, #4294967295
 8008780:	f104 0a1a 	add.w	sl, r4, #26
 8008784:	45c8      	cmp	r8, r9
 8008786:	dc09      	bgt.n	800879c <_printf_float+0x250>
 8008788:	6823      	ldr	r3, [r4, #0]
 800878a:	079b      	lsls	r3, r3, #30
 800878c:	f100 8103 	bmi.w	8008996 <_printf_float+0x44a>
 8008790:	68e0      	ldr	r0, [r4, #12]
 8008792:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008794:	4298      	cmp	r0, r3
 8008796:	bfb8      	it	lt
 8008798:	4618      	movlt	r0, r3
 800879a:	e734      	b.n	8008606 <_printf_float+0xba>
 800879c:	2301      	movs	r3, #1
 800879e:	4652      	mov	r2, sl
 80087a0:	4631      	mov	r1, r6
 80087a2:	4628      	mov	r0, r5
 80087a4:	47b8      	blx	r7
 80087a6:	3001      	adds	r0, #1
 80087a8:	f43f af2b 	beq.w	8008602 <_printf_float+0xb6>
 80087ac:	f109 0901 	add.w	r9, r9, #1
 80087b0:	e7e8      	b.n	8008784 <_printf_float+0x238>
 80087b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	dc39      	bgt.n	800882c <_printf_float+0x2e0>
 80087b8:	4a1b      	ldr	r2, [pc, #108]	@ (8008828 <_printf_float+0x2dc>)
 80087ba:	2301      	movs	r3, #1
 80087bc:	4631      	mov	r1, r6
 80087be:	4628      	mov	r0, r5
 80087c0:	47b8      	blx	r7
 80087c2:	3001      	adds	r0, #1
 80087c4:	f43f af1d 	beq.w	8008602 <_printf_float+0xb6>
 80087c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80087cc:	ea59 0303 	orrs.w	r3, r9, r3
 80087d0:	d102      	bne.n	80087d8 <_printf_float+0x28c>
 80087d2:	6823      	ldr	r3, [r4, #0]
 80087d4:	07d9      	lsls	r1, r3, #31
 80087d6:	d5d7      	bpl.n	8008788 <_printf_float+0x23c>
 80087d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087dc:	4631      	mov	r1, r6
 80087de:	4628      	mov	r0, r5
 80087e0:	47b8      	blx	r7
 80087e2:	3001      	adds	r0, #1
 80087e4:	f43f af0d 	beq.w	8008602 <_printf_float+0xb6>
 80087e8:	f04f 0a00 	mov.w	sl, #0
 80087ec:	f104 0b1a 	add.w	fp, r4, #26
 80087f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087f2:	425b      	negs	r3, r3
 80087f4:	4553      	cmp	r3, sl
 80087f6:	dc01      	bgt.n	80087fc <_printf_float+0x2b0>
 80087f8:	464b      	mov	r3, r9
 80087fa:	e793      	b.n	8008724 <_printf_float+0x1d8>
 80087fc:	2301      	movs	r3, #1
 80087fe:	465a      	mov	r2, fp
 8008800:	4631      	mov	r1, r6
 8008802:	4628      	mov	r0, r5
 8008804:	47b8      	blx	r7
 8008806:	3001      	adds	r0, #1
 8008808:	f43f aefb 	beq.w	8008602 <_printf_float+0xb6>
 800880c:	f10a 0a01 	add.w	sl, sl, #1
 8008810:	e7ee      	b.n	80087f0 <_printf_float+0x2a4>
 8008812:	bf00      	nop
 8008814:	7fefffff 	.word	0x7fefffff
 8008818:	0800aea8 	.word	0x0800aea8
 800881c:	0800aeac 	.word	0x0800aeac
 8008820:	0800aeb0 	.word	0x0800aeb0
 8008824:	0800aeb4 	.word	0x0800aeb4
 8008828:	0800aeb8 	.word	0x0800aeb8
 800882c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800882e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008832:	4553      	cmp	r3, sl
 8008834:	bfa8      	it	ge
 8008836:	4653      	movge	r3, sl
 8008838:	2b00      	cmp	r3, #0
 800883a:	4699      	mov	r9, r3
 800883c:	dc36      	bgt.n	80088ac <_printf_float+0x360>
 800883e:	f04f 0b00 	mov.w	fp, #0
 8008842:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008846:	f104 021a 	add.w	r2, r4, #26
 800884a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800884c:	9306      	str	r3, [sp, #24]
 800884e:	eba3 0309 	sub.w	r3, r3, r9
 8008852:	455b      	cmp	r3, fp
 8008854:	dc31      	bgt.n	80088ba <_printf_float+0x36e>
 8008856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008858:	459a      	cmp	sl, r3
 800885a:	dc3a      	bgt.n	80088d2 <_printf_float+0x386>
 800885c:	6823      	ldr	r3, [r4, #0]
 800885e:	07da      	lsls	r2, r3, #31
 8008860:	d437      	bmi.n	80088d2 <_printf_float+0x386>
 8008862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008864:	ebaa 0903 	sub.w	r9, sl, r3
 8008868:	9b06      	ldr	r3, [sp, #24]
 800886a:	ebaa 0303 	sub.w	r3, sl, r3
 800886e:	4599      	cmp	r9, r3
 8008870:	bfa8      	it	ge
 8008872:	4699      	movge	r9, r3
 8008874:	f1b9 0f00 	cmp.w	r9, #0
 8008878:	dc33      	bgt.n	80088e2 <_printf_float+0x396>
 800887a:	f04f 0800 	mov.w	r8, #0
 800887e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008882:	f104 0b1a 	add.w	fp, r4, #26
 8008886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008888:	ebaa 0303 	sub.w	r3, sl, r3
 800888c:	eba3 0309 	sub.w	r3, r3, r9
 8008890:	4543      	cmp	r3, r8
 8008892:	f77f af79 	ble.w	8008788 <_printf_float+0x23c>
 8008896:	2301      	movs	r3, #1
 8008898:	465a      	mov	r2, fp
 800889a:	4631      	mov	r1, r6
 800889c:	4628      	mov	r0, r5
 800889e:	47b8      	blx	r7
 80088a0:	3001      	adds	r0, #1
 80088a2:	f43f aeae 	beq.w	8008602 <_printf_float+0xb6>
 80088a6:	f108 0801 	add.w	r8, r8, #1
 80088aa:	e7ec      	b.n	8008886 <_printf_float+0x33a>
 80088ac:	4642      	mov	r2, r8
 80088ae:	4631      	mov	r1, r6
 80088b0:	4628      	mov	r0, r5
 80088b2:	47b8      	blx	r7
 80088b4:	3001      	adds	r0, #1
 80088b6:	d1c2      	bne.n	800883e <_printf_float+0x2f2>
 80088b8:	e6a3      	b.n	8008602 <_printf_float+0xb6>
 80088ba:	2301      	movs	r3, #1
 80088bc:	4631      	mov	r1, r6
 80088be:	4628      	mov	r0, r5
 80088c0:	9206      	str	r2, [sp, #24]
 80088c2:	47b8      	blx	r7
 80088c4:	3001      	adds	r0, #1
 80088c6:	f43f ae9c 	beq.w	8008602 <_printf_float+0xb6>
 80088ca:	9a06      	ldr	r2, [sp, #24]
 80088cc:	f10b 0b01 	add.w	fp, fp, #1
 80088d0:	e7bb      	b.n	800884a <_printf_float+0x2fe>
 80088d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088d6:	4631      	mov	r1, r6
 80088d8:	4628      	mov	r0, r5
 80088da:	47b8      	blx	r7
 80088dc:	3001      	adds	r0, #1
 80088de:	d1c0      	bne.n	8008862 <_printf_float+0x316>
 80088e0:	e68f      	b.n	8008602 <_printf_float+0xb6>
 80088e2:	9a06      	ldr	r2, [sp, #24]
 80088e4:	464b      	mov	r3, r9
 80088e6:	4442      	add	r2, r8
 80088e8:	4631      	mov	r1, r6
 80088ea:	4628      	mov	r0, r5
 80088ec:	47b8      	blx	r7
 80088ee:	3001      	adds	r0, #1
 80088f0:	d1c3      	bne.n	800887a <_printf_float+0x32e>
 80088f2:	e686      	b.n	8008602 <_printf_float+0xb6>
 80088f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80088f8:	f1ba 0f01 	cmp.w	sl, #1
 80088fc:	dc01      	bgt.n	8008902 <_printf_float+0x3b6>
 80088fe:	07db      	lsls	r3, r3, #31
 8008900:	d536      	bpl.n	8008970 <_printf_float+0x424>
 8008902:	2301      	movs	r3, #1
 8008904:	4642      	mov	r2, r8
 8008906:	4631      	mov	r1, r6
 8008908:	4628      	mov	r0, r5
 800890a:	47b8      	blx	r7
 800890c:	3001      	adds	r0, #1
 800890e:	f43f ae78 	beq.w	8008602 <_printf_float+0xb6>
 8008912:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008916:	4631      	mov	r1, r6
 8008918:	4628      	mov	r0, r5
 800891a:	47b8      	blx	r7
 800891c:	3001      	adds	r0, #1
 800891e:	f43f ae70 	beq.w	8008602 <_printf_float+0xb6>
 8008922:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008926:	2200      	movs	r2, #0
 8008928:	2300      	movs	r3, #0
 800892a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800892e:	f7f8 f8eb 	bl	8000b08 <__aeabi_dcmpeq>
 8008932:	b9c0      	cbnz	r0, 8008966 <_printf_float+0x41a>
 8008934:	4653      	mov	r3, sl
 8008936:	f108 0201 	add.w	r2, r8, #1
 800893a:	4631      	mov	r1, r6
 800893c:	4628      	mov	r0, r5
 800893e:	47b8      	blx	r7
 8008940:	3001      	adds	r0, #1
 8008942:	d10c      	bne.n	800895e <_printf_float+0x412>
 8008944:	e65d      	b.n	8008602 <_printf_float+0xb6>
 8008946:	2301      	movs	r3, #1
 8008948:	465a      	mov	r2, fp
 800894a:	4631      	mov	r1, r6
 800894c:	4628      	mov	r0, r5
 800894e:	47b8      	blx	r7
 8008950:	3001      	adds	r0, #1
 8008952:	f43f ae56 	beq.w	8008602 <_printf_float+0xb6>
 8008956:	f108 0801 	add.w	r8, r8, #1
 800895a:	45d0      	cmp	r8, sl
 800895c:	dbf3      	blt.n	8008946 <_printf_float+0x3fa>
 800895e:	464b      	mov	r3, r9
 8008960:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008964:	e6df      	b.n	8008726 <_printf_float+0x1da>
 8008966:	f04f 0800 	mov.w	r8, #0
 800896a:	f104 0b1a 	add.w	fp, r4, #26
 800896e:	e7f4      	b.n	800895a <_printf_float+0x40e>
 8008970:	2301      	movs	r3, #1
 8008972:	4642      	mov	r2, r8
 8008974:	e7e1      	b.n	800893a <_printf_float+0x3ee>
 8008976:	2301      	movs	r3, #1
 8008978:	464a      	mov	r2, r9
 800897a:	4631      	mov	r1, r6
 800897c:	4628      	mov	r0, r5
 800897e:	47b8      	blx	r7
 8008980:	3001      	adds	r0, #1
 8008982:	f43f ae3e 	beq.w	8008602 <_printf_float+0xb6>
 8008986:	f108 0801 	add.w	r8, r8, #1
 800898a:	68e3      	ldr	r3, [r4, #12]
 800898c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800898e:	1a5b      	subs	r3, r3, r1
 8008990:	4543      	cmp	r3, r8
 8008992:	dcf0      	bgt.n	8008976 <_printf_float+0x42a>
 8008994:	e6fc      	b.n	8008790 <_printf_float+0x244>
 8008996:	f04f 0800 	mov.w	r8, #0
 800899a:	f104 0919 	add.w	r9, r4, #25
 800899e:	e7f4      	b.n	800898a <_printf_float+0x43e>

080089a0 <_printf_common>:
 80089a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a4:	4616      	mov	r6, r2
 80089a6:	4698      	mov	r8, r3
 80089a8:	688a      	ldr	r2, [r1, #8]
 80089aa:	690b      	ldr	r3, [r1, #16]
 80089ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80089b0:	4293      	cmp	r3, r2
 80089b2:	bfb8      	it	lt
 80089b4:	4613      	movlt	r3, r2
 80089b6:	6033      	str	r3, [r6, #0]
 80089b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80089bc:	4607      	mov	r7, r0
 80089be:	460c      	mov	r4, r1
 80089c0:	b10a      	cbz	r2, 80089c6 <_printf_common+0x26>
 80089c2:	3301      	adds	r3, #1
 80089c4:	6033      	str	r3, [r6, #0]
 80089c6:	6823      	ldr	r3, [r4, #0]
 80089c8:	0699      	lsls	r1, r3, #26
 80089ca:	bf42      	ittt	mi
 80089cc:	6833      	ldrmi	r3, [r6, #0]
 80089ce:	3302      	addmi	r3, #2
 80089d0:	6033      	strmi	r3, [r6, #0]
 80089d2:	6825      	ldr	r5, [r4, #0]
 80089d4:	f015 0506 	ands.w	r5, r5, #6
 80089d8:	d106      	bne.n	80089e8 <_printf_common+0x48>
 80089da:	f104 0a19 	add.w	sl, r4, #25
 80089de:	68e3      	ldr	r3, [r4, #12]
 80089e0:	6832      	ldr	r2, [r6, #0]
 80089e2:	1a9b      	subs	r3, r3, r2
 80089e4:	42ab      	cmp	r3, r5
 80089e6:	dc26      	bgt.n	8008a36 <_printf_common+0x96>
 80089e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80089ec:	6822      	ldr	r2, [r4, #0]
 80089ee:	3b00      	subs	r3, #0
 80089f0:	bf18      	it	ne
 80089f2:	2301      	movne	r3, #1
 80089f4:	0692      	lsls	r2, r2, #26
 80089f6:	d42b      	bmi.n	8008a50 <_printf_common+0xb0>
 80089f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80089fc:	4641      	mov	r1, r8
 80089fe:	4638      	mov	r0, r7
 8008a00:	47c8      	blx	r9
 8008a02:	3001      	adds	r0, #1
 8008a04:	d01e      	beq.n	8008a44 <_printf_common+0xa4>
 8008a06:	6823      	ldr	r3, [r4, #0]
 8008a08:	6922      	ldr	r2, [r4, #16]
 8008a0a:	f003 0306 	and.w	r3, r3, #6
 8008a0e:	2b04      	cmp	r3, #4
 8008a10:	bf02      	ittt	eq
 8008a12:	68e5      	ldreq	r5, [r4, #12]
 8008a14:	6833      	ldreq	r3, [r6, #0]
 8008a16:	1aed      	subeq	r5, r5, r3
 8008a18:	68a3      	ldr	r3, [r4, #8]
 8008a1a:	bf0c      	ite	eq
 8008a1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a20:	2500      	movne	r5, #0
 8008a22:	4293      	cmp	r3, r2
 8008a24:	bfc4      	itt	gt
 8008a26:	1a9b      	subgt	r3, r3, r2
 8008a28:	18ed      	addgt	r5, r5, r3
 8008a2a:	2600      	movs	r6, #0
 8008a2c:	341a      	adds	r4, #26
 8008a2e:	42b5      	cmp	r5, r6
 8008a30:	d11a      	bne.n	8008a68 <_printf_common+0xc8>
 8008a32:	2000      	movs	r0, #0
 8008a34:	e008      	b.n	8008a48 <_printf_common+0xa8>
 8008a36:	2301      	movs	r3, #1
 8008a38:	4652      	mov	r2, sl
 8008a3a:	4641      	mov	r1, r8
 8008a3c:	4638      	mov	r0, r7
 8008a3e:	47c8      	blx	r9
 8008a40:	3001      	adds	r0, #1
 8008a42:	d103      	bne.n	8008a4c <_printf_common+0xac>
 8008a44:	f04f 30ff 	mov.w	r0, #4294967295
 8008a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a4c:	3501      	adds	r5, #1
 8008a4e:	e7c6      	b.n	80089de <_printf_common+0x3e>
 8008a50:	18e1      	adds	r1, r4, r3
 8008a52:	1c5a      	adds	r2, r3, #1
 8008a54:	2030      	movs	r0, #48	@ 0x30
 8008a56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a5a:	4422      	add	r2, r4
 8008a5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a64:	3302      	adds	r3, #2
 8008a66:	e7c7      	b.n	80089f8 <_printf_common+0x58>
 8008a68:	2301      	movs	r3, #1
 8008a6a:	4622      	mov	r2, r4
 8008a6c:	4641      	mov	r1, r8
 8008a6e:	4638      	mov	r0, r7
 8008a70:	47c8      	blx	r9
 8008a72:	3001      	adds	r0, #1
 8008a74:	d0e6      	beq.n	8008a44 <_printf_common+0xa4>
 8008a76:	3601      	adds	r6, #1
 8008a78:	e7d9      	b.n	8008a2e <_printf_common+0x8e>
	...

08008a7c <_printf_i>:
 8008a7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a80:	7e0f      	ldrb	r7, [r1, #24]
 8008a82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a84:	2f78      	cmp	r7, #120	@ 0x78
 8008a86:	4691      	mov	r9, r2
 8008a88:	4680      	mov	r8, r0
 8008a8a:	460c      	mov	r4, r1
 8008a8c:	469a      	mov	sl, r3
 8008a8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a92:	d807      	bhi.n	8008aa4 <_printf_i+0x28>
 8008a94:	2f62      	cmp	r7, #98	@ 0x62
 8008a96:	d80a      	bhi.n	8008aae <_printf_i+0x32>
 8008a98:	2f00      	cmp	r7, #0
 8008a9a:	f000 80d2 	beq.w	8008c42 <_printf_i+0x1c6>
 8008a9e:	2f58      	cmp	r7, #88	@ 0x58
 8008aa0:	f000 80b9 	beq.w	8008c16 <_printf_i+0x19a>
 8008aa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008aa8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008aac:	e03a      	b.n	8008b24 <_printf_i+0xa8>
 8008aae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008ab2:	2b15      	cmp	r3, #21
 8008ab4:	d8f6      	bhi.n	8008aa4 <_printf_i+0x28>
 8008ab6:	a101      	add	r1, pc, #4	@ (adr r1, 8008abc <_printf_i+0x40>)
 8008ab8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008abc:	08008b15 	.word	0x08008b15
 8008ac0:	08008b29 	.word	0x08008b29
 8008ac4:	08008aa5 	.word	0x08008aa5
 8008ac8:	08008aa5 	.word	0x08008aa5
 8008acc:	08008aa5 	.word	0x08008aa5
 8008ad0:	08008aa5 	.word	0x08008aa5
 8008ad4:	08008b29 	.word	0x08008b29
 8008ad8:	08008aa5 	.word	0x08008aa5
 8008adc:	08008aa5 	.word	0x08008aa5
 8008ae0:	08008aa5 	.word	0x08008aa5
 8008ae4:	08008aa5 	.word	0x08008aa5
 8008ae8:	08008c29 	.word	0x08008c29
 8008aec:	08008b53 	.word	0x08008b53
 8008af0:	08008be3 	.word	0x08008be3
 8008af4:	08008aa5 	.word	0x08008aa5
 8008af8:	08008aa5 	.word	0x08008aa5
 8008afc:	08008c4b 	.word	0x08008c4b
 8008b00:	08008aa5 	.word	0x08008aa5
 8008b04:	08008b53 	.word	0x08008b53
 8008b08:	08008aa5 	.word	0x08008aa5
 8008b0c:	08008aa5 	.word	0x08008aa5
 8008b10:	08008beb 	.word	0x08008beb
 8008b14:	6833      	ldr	r3, [r6, #0]
 8008b16:	1d1a      	adds	r2, r3, #4
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	6032      	str	r2, [r6, #0]
 8008b1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b24:	2301      	movs	r3, #1
 8008b26:	e09d      	b.n	8008c64 <_printf_i+0x1e8>
 8008b28:	6833      	ldr	r3, [r6, #0]
 8008b2a:	6820      	ldr	r0, [r4, #0]
 8008b2c:	1d19      	adds	r1, r3, #4
 8008b2e:	6031      	str	r1, [r6, #0]
 8008b30:	0606      	lsls	r6, r0, #24
 8008b32:	d501      	bpl.n	8008b38 <_printf_i+0xbc>
 8008b34:	681d      	ldr	r5, [r3, #0]
 8008b36:	e003      	b.n	8008b40 <_printf_i+0xc4>
 8008b38:	0645      	lsls	r5, r0, #25
 8008b3a:	d5fb      	bpl.n	8008b34 <_printf_i+0xb8>
 8008b3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b40:	2d00      	cmp	r5, #0
 8008b42:	da03      	bge.n	8008b4c <_printf_i+0xd0>
 8008b44:	232d      	movs	r3, #45	@ 0x2d
 8008b46:	426d      	negs	r5, r5
 8008b48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b4c:	4859      	ldr	r0, [pc, #356]	@ (8008cb4 <_printf_i+0x238>)
 8008b4e:	230a      	movs	r3, #10
 8008b50:	e011      	b.n	8008b76 <_printf_i+0xfa>
 8008b52:	6821      	ldr	r1, [r4, #0]
 8008b54:	6833      	ldr	r3, [r6, #0]
 8008b56:	0608      	lsls	r0, r1, #24
 8008b58:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b5c:	d402      	bmi.n	8008b64 <_printf_i+0xe8>
 8008b5e:	0649      	lsls	r1, r1, #25
 8008b60:	bf48      	it	mi
 8008b62:	b2ad      	uxthmi	r5, r5
 8008b64:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b66:	4853      	ldr	r0, [pc, #332]	@ (8008cb4 <_printf_i+0x238>)
 8008b68:	6033      	str	r3, [r6, #0]
 8008b6a:	bf14      	ite	ne
 8008b6c:	230a      	movne	r3, #10
 8008b6e:	2308      	moveq	r3, #8
 8008b70:	2100      	movs	r1, #0
 8008b72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b76:	6866      	ldr	r6, [r4, #4]
 8008b78:	60a6      	str	r6, [r4, #8]
 8008b7a:	2e00      	cmp	r6, #0
 8008b7c:	bfa2      	ittt	ge
 8008b7e:	6821      	ldrge	r1, [r4, #0]
 8008b80:	f021 0104 	bicge.w	r1, r1, #4
 8008b84:	6021      	strge	r1, [r4, #0]
 8008b86:	b90d      	cbnz	r5, 8008b8c <_printf_i+0x110>
 8008b88:	2e00      	cmp	r6, #0
 8008b8a:	d04b      	beq.n	8008c24 <_printf_i+0x1a8>
 8008b8c:	4616      	mov	r6, r2
 8008b8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b92:	fb03 5711 	mls	r7, r3, r1, r5
 8008b96:	5dc7      	ldrb	r7, [r0, r7]
 8008b98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b9c:	462f      	mov	r7, r5
 8008b9e:	42bb      	cmp	r3, r7
 8008ba0:	460d      	mov	r5, r1
 8008ba2:	d9f4      	bls.n	8008b8e <_printf_i+0x112>
 8008ba4:	2b08      	cmp	r3, #8
 8008ba6:	d10b      	bne.n	8008bc0 <_printf_i+0x144>
 8008ba8:	6823      	ldr	r3, [r4, #0]
 8008baa:	07df      	lsls	r7, r3, #31
 8008bac:	d508      	bpl.n	8008bc0 <_printf_i+0x144>
 8008bae:	6923      	ldr	r3, [r4, #16]
 8008bb0:	6861      	ldr	r1, [r4, #4]
 8008bb2:	4299      	cmp	r1, r3
 8008bb4:	bfde      	ittt	le
 8008bb6:	2330      	movle	r3, #48	@ 0x30
 8008bb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008bbc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008bc0:	1b92      	subs	r2, r2, r6
 8008bc2:	6122      	str	r2, [r4, #16]
 8008bc4:	f8cd a000 	str.w	sl, [sp]
 8008bc8:	464b      	mov	r3, r9
 8008bca:	aa03      	add	r2, sp, #12
 8008bcc:	4621      	mov	r1, r4
 8008bce:	4640      	mov	r0, r8
 8008bd0:	f7ff fee6 	bl	80089a0 <_printf_common>
 8008bd4:	3001      	adds	r0, #1
 8008bd6:	d14a      	bne.n	8008c6e <_printf_i+0x1f2>
 8008bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bdc:	b004      	add	sp, #16
 8008bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be2:	6823      	ldr	r3, [r4, #0]
 8008be4:	f043 0320 	orr.w	r3, r3, #32
 8008be8:	6023      	str	r3, [r4, #0]
 8008bea:	4833      	ldr	r0, [pc, #204]	@ (8008cb8 <_printf_i+0x23c>)
 8008bec:	2778      	movs	r7, #120	@ 0x78
 8008bee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008bf2:	6823      	ldr	r3, [r4, #0]
 8008bf4:	6831      	ldr	r1, [r6, #0]
 8008bf6:	061f      	lsls	r7, r3, #24
 8008bf8:	f851 5b04 	ldr.w	r5, [r1], #4
 8008bfc:	d402      	bmi.n	8008c04 <_printf_i+0x188>
 8008bfe:	065f      	lsls	r7, r3, #25
 8008c00:	bf48      	it	mi
 8008c02:	b2ad      	uxthmi	r5, r5
 8008c04:	6031      	str	r1, [r6, #0]
 8008c06:	07d9      	lsls	r1, r3, #31
 8008c08:	bf44      	itt	mi
 8008c0a:	f043 0320 	orrmi.w	r3, r3, #32
 8008c0e:	6023      	strmi	r3, [r4, #0]
 8008c10:	b11d      	cbz	r5, 8008c1a <_printf_i+0x19e>
 8008c12:	2310      	movs	r3, #16
 8008c14:	e7ac      	b.n	8008b70 <_printf_i+0xf4>
 8008c16:	4827      	ldr	r0, [pc, #156]	@ (8008cb4 <_printf_i+0x238>)
 8008c18:	e7e9      	b.n	8008bee <_printf_i+0x172>
 8008c1a:	6823      	ldr	r3, [r4, #0]
 8008c1c:	f023 0320 	bic.w	r3, r3, #32
 8008c20:	6023      	str	r3, [r4, #0]
 8008c22:	e7f6      	b.n	8008c12 <_printf_i+0x196>
 8008c24:	4616      	mov	r6, r2
 8008c26:	e7bd      	b.n	8008ba4 <_printf_i+0x128>
 8008c28:	6833      	ldr	r3, [r6, #0]
 8008c2a:	6825      	ldr	r5, [r4, #0]
 8008c2c:	6961      	ldr	r1, [r4, #20]
 8008c2e:	1d18      	adds	r0, r3, #4
 8008c30:	6030      	str	r0, [r6, #0]
 8008c32:	062e      	lsls	r6, r5, #24
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	d501      	bpl.n	8008c3c <_printf_i+0x1c0>
 8008c38:	6019      	str	r1, [r3, #0]
 8008c3a:	e002      	b.n	8008c42 <_printf_i+0x1c6>
 8008c3c:	0668      	lsls	r0, r5, #25
 8008c3e:	d5fb      	bpl.n	8008c38 <_printf_i+0x1bc>
 8008c40:	8019      	strh	r1, [r3, #0]
 8008c42:	2300      	movs	r3, #0
 8008c44:	6123      	str	r3, [r4, #16]
 8008c46:	4616      	mov	r6, r2
 8008c48:	e7bc      	b.n	8008bc4 <_printf_i+0x148>
 8008c4a:	6833      	ldr	r3, [r6, #0]
 8008c4c:	1d1a      	adds	r2, r3, #4
 8008c4e:	6032      	str	r2, [r6, #0]
 8008c50:	681e      	ldr	r6, [r3, #0]
 8008c52:	6862      	ldr	r2, [r4, #4]
 8008c54:	2100      	movs	r1, #0
 8008c56:	4630      	mov	r0, r6
 8008c58:	f7f7 fada 	bl	8000210 <memchr>
 8008c5c:	b108      	cbz	r0, 8008c62 <_printf_i+0x1e6>
 8008c5e:	1b80      	subs	r0, r0, r6
 8008c60:	6060      	str	r0, [r4, #4]
 8008c62:	6863      	ldr	r3, [r4, #4]
 8008c64:	6123      	str	r3, [r4, #16]
 8008c66:	2300      	movs	r3, #0
 8008c68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c6c:	e7aa      	b.n	8008bc4 <_printf_i+0x148>
 8008c6e:	6923      	ldr	r3, [r4, #16]
 8008c70:	4632      	mov	r2, r6
 8008c72:	4649      	mov	r1, r9
 8008c74:	4640      	mov	r0, r8
 8008c76:	47d0      	blx	sl
 8008c78:	3001      	adds	r0, #1
 8008c7a:	d0ad      	beq.n	8008bd8 <_printf_i+0x15c>
 8008c7c:	6823      	ldr	r3, [r4, #0]
 8008c7e:	079b      	lsls	r3, r3, #30
 8008c80:	d413      	bmi.n	8008caa <_printf_i+0x22e>
 8008c82:	68e0      	ldr	r0, [r4, #12]
 8008c84:	9b03      	ldr	r3, [sp, #12]
 8008c86:	4298      	cmp	r0, r3
 8008c88:	bfb8      	it	lt
 8008c8a:	4618      	movlt	r0, r3
 8008c8c:	e7a6      	b.n	8008bdc <_printf_i+0x160>
 8008c8e:	2301      	movs	r3, #1
 8008c90:	4632      	mov	r2, r6
 8008c92:	4649      	mov	r1, r9
 8008c94:	4640      	mov	r0, r8
 8008c96:	47d0      	blx	sl
 8008c98:	3001      	adds	r0, #1
 8008c9a:	d09d      	beq.n	8008bd8 <_printf_i+0x15c>
 8008c9c:	3501      	adds	r5, #1
 8008c9e:	68e3      	ldr	r3, [r4, #12]
 8008ca0:	9903      	ldr	r1, [sp, #12]
 8008ca2:	1a5b      	subs	r3, r3, r1
 8008ca4:	42ab      	cmp	r3, r5
 8008ca6:	dcf2      	bgt.n	8008c8e <_printf_i+0x212>
 8008ca8:	e7eb      	b.n	8008c82 <_printf_i+0x206>
 8008caa:	2500      	movs	r5, #0
 8008cac:	f104 0619 	add.w	r6, r4, #25
 8008cb0:	e7f5      	b.n	8008c9e <_printf_i+0x222>
 8008cb2:	bf00      	nop
 8008cb4:	0800aeba 	.word	0x0800aeba
 8008cb8:	0800aecb 	.word	0x0800aecb

08008cbc <std>:
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	b510      	push	{r4, lr}
 8008cc0:	4604      	mov	r4, r0
 8008cc2:	e9c0 3300 	strd	r3, r3, [r0]
 8008cc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cca:	6083      	str	r3, [r0, #8]
 8008ccc:	8181      	strh	r1, [r0, #12]
 8008cce:	6643      	str	r3, [r0, #100]	@ 0x64
 8008cd0:	81c2      	strh	r2, [r0, #14]
 8008cd2:	6183      	str	r3, [r0, #24]
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	2208      	movs	r2, #8
 8008cd8:	305c      	adds	r0, #92	@ 0x5c
 8008cda:	f000 f906 	bl	8008eea <memset>
 8008cde:	4b0d      	ldr	r3, [pc, #52]	@ (8008d14 <std+0x58>)
 8008ce0:	6263      	str	r3, [r4, #36]	@ 0x24
 8008ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8008d18 <std+0x5c>)
 8008ce4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8008d1c <std+0x60>)
 8008ce8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008cea:	4b0d      	ldr	r3, [pc, #52]	@ (8008d20 <std+0x64>)
 8008cec:	6323      	str	r3, [r4, #48]	@ 0x30
 8008cee:	4b0d      	ldr	r3, [pc, #52]	@ (8008d24 <std+0x68>)
 8008cf0:	6224      	str	r4, [r4, #32]
 8008cf2:	429c      	cmp	r4, r3
 8008cf4:	d006      	beq.n	8008d04 <std+0x48>
 8008cf6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008cfa:	4294      	cmp	r4, r2
 8008cfc:	d002      	beq.n	8008d04 <std+0x48>
 8008cfe:	33d0      	adds	r3, #208	@ 0xd0
 8008d00:	429c      	cmp	r4, r3
 8008d02:	d105      	bne.n	8008d10 <std+0x54>
 8008d04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d0c:	f000 b9c0 	b.w	8009090 <__retarget_lock_init_recursive>
 8008d10:	bd10      	pop	{r4, pc}
 8008d12:	bf00      	nop
 8008d14:	08008e65 	.word	0x08008e65
 8008d18:	08008e87 	.word	0x08008e87
 8008d1c:	08008ebf 	.word	0x08008ebf
 8008d20:	08008ee3 	.word	0x08008ee3
 8008d24:	200048a0 	.word	0x200048a0

08008d28 <stdio_exit_handler>:
 8008d28:	4a02      	ldr	r2, [pc, #8]	@ (8008d34 <stdio_exit_handler+0xc>)
 8008d2a:	4903      	ldr	r1, [pc, #12]	@ (8008d38 <stdio_exit_handler+0x10>)
 8008d2c:	4803      	ldr	r0, [pc, #12]	@ (8008d3c <stdio_exit_handler+0x14>)
 8008d2e:	f000 b869 	b.w	8008e04 <_fwalk_sglue>
 8008d32:	bf00      	nop
 8008d34:	20000018 	.word	0x20000018
 8008d38:	0800a9e1 	.word	0x0800a9e1
 8008d3c:	20000028 	.word	0x20000028

08008d40 <cleanup_stdio>:
 8008d40:	6841      	ldr	r1, [r0, #4]
 8008d42:	4b0c      	ldr	r3, [pc, #48]	@ (8008d74 <cleanup_stdio+0x34>)
 8008d44:	4299      	cmp	r1, r3
 8008d46:	b510      	push	{r4, lr}
 8008d48:	4604      	mov	r4, r0
 8008d4a:	d001      	beq.n	8008d50 <cleanup_stdio+0x10>
 8008d4c:	f001 fe48 	bl	800a9e0 <_fflush_r>
 8008d50:	68a1      	ldr	r1, [r4, #8]
 8008d52:	4b09      	ldr	r3, [pc, #36]	@ (8008d78 <cleanup_stdio+0x38>)
 8008d54:	4299      	cmp	r1, r3
 8008d56:	d002      	beq.n	8008d5e <cleanup_stdio+0x1e>
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f001 fe41 	bl	800a9e0 <_fflush_r>
 8008d5e:	68e1      	ldr	r1, [r4, #12]
 8008d60:	4b06      	ldr	r3, [pc, #24]	@ (8008d7c <cleanup_stdio+0x3c>)
 8008d62:	4299      	cmp	r1, r3
 8008d64:	d004      	beq.n	8008d70 <cleanup_stdio+0x30>
 8008d66:	4620      	mov	r0, r4
 8008d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d6c:	f001 be38 	b.w	800a9e0 <_fflush_r>
 8008d70:	bd10      	pop	{r4, pc}
 8008d72:	bf00      	nop
 8008d74:	200048a0 	.word	0x200048a0
 8008d78:	20004908 	.word	0x20004908
 8008d7c:	20004970 	.word	0x20004970

08008d80 <global_stdio_init.part.0>:
 8008d80:	b510      	push	{r4, lr}
 8008d82:	4b0b      	ldr	r3, [pc, #44]	@ (8008db0 <global_stdio_init.part.0+0x30>)
 8008d84:	4c0b      	ldr	r4, [pc, #44]	@ (8008db4 <global_stdio_init.part.0+0x34>)
 8008d86:	4a0c      	ldr	r2, [pc, #48]	@ (8008db8 <global_stdio_init.part.0+0x38>)
 8008d88:	601a      	str	r2, [r3, #0]
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	2104      	movs	r1, #4
 8008d90:	f7ff ff94 	bl	8008cbc <std>
 8008d94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008d98:	2201      	movs	r2, #1
 8008d9a:	2109      	movs	r1, #9
 8008d9c:	f7ff ff8e 	bl	8008cbc <std>
 8008da0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008da4:	2202      	movs	r2, #2
 8008da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008daa:	2112      	movs	r1, #18
 8008dac:	f7ff bf86 	b.w	8008cbc <std>
 8008db0:	200049d8 	.word	0x200049d8
 8008db4:	200048a0 	.word	0x200048a0
 8008db8:	08008d29 	.word	0x08008d29

08008dbc <__sfp_lock_acquire>:
 8008dbc:	4801      	ldr	r0, [pc, #4]	@ (8008dc4 <__sfp_lock_acquire+0x8>)
 8008dbe:	f000 b968 	b.w	8009092 <__retarget_lock_acquire_recursive>
 8008dc2:	bf00      	nop
 8008dc4:	200049e1 	.word	0x200049e1

08008dc8 <__sfp_lock_release>:
 8008dc8:	4801      	ldr	r0, [pc, #4]	@ (8008dd0 <__sfp_lock_release+0x8>)
 8008dca:	f000 b963 	b.w	8009094 <__retarget_lock_release_recursive>
 8008dce:	bf00      	nop
 8008dd0:	200049e1 	.word	0x200049e1

08008dd4 <__sinit>:
 8008dd4:	b510      	push	{r4, lr}
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	f7ff fff0 	bl	8008dbc <__sfp_lock_acquire>
 8008ddc:	6a23      	ldr	r3, [r4, #32]
 8008dde:	b11b      	cbz	r3, 8008de8 <__sinit+0x14>
 8008de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008de4:	f7ff bff0 	b.w	8008dc8 <__sfp_lock_release>
 8008de8:	4b04      	ldr	r3, [pc, #16]	@ (8008dfc <__sinit+0x28>)
 8008dea:	6223      	str	r3, [r4, #32]
 8008dec:	4b04      	ldr	r3, [pc, #16]	@ (8008e00 <__sinit+0x2c>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d1f5      	bne.n	8008de0 <__sinit+0xc>
 8008df4:	f7ff ffc4 	bl	8008d80 <global_stdio_init.part.0>
 8008df8:	e7f2      	b.n	8008de0 <__sinit+0xc>
 8008dfa:	bf00      	nop
 8008dfc:	08008d41 	.word	0x08008d41
 8008e00:	200049d8 	.word	0x200049d8

08008e04 <_fwalk_sglue>:
 8008e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e08:	4607      	mov	r7, r0
 8008e0a:	4688      	mov	r8, r1
 8008e0c:	4614      	mov	r4, r2
 8008e0e:	2600      	movs	r6, #0
 8008e10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e14:	f1b9 0901 	subs.w	r9, r9, #1
 8008e18:	d505      	bpl.n	8008e26 <_fwalk_sglue+0x22>
 8008e1a:	6824      	ldr	r4, [r4, #0]
 8008e1c:	2c00      	cmp	r4, #0
 8008e1e:	d1f7      	bne.n	8008e10 <_fwalk_sglue+0xc>
 8008e20:	4630      	mov	r0, r6
 8008e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e26:	89ab      	ldrh	r3, [r5, #12]
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d907      	bls.n	8008e3c <_fwalk_sglue+0x38>
 8008e2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e30:	3301      	adds	r3, #1
 8008e32:	d003      	beq.n	8008e3c <_fwalk_sglue+0x38>
 8008e34:	4629      	mov	r1, r5
 8008e36:	4638      	mov	r0, r7
 8008e38:	47c0      	blx	r8
 8008e3a:	4306      	orrs	r6, r0
 8008e3c:	3568      	adds	r5, #104	@ 0x68
 8008e3e:	e7e9      	b.n	8008e14 <_fwalk_sglue+0x10>

08008e40 <iprintf>:
 8008e40:	b40f      	push	{r0, r1, r2, r3}
 8008e42:	b507      	push	{r0, r1, r2, lr}
 8008e44:	4906      	ldr	r1, [pc, #24]	@ (8008e60 <iprintf+0x20>)
 8008e46:	ab04      	add	r3, sp, #16
 8008e48:	6808      	ldr	r0, [r1, #0]
 8008e4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e4e:	6881      	ldr	r1, [r0, #8]
 8008e50:	9301      	str	r3, [sp, #4]
 8008e52:	f001 fc29 	bl	800a6a8 <_vfiprintf_r>
 8008e56:	b003      	add	sp, #12
 8008e58:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e5c:	b004      	add	sp, #16
 8008e5e:	4770      	bx	lr
 8008e60:	20000024 	.word	0x20000024

08008e64 <__sread>:
 8008e64:	b510      	push	{r4, lr}
 8008e66:	460c      	mov	r4, r1
 8008e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e6c:	f000 f8c2 	bl	8008ff4 <_read_r>
 8008e70:	2800      	cmp	r0, #0
 8008e72:	bfab      	itete	ge
 8008e74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008e76:	89a3      	ldrhlt	r3, [r4, #12]
 8008e78:	181b      	addge	r3, r3, r0
 8008e7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008e7e:	bfac      	ite	ge
 8008e80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008e82:	81a3      	strhlt	r3, [r4, #12]
 8008e84:	bd10      	pop	{r4, pc}

08008e86 <__swrite>:
 8008e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e8a:	461f      	mov	r7, r3
 8008e8c:	898b      	ldrh	r3, [r1, #12]
 8008e8e:	05db      	lsls	r3, r3, #23
 8008e90:	4605      	mov	r5, r0
 8008e92:	460c      	mov	r4, r1
 8008e94:	4616      	mov	r6, r2
 8008e96:	d505      	bpl.n	8008ea4 <__swrite+0x1e>
 8008e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e9c:	2302      	movs	r3, #2
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f000 f896 	bl	8008fd0 <_lseek_r>
 8008ea4:	89a3      	ldrh	r3, [r4, #12]
 8008ea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008eaa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008eae:	81a3      	strh	r3, [r4, #12]
 8008eb0:	4632      	mov	r2, r6
 8008eb2:	463b      	mov	r3, r7
 8008eb4:	4628      	mov	r0, r5
 8008eb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008eba:	f000 b8ad 	b.w	8009018 <_write_r>

08008ebe <__sseek>:
 8008ebe:	b510      	push	{r4, lr}
 8008ec0:	460c      	mov	r4, r1
 8008ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ec6:	f000 f883 	bl	8008fd0 <_lseek_r>
 8008eca:	1c43      	adds	r3, r0, #1
 8008ecc:	89a3      	ldrh	r3, [r4, #12]
 8008ece:	bf15      	itete	ne
 8008ed0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008ed2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008ed6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008eda:	81a3      	strheq	r3, [r4, #12]
 8008edc:	bf18      	it	ne
 8008ede:	81a3      	strhne	r3, [r4, #12]
 8008ee0:	bd10      	pop	{r4, pc}

08008ee2 <__sclose>:
 8008ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ee6:	f000 b80d 	b.w	8008f04 <_close_r>

08008eea <memset>:
 8008eea:	4402      	add	r2, r0
 8008eec:	4603      	mov	r3, r0
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d100      	bne.n	8008ef4 <memset+0xa>
 8008ef2:	4770      	bx	lr
 8008ef4:	f803 1b01 	strb.w	r1, [r3], #1
 8008ef8:	e7f9      	b.n	8008eee <memset+0x4>
	...

08008efc <_localeconv_r>:
 8008efc:	4800      	ldr	r0, [pc, #0]	@ (8008f00 <_localeconv_r+0x4>)
 8008efe:	4770      	bx	lr
 8008f00:	20000164 	.word	0x20000164

08008f04 <_close_r>:
 8008f04:	b538      	push	{r3, r4, r5, lr}
 8008f06:	4d06      	ldr	r5, [pc, #24]	@ (8008f20 <_close_r+0x1c>)
 8008f08:	2300      	movs	r3, #0
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	4608      	mov	r0, r1
 8008f0e:	602b      	str	r3, [r5, #0]
 8008f10:	f7f8 fc68 	bl	80017e4 <_close>
 8008f14:	1c43      	adds	r3, r0, #1
 8008f16:	d102      	bne.n	8008f1e <_close_r+0x1a>
 8008f18:	682b      	ldr	r3, [r5, #0]
 8008f1a:	b103      	cbz	r3, 8008f1e <_close_r+0x1a>
 8008f1c:	6023      	str	r3, [r4, #0]
 8008f1e:	bd38      	pop	{r3, r4, r5, pc}
 8008f20:	200049dc 	.word	0x200049dc

08008f24 <_reclaim_reent>:
 8008f24:	4b29      	ldr	r3, [pc, #164]	@ (8008fcc <_reclaim_reent+0xa8>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4283      	cmp	r3, r0
 8008f2a:	b570      	push	{r4, r5, r6, lr}
 8008f2c:	4604      	mov	r4, r0
 8008f2e:	d04b      	beq.n	8008fc8 <_reclaim_reent+0xa4>
 8008f30:	69c3      	ldr	r3, [r0, #28]
 8008f32:	b1ab      	cbz	r3, 8008f60 <_reclaim_reent+0x3c>
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	b16b      	cbz	r3, 8008f54 <_reclaim_reent+0x30>
 8008f38:	2500      	movs	r5, #0
 8008f3a:	69e3      	ldr	r3, [r4, #28]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	5959      	ldr	r1, [r3, r5]
 8008f40:	2900      	cmp	r1, #0
 8008f42:	d13b      	bne.n	8008fbc <_reclaim_reent+0x98>
 8008f44:	3504      	adds	r5, #4
 8008f46:	2d80      	cmp	r5, #128	@ 0x80
 8008f48:	d1f7      	bne.n	8008f3a <_reclaim_reent+0x16>
 8008f4a:	69e3      	ldr	r3, [r4, #28]
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	68d9      	ldr	r1, [r3, #12]
 8008f50:	f000 fefe 	bl	8009d50 <_free_r>
 8008f54:	69e3      	ldr	r3, [r4, #28]
 8008f56:	6819      	ldr	r1, [r3, #0]
 8008f58:	b111      	cbz	r1, 8008f60 <_reclaim_reent+0x3c>
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	f000 fef8 	bl	8009d50 <_free_r>
 8008f60:	6961      	ldr	r1, [r4, #20]
 8008f62:	b111      	cbz	r1, 8008f6a <_reclaim_reent+0x46>
 8008f64:	4620      	mov	r0, r4
 8008f66:	f000 fef3 	bl	8009d50 <_free_r>
 8008f6a:	69e1      	ldr	r1, [r4, #28]
 8008f6c:	b111      	cbz	r1, 8008f74 <_reclaim_reent+0x50>
 8008f6e:	4620      	mov	r0, r4
 8008f70:	f000 feee 	bl	8009d50 <_free_r>
 8008f74:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008f76:	b111      	cbz	r1, 8008f7e <_reclaim_reent+0x5a>
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f000 fee9 	bl	8009d50 <_free_r>
 8008f7e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f80:	b111      	cbz	r1, 8008f88 <_reclaim_reent+0x64>
 8008f82:	4620      	mov	r0, r4
 8008f84:	f000 fee4 	bl	8009d50 <_free_r>
 8008f88:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008f8a:	b111      	cbz	r1, 8008f92 <_reclaim_reent+0x6e>
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	f000 fedf 	bl	8009d50 <_free_r>
 8008f92:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008f94:	b111      	cbz	r1, 8008f9c <_reclaim_reent+0x78>
 8008f96:	4620      	mov	r0, r4
 8008f98:	f000 feda 	bl	8009d50 <_free_r>
 8008f9c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008f9e:	b111      	cbz	r1, 8008fa6 <_reclaim_reent+0x82>
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	f000 fed5 	bl	8009d50 <_free_r>
 8008fa6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008fa8:	b111      	cbz	r1, 8008fb0 <_reclaim_reent+0x8c>
 8008faa:	4620      	mov	r0, r4
 8008fac:	f000 fed0 	bl	8009d50 <_free_r>
 8008fb0:	6a23      	ldr	r3, [r4, #32]
 8008fb2:	b14b      	cbz	r3, 8008fc8 <_reclaim_reent+0xa4>
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008fba:	4718      	bx	r3
 8008fbc:	680e      	ldr	r6, [r1, #0]
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	f000 fec6 	bl	8009d50 <_free_r>
 8008fc4:	4631      	mov	r1, r6
 8008fc6:	e7bb      	b.n	8008f40 <_reclaim_reent+0x1c>
 8008fc8:	bd70      	pop	{r4, r5, r6, pc}
 8008fca:	bf00      	nop
 8008fcc:	20000024 	.word	0x20000024

08008fd0 <_lseek_r>:
 8008fd0:	b538      	push	{r3, r4, r5, lr}
 8008fd2:	4d07      	ldr	r5, [pc, #28]	@ (8008ff0 <_lseek_r+0x20>)
 8008fd4:	4604      	mov	r4, r0
 8008fd6:	4608      	mov	r0, r1
 8008fd8:	4611      	mov	r1, r2
 8008fda:	2200      	movs	r2, #0
 8008fdc:	602a      	str	r2, [r5, #0]
 8008fde:	461a      	mov	r2, r3
 8008fe0:	f7f8 fc27 	bl	8001832 <_lseek>
 8008fe4:	1c43      	adds	r3, r0, #1
 8008fe6:	d102      	bne.n	8008fee <_lseek_r+0x1e>
 8008fe8:	682b      	ldr	r3, [r5, #0]
 8008fea:	b103      	cbz	r3, 8008fee <_lseek_r+0x1e>
 8008fec:	6023      	str	r3, [r4, #0]
 8008fee:	bd38      	pop	{r3, r4, r5, pc}
 8008ff0:	200049dc 	.word	0x200049dc

08008ff4 <_read_r>:
 8008ff4:	b538      	push	{r3, r4, r5, lr}
 8008ff6:	4d07      	ldr	r5, [pc, #28]	@ (8009014 <_read_r+0x20>)
 8008ff8:	4604      	mov	r4, r0
 8008ffa:	4608      	mov	r0, r1
 8008ffc:	4611      	mov	r1, r2
 8008ffe:	2200      	movs	r2, #0
 8009000:	602a      	str	r2, [r5, #0]
 8009002:	461a      	mov	r2, r3
 8009004:	f7f8 fbb5 	bl	8001772 <_read>
 8009008:	1c43      	adds	r3, r0, #1
 800900a:	d102      	bne.n	8009012 <_read_r+0x1e>
 800900c:	682b      	ldr	r3, [r5, #0]
 800900e:	b103      	cbz	r3, 8009012 <_read_r+0x1e>
 8009010:	6023      	str	r3, [r4, #0]
 8009012:	bd38      	pop	{r3, r4, r5, pc}
 8009014:	200049dc 	.word	0x200049dc

08009018 <_write_r>:
 8009018:	b538      	push	{r3, r4, r5, lr}
 800901a:	4d07      	ldr	r5, [pc, #28]	@ (8009038 <_write_r+0x20>)
 800901c:	4604      	mov	r4, r0
 800901e:	4608      	mov	r0, r1
 8009020:	4611      	mov	r1, r2
 8009022:	2200      	movs	r2, #0
 8009024:	602a      	str	r2, [r5, #0]
 8009026:	461a      	mov	r2, r3
 8009028:	f7f8 fbc0 	bl	80017ac <_write>
 800902c:	1c43      	adds	r3, r0, #1
 800902e:	d102      	bne.n	8009036 <_write_r+0x1e>
 8009030:	682b      	ldr	r3, [r5, #0]
 8009032:	b103      	cbz	r3, 8009036 <_write_r+0x1e>
 8009034:	6023      	str	r3, [r4, #0]
 8009036:	bd38      	pop	{r3, r4, r5, pc}
 8009038:	200049dc 	.word	0x200049dc

0800903c <__errno>:
 800903c:	4b01      	ldr	r3, [pc, #4]	@ (8009044 <__errno+0x8>)
 800903e:	6818      	ldr	r0, [r3, #0]
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop
 8009044:	20000024 	.word	0x20000024

08009048 <__libc_init_array>:
 8009048:	b570      	push	{r4, r5, r6, lr}
 800904a:	4d0d      	ldr	r5, [pc, #52]	@ (8009080 <__libc_init_array+0x38>)
 800904c:	4c0d      	ldr	r4, [pc, #52]	@ (8009084 <__libc_init_array+0x3c>)
 800904e:	1b64      	subs	r4, r4, r5
 8009050:	10a4      	asrs	r4, r4, #2
 8009052:	2600      	movs	r6, #0
 8009054:	42a6      	cmp	r6, r4
 8009056:	d109      	bne.n	800906c <__libc_init_array+0x24>
 8009058:	4d0b      	ldr	r5, [pc, #44]	@ (8009088 <__libc_init_array+0x40>)
 800905a:	4c0c      	ldr	r4, [pc, #48]	@ (800908c <__libc_init_array+0x44>)
 800905c:	f001 fec0 	bl	800ade0 <_init>
 8009060:	1b64      	subs	r4, r4, r5
 8009062:	10a4      	asrs	r4, r4, #2
 8009064:	2600      	movs	r6, #0
 8009066:	42a6      	cmp	r6, r4
 8009068:	d105      	bne.n	8009076 <__libc_init_array+0x2e>
 800906a:	bd70      	pop	{r4, r5, r6, pc}
 800906c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009070:	4798      	blx	r3
 8009072:	3601      	adds	r6, #1
 8009074:	e7ee      	b.n	8009054 <__libc_init_array+0xc>
 8009076:	f855 3b04 	ldr.w	r3, [r5], #4
 800907a:	4798      	blx	r3
 800907c:	3601      	adds	r6, #1
 800907e:	e7f2      	b.n	8009066 <__libc_init_array+0x1e>
 8009080:	0800b220 	.word	0x0800b220
 8009084:	0800b220 	.word	0x0800b220
 8009088:	0800b220 	.word	0x0800b220
 800908c:	0800b224 	.word	0x0800b224

08009090 <__retarget_lock_init_recursive>:
 8009090:	4770      	bx	lr

08009092 <__retarget_lock_acquire_recursive>:
 8009092:	4770      	bx	lr

08009094 <__retarget_lock_release_recursive>:
 8009094:	4770      	bx	lr

08009096 <memcpy>:
 8009096:	440a      	add	r2, r1
 8009098:	4291      	cmp	r1, r2
 800909a:	f100 33ff 	add.w	r3, r0, #4294967295
 800909e:	d100      	bne.n	80090a2 <memcpy+0xc>
 80090a0:	4770      	bx	lr
 80090a2:	b510      	push	{r4, lr}
 80090a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090ac:	4291      	cmp	r1, r2
 80090ae:	d1f9      	bne.n	80090a4 <memcpy+0xe>
 80090b0:	bd10      	pop	{r4, pc}

080090b2 <quorem>:
 80090b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b6:	6903      	ldr	r3, [r0, #16]
 80090b8:	690c      	ldr	r4, [r1, #16]
 80090ba:	42a3      	cmp	r3, r4
 80090bc:	4607      	mov	r7, r0
 80090be:	db7e      	blt.n	80091be <quorem+0x10c>
 80090c0:	3c01      	subs	r4, #1
 80090c2:	f101 0814 	add.w	r8, r1, #20
 80090c6:	00a3      	lsls	r3, r4, #2
 80090c8:	f100 0514 	add.w	r5, r0, #20
 80090cc:	9300      	str	r3, [sp, #0]
 80090ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80090d2:	9301      	str	r3, [sp, #4]
 80090d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80090d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80090dc:	3301      	adds	r3, #1
 80090de:	429a      	cmp	r2, r3
 80090e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80090e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80090e8:	d32e      	bcc.n	8009148 <quorem+0x96>
 80090ea:	f04f 0a00 	mov.w	sl, #0
 80090ee:	46c4      	mov	ip, r8
 80090f0:	46ae      	mov	lr, r5
 80090f2:	46d3      	mov	fp, sl
 80090f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80090f8:	b298      	uxth	r0, r3
 80090fa:	fb06 a000 	mla	r0, r6, r0, sl
 80090fe:	0c02      	lsrs	r2, r0, #16
 8009100:	0c1b      	lsrs	r3, r3, #16
 8009102:	fb06 2303 	mla	r3, r6, r3, r2
 8009106:	f8de 2000 	ldr.w	r2, [lr]
 800910a:	b280      	uxth	r0, r0
 800910c:	b292      	uxth	r2, r2
 800910e:	1a12      	subs	r2, r2, r0
 8009110:	445a      	add	r2, fp
 8009112:	f8de 0000 	ldr.w	r0, [lr]
 8009116:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800911a:	b29b      	uxth	r3, r3
 800911c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009120:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009124:	b292      	uxth	r2, r2
 8009126:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800912a:	45e1      	cmp	r9, ip
 800912c:	f84e 2b04 	str.w	r2, [lr], #4
 8009130:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009134:	d2de      	bcs.n	80090f4 <quorem+0x42>
 8009136:	9b00      	ldr	r3, [sp, #0]
 8009138:	58eb      	ldr	r3, [r5, r3]
 800913a:	b92b      	cbnz	r3, 8009148 <quorem+0x96>
 800913c:	9b01      	ldr	r3, [sp, #4]
 800913e:	3b04      	subs	r3, #4
 8009140:	429d      	cmp	r5, r3
 8009142:	461a      	mov	r2, r3
 8009144:	d32f      	bcc.n	80091a6 <quorem+0xf4>
 8009146:	613c      	str	r4, [r7, #16]
 8009148:	4638      	mov	r0, r7
 800914a:	f001 f97b 	bl	800a444 <__mcmp>
 800914e:	2800      	cmp	r0, #0
 8009150:	db25      	blt.n	800919e <quorem+0xec>
 8009152:	4629      	mov	r1, r5
 8009154:	2000      	movs	r0, #0
 8009156:	f858 2b04 	ldr.w	r2, [r8], #4
 800915a:	f8d1 c000 	ldr.w	ip, [r1]
 800915e:	fa1f fe82 	uxth.w	lr, r2
 8009162:	fa1f f38c 	uxth.w	r3, ip
 8009166:	eba3 030e 	sub.w	r3, r3, lr
 800916a:	4403      	add	r3, r0
 800916c:	0c12      	lsrs	r2, r2, #16
 800916e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009172:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009176:	b29b      	uxth	r3, r3
 8009178:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800917c:	45c1      	cmp	r9, r8
 800917e:	f841 3b04 	str.w	r3, [r1], #4
 8009182:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009186:	d2e6      	bcs.n	8009156 <quorem+0xa4>
 8009188:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800918c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009190:	b922      	cbnz	r2, 800919c <quorem+0xea>
 8009192:	3b04      	subs	r3, #4
 8009194:	429d      	cmp	r5, r3
 8009196:	461a      	mov	r2, r3
 8009198:	d30b      	bcc.n	80091b2 <quorem+0x100>
 800919a:	613c      	str	r4, [r7, #16]
 800919c:	3601      	adds	r6, #1
 800919e:	4630      	mov	r0, r6
 80091a0:	b003      	add	sp, #12
 80091a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091a6:	6812      	ldr	r2, [r2, #0]
 80091a8:	3b04      	subs	r3, #4
 80091aa:	2a00      	cmp	r2, #0
 80091ac:	d1cb      	bne.n	8009146 <quorem+0x94>
 80091ae:	3c01      	subs	r4, #1
 80091b0:	e7c6      	b.n	8009140 <quorem+0x8e>
 80091b2:	6812      	ldr	r2, [r2, #0]
 80091b4:	3b04      	subs	r3, #4
 80091b6:	2a00      	cmp	r2, #0
 80091b8:	d1ef      	bne.n	800919a <quorem+0xe8>
 80091ba:	3c01      	subs	r4, #1
 80091bc:	e7ea      	b.n	8009194 <quorem+0xe2>
 80091be:	2000      	movs	r0, #0
 80091c0:	e7ee      	b.n	80091a0 <quorem+0xee>
 80091c2:	0000      	movs	r0, r0
 80091c4:	0000      	movs	r0, r0
	...

080091c8 <_dtoa_r>:
 80091c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091cc:	69c7      	ldr	r7, [r0, #28]
 80091ce:	b099      	sub	sp, #100	@ 0x64
 80091d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80091d4:	ec55 4b10 	vmov	r4, r5, d0
 80091d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80091da:	9109      	str	r1, [sp, #36]	@ 0x24
 80091dc:	4683      	mov	fp, r0
 80091de:	920e      	str	r2, [sp, #56]	@ 0x38
 80091e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80091e2:	b97f      	cbnz	r7, 8009204 <_dtoa_r+0x3c>
 80091e4:	2010      	movs	r0, #16
 80091e6:	f000 fdfd 	bl	8009de4 <malloc>
 80091ea:	4602      	mov	r2, r0
 80091ec:	f8cb 001c 	str.w	r0, [fp, #28]
 80091f0:	b920      	cbnz	r0, 80091fc <_dtoa_r+0x34>
 80091f2:	4ba7      	ldr	r3, [pc, #668]	@ (8009490 <_dtoa_r+0x2c8>)
 80091f4:	21ef      	movs	r1, #239	@ 0xef
 80091f6:	48a7      	ldr	r0, [pc, #668]	@ (8009494 <_dtoa_r+0x2cc>)
 80091f8:	f001 fcbe 	bl	800ab78 <__assert_func>
 80091fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009200:	6007      	str	r7, [r0, #0]
 8009202:	60c7      	str	r7, [r0, #12]
 8009204:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009208:	6819      	ldr	r1, [r3, #0]
 800920a:	b159      	cbz	r1, 8009224 <_dtoa_r+0x5c>
 800920c:	685a      	ldr	r2, [r3, #4]
 800920e:	604a      	str	r2, [r1, #4]
 8009210:	2301      	movs	r3, #1
 8009212:	4093      	lsls	r3, r2
 8009214:	608b      	str	r3, [r1, #8]
 8009216:	4658      	mov	r0, fp
 8009218:	f000 feda 	bl	8009fd0 <_Bfree>
 800921c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009220:	2200      	movs	r2, #0
 8009222:	601a      	str	r2, [r3, #0]
 8009224:	1e2b      	subs	r3, r5, #0
 8009226:	bfb9      	ittee	lt
 8009228:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800922c:	9303      	strlt	r3, [sp, #12]
 800922e:	2300      	movge	r3, #0
 8009230:	6033      	strge	r3, [r6, #0]
 8009232:	9f03      	ldr	r7, [sp, #12]
 8009234:	4b98      	ldr	r3, [pc, #608]	@ (8009498 <_dtoa_r+0x2d0>)
 8009236:	bfbc      	itt	lt
 8009238:	2201      	movlt	r2, #1
 800923a:	6032      	strlt	r2, [r6, #0]
 800923c:	43bb      	bics	r3, r7
 800923e:	d112      	bne.n	8009266 <_dtoa_r+0x9e>
 8009240:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009242:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009246:	6013      	str	r3, [r2, #0]
 8009248:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800924c:	4323      	orrs	r3, r4
 800924e:	f000 854d 	beq.w	8009cec <_dtoa_r+0xb24>
 8009252:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009254:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80094ac <_dtoa_r+0x2e4>
 8009258:	2b00      	cmp	r3, #0
 800925a:	f000 854f 	beq.w	8009cfc <_dtoa_r+0xb34>
 800925e:	f10a 0303 	add.w	r3, sl, #3
 8009262:	f000 bd49 	b.w	8009cf8 <_dtoa_r+0xb30>
 8009266:	ed9d 7b02 	vldr	d7, [sp, #8]
 800926a:	2200      	movs	r2, #0
 800926c:	ec51 0b17 	vmov	r0, r1, d7
 8009270:	2300      	movs	r3, #0
 8009272:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009276:	f7f7 fc47 	bl	8000b08 <__aeabi_dcmpeq>
 800927a:	4680      	mov	r8, r0
 800927c:	b158      	cbz	r0, 8009296 <_dtoa_r+0xce>
 800927e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009280:	2301      	movs	r3, #1
 8009282:	6013      	str	r3, [r2, #0]
 8009284:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009286:	b113      	cbz	r3, 800928e <_dtoa_r+0xc6>
 8009288:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800928a:	4b84      	ldr	r3, [pc, #528]	@ (800949c <_dtoa_r+0x2d4>)
 800928c:	6013      	str	r3, [r2, #0]
 800928e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80094b0 <_dtoa_r+0x2e8>
 8009292:	f000 bd33 	b.w	8009cfc <_dtoa_r+0xb34>
 8009296:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800929a:	aa16      	add	r2, sp, #88	@ 0x58
 800929c:	a917      	add	r1, sp, #92	@ 0x5c
 800929e:	4658      	mov	r0, fp
 80092a0:	f001 f980 	bl	800a5a4 <__d2b>
 80092a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80092a8:	4681      	mov	r9, r0
 80092aa:	2e00      	cmp	r6, #0
 80092ac:	d077      	beq.n	800939e <_dtoa_r+0x1d6>
 80092ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80092b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80092b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80092c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80092c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80092c8:	4619      	mov	r1, r3
 80092ca:	2200      	movs	r2, #0
 80092cc:	4b74      	ldr	r3, [pc, #464]	@ (80094a0 <_dtoa_r+0x2d8>)
 80092ce:	f7f6 fffb 	bl	80002c8 <__aeabi_dsub>
 80092d2:	a369      	add	r3, pc, #420	@ (adr r3, 8009478 <_dtoa_r+0x2b0>)
 80092d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d8:	f7f7 f9ae 	bl	8000638 <__aeabi_dmul>
 80092dc:	a368      	add	r3, pc, #416	@ (adr r3, 8009480 <_dtoa_r+0x2b8>)
 80092de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e2:	f7f6 fff3 	bl	80002cc <__adddf3>
 80092e6:	4604      	mov	r4, r0
 80092e8:	4630      	mov	r0, r6
 80092ea:	460d      	mov	r5, r1
 80092ec:	f7f7 f93a 	bl	8000564 <__aeabi_i2d>
 80092f0:	a365      	add	r3, pc, #404	@ (adr r3, 8009488 <_dtoa_r+0x2c0>)
 80092f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f6:	f7f7 f99f 	bl	8000638 <__aeabi_dmul>
 80092fa:	4602      	mov	r2, r0
 80092fc:	460b      	mov	r3, r1
 80092fe:	4620      	mov	r0, r4
 8009300:	4629      	mov	r1, r5
 8009302:	f7f6 ffe3 	bl	80002cc <__adddf3>
 8009306:	4604      	mov	r4, r0
 8009308:	460d      	mov	r5, r1
 800930a:	f7f7 fc45 	bl	8000b98 <__aeabi_d2iz>
 800930e:	2200      	movs	r2, #0
 8009310:	4607      	mov	r7, r0
 8009312:	2300      	movs	r3, #0
 8009314:	4620      	mov	r0, r4
 8009316:	4629      	mov	r1, r5
 8009318:	f7f7 fc00 	bl	8000b1c <__aeabi_dcmplt>
 800931c:	b140      	cbz	r0, 8009330 <_dtoa_r+0x168>
 800931e:	4638      	mov	r0, r7
 8009320:	f7f7 f920 	bl	8000564 <__aeabi_i2d>
 8009324:	4622      	mov	r2, r4
 8009326:	462b      	mov	r3, r5
 8009328:	f7f7 fbee 	bl	8000b08 <__aeabi_dcmpeq>
 800932c:	b900      	cbnz	r0, 8009330 <_dtoa_r+0x168>
 800932e:	3f01      	subs	r7, #1
 8009330:	2f16      	cmp	r7, #22
 8009332:	d851      	bhi.n	80093d8 <_dtoa_r+0x210>
 8009334:	4b5b      	ldr	r3, [pc, #364]	@ (80094a4 <_dtoa_r+0x2dc>)
 8009336:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800933a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009342:	f7f7 fbeb 	bl	8000b1c <__aeabi_dcmplt>
 8009346:	2800      	cmp	r0, #0
 8009348:	d048      	beq.n	80093dc <_dtoa_r+0x214>
 800934a:	3f01      	subs	r7, #1
 800934c:	2300      	movs	r3, #0
 800934e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009350:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009352:	1b9b      	subs	r3, r3, r6
 8009354:	1e5a      	subs	r2, r3, #1
 8009356:	bf44      	itt	mi
 8009358:	f1c3 0801 	rsbmi	r8, r3, #1
 800935c:	2300      	movmi	r3, #0
 800935e:	9208      	str	r2, [sp, #32]
 8009360:	bf54      	ite	pl
 8009362:	f04f 0800 	movpl.w	r8, #0
 8009366:	9308      	strmi	r3, [sp, #32]
 8009368:	2f00      	cmp	r7, #0
 800936a:	db39      	blt.n	80093e0 <_dtoa_r+0x218>
 800936c:	9b08      	ldr	r3, [sp, #32]
 800936e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009370:	443b      	add	r3, r7
 8009372:	9308      	str	r3, [sp, #32]
 8009374:	2300      	movs	r3, #0
 8009376:	930a      	str	r3, [sp, #40]	@ 0x28
 8009378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800937a:	2b09      	cmp	r3, #9
 800937c:	d864      	bhi.n	8009448 <_dtoa_r+0x280>
 800937e:	2b05      	cmp	r3, #5
 8009380:	bfc4      	itt	gt
 8009382:	3b04      	subgt	r3, #4
 8009384:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009388:	f1a3 0302 	sub.w	r3, r3, #2
 800938c:	bfcc      	ite	gt
 800938e:	2400      	movgt	r4, #0
 8009390:	2401      	movle	r4, #1
 8009392:	2b03      	cmp	r3, #3
 8009394:	d863      	bhi.n	800945e <_dtoa_r+0x296>
 8009396:	e8df f003 	tbb	[pc, r3]
 800939a:	372a      	.short	0x372a
 800939c:	5535      	.short	0x5535
 800939e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80093a2:	441e      	add	r6, r3
 80093a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80093a8:	2b20      	cmp	r3, #32
 80093aa:	bfc1      	itttt	gt
 80093ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80093b0:	409f      	lslgt	r7, r3
 80093b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80093b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80093ba:	bfd6      	itet	le
 80093bc:	f1c3 0320 	rsble	r3, r3, #32
 80093c0:	ea47 0003 	orrgt.w	r0, r7, r3
 80093c4:	fa04 f003 	lslle.w	r0, r4, r3
 80093c8:	f7f7 f8bc 	bl	8000544 <__aeabi_ui2d>
 80093cc:	2201      	movs	r2, #1
 80093ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80093d2:	3e01      	subs	r6, #1
 80093d4:	9214      	str	r2, [sp, #80]	@ 0x50
 80093d6:	e777      	b.n	80092c8 <_dtoa_r+0x100>
 80093d8:	2301      	movs	r3, #1
 80093da:	e7b8      	b.n	800934e <_dtoa_r+0x186>
 80093dc:	9012      	str	r0, [sp, #72]	@ 0x48
 80093de:	e7b7      	b.n	8009350 <_dtoa_r+0x188>
 80093e0:	427b      	negs	r3, r7
 80093e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80093e4:	2300      	movs	r3, #0
 80093e6:	eba8 0807 	sub.w	r8, r8, r7
 80093ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80093ec:	e7c4      	b.n	8009378 <_dtoa_r+0x1b0>
 80093ee:	2300      	movs	r3, #0
 80093f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	dc35      	bgt.n	8009464 <_dtoa_r+0x29c>
 80093f8:	2301      	movs	r3, #1
 80093fa:	9300      	str	r3, [sp, #0]
 80093fc:	9307      	str	r3, [sp, #28]
 80093fe:	461a      	mov	r2, r3
 8009400:	920e      	str	r2, [sp, #56]	@ 0x38
 8009402:	e00b      	b.n	800941c <_dtoa_r+0x254>
 8009404:	2301      	movs	r3, #1
 8009406:	e7f3      	b.n	80093f0 <_dtoa_r+0x228>
 8009408:	2300      	movs	r3, #0
 800940a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800940c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800940e:	18fb      	adds	r3, r7, r3
 8009410:	9300      	str	r3, [sp, #0]
 8009412:	3301      	adds	r3, #1
 8009414:	2b01      	cmp	r3, #1
 8009416:	9307      	str	r3, [sp, #28]
 8009418:	bfb8      	it	lt
 800941a:	2301      	movlt	r3, #1
 800941c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009420:	2100      	movs	r1, #0
 8009422:	2204      	movs	r2, #4
 8009424:	f102 0514 	add.w	r5, r2, #20
 8009428:	429d      	cmp	r5, r3
 800942a:	d91f      	bls.n	800946c <_dtoa_r+0x2a4>
 800942c:	6041      	str	r1, [r0, #4]
 800942e:	4658      	mov	r0, fp
 8009430:	f000 fd8e 	bl	8009f50 <_Balloc>
 8009434:	4682      	mov	sl, r0
 8009436:	2800      	cmp	r0, #0
 8009438:	d13c      	bne.n	80094b4 <_dtoa_r+0x2ec>
 800943a:	4b1b      	ldr	r3, [pc, #108]	@ (80094a8 <_dtoa_r+0x2e0>)
 800943c:	4602      	mov	r2, r0
 800943e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009442:	e6d8      	b.n	80091f6 <_dtoa_r+0x2e>
 8009444:	2301      	movs	r3, #1
 8009446:	e7e0      	b.n	800940a <_dtoa_r+0x242>
 8009448:	2401      	movs	r4, #1
 800944a:	2300      	movs	r3, #0
 800944c:	9309      	str	r3, [sp, #36]	@ 0x24
 800944e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009450:	f04f 33ff 	mov.w	r3, #4294967295
 8009454:	9300      	str	r3, [sp, #0]
 8009456:	9307      	str	r3, [sp, #28]
 8009458:	2200      	movs	r2, #0
 800945a:	2312      	movs	r3, #18
 800945c:	e7d0      	b.n	8009400 <_dtoa_r+0x238>
 800945e:	2301      	movs	r3, #1
 8009460:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009462:	e7f5      	b.n	8009450 <_dtoa_r+0x288>
 8009464:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009466:	9300      	str	r3, [sp, #0]
 8009468:	9307      	str	r3, [sp, #28]
 800946a:	e7d7      	b.n	800941c <_dtoa_r+0x254>
 800946c:	3101      	adds	r1, #1
 800946e:	0052      	lsls	r2, r2, #1
 8009470:	e7d8      	b.n	8009424 <_dtoa_r+0x25c>
 8009472:	bf00      	nop
 8009474:	f3af 8000 	nop.w
 8009478:	636f4361 	.word	0x636f4361
 800947c:	3fd287a7 	.word	0x3fd287a7
 8009480:	8b60c8b3 	.word	0x8b60c8b3
 8009484:	3fc68a28 	.word	0x3fc68a28
 8009488:	509f79fb 	.word	0x509f79fb
 800948c:	3fd34413 	.word	0x3fd34413
 8009490:	0800aee9 	.word	0x0800aee9
 8009494:	0800af00 	.word	0x0800af00
 8009498:	7ff00000 	.word	0x7ff00000
 800949c:	0800aeb9 	.word	0x0800aeb9
 80094a0:	3ff80000 	.word	0x3ff80000
 80094a4:	0800aff8 	.word	0x0800aff8
 80094a8:	0800af58 	.word	0x0800af58
 80094ac:	0800aee5 	.word	0x0800aee5
 80094b0:	0800aeb8 	.word	0x0800aeb8
 80094b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80094b8:	6018      	str	r0, [r3, #0]
 80094ba:	9b07      	ldr	r3, [sp, #28]
 80094bc:	2b0e      	cmp	r3, #14
 80094be:	f200 80a4 	bhi.w	800960a <_dtoa_r+0x442>
 80094c2:	2c00      	cmp	r4, #0
 80094c4:	f000 80a1 	beq.w	800960a <_dtoa_r+0x442>
 80094c8:	2f00      	cmp	r7, #0
 80094ca:	dd33      	ble.n	8009534 <_dtoa_r+0x36c>
 80094cc:	4bad      	ldr	r3, [pc, #692]	@ (8009784 <_dtoa_r+0x5bc>)
 80094ce:	f007 020f 	and.w	r2, r7, #15
 80094d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094d6:	ed93 7b00 	vldr	d7, [r3]
 80094da:	05f8      	lsls	r0, r7, #23
 80094dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80094e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80094e4:	d516      	bpl.n	8009514 <_dtoa_r+0x34c>
 80094e6:	4ba8      	ldr	r3, [pc, #672]	@ (8009788 <_dtoa_r+0x5c0>)
 80094e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80094f0:	f7f7 f9cc 	bl	800088c <__aeabi_ddiv>
 80094f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094f8:	f004 040f 	and.w	r4, r4, #15
 80094fc:	2603      	movs	r6, #3
 80094fe:	4da2      	ldr	r5, [pc, #648]	@ (8009788 <_dtoa_r+0x5c0>)
 8009500:	b954      	cbnz	r4, 8009518 <_dtoa_r+0x350>
 8009502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800950a:	f7f7 f9bf 	bl	800088c <__aeabi_ddiv>
 800950e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009512:	e028      	b.n	8009566 <_dtoa_r+0x39e>
 8009514:	2602      	movs	r6, #2
 8009516:	e7f2      	b.n	80094fe <_dtoa_r+0x336>
 8009518:	07e1      	lsls	r1, r4, #31
 800951a:	d508      	bpl.n	800952e <_dtoa_r+0x366>
 800951c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009520:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009524:	f7f7 f888 	bl	8000638 <__aeabi_dmul>
 8009528:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800952c:	3601      	adds	r6, #1
 800952e:	1064      	asrs	r4, r4, #1
 8009530:	3508      	adds	r5, #8
 8009532:	e7e5      	b.n	8009500 <_dtoa_r+0x338>
 8009534:	f000 80d2 	beq.w	80096dc <_dtoa_r+0x514>
 8009538:	427c      	negs	r4, r7
 800953a:	4b92      	ldr	r3, [pc, #584]	@ (8009784 <_dtoa_r+0x5bc>)
 800953c:	4d92      	ldr	r5, [pc, #584]	@ (8009788 <_dtoa_r+0x5c0>)
 800953e:	f004 020f 	and.w	r2, r4, #15
 8009542:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800954e:	f7f7 f873 	bl	8000638 <__aeabi_dmul>
 8009552:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009556:	1124      	asrs	r4, r4, #4
 8009558:	2300      	movs	r3, #0
 800955a:	2602      	movs	r6, #2
 800955c:	2c00      	cmp	r4, #0
 800955e:	f040 80b2 	bne.w	80096c6 <_dtoa_r+0x4fe>
 8009562:	2b00      	cmp	r3, #0
 8009564:	d1d3      	bne.n	800950e <_dtoa_r+0x346>
 8009566:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009568:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800956c:	2b00      	cmp	r3, #0
 800956e:	f000 80b7 	beq.w	80096e0 <_dtoa_r+0x518>
 8009572:	4b86      	ldr	r3, [pc, #536]	@ (800978c <_dtoa_r+0x5c4>)
 8009574:	2200      	movs	r2, #0
 8009576:	4620      	mov	r0, r4
 8009578:	4629      	mov	r1, r5
 800957a:	f7f7 facf 	bl	8000b1c <__aeabi_dcmplt>
 800957e:	2800      	cmp	r0, #0
 8009580:	f000 80ae 	beq.w	80096e0 <_dtoa_r+0x518>
 8009584:	9b07      	ldr	r3, [sp, #28]
 8009586:	2b00      	cmp	r3, #0
 8009588:	f000 80aa 	beq.w	80096e0 <_dtoa_r+0x518>
 800958c:	9b00      	ldr	r3, [sp, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	dd37      	ble.n	8009602 <_dtoa_r+0x43a>
 8009592:	1e7b      	subs	r3, r7, #1
 8009594:	9304      	str	r3, [sp, #16]
 8009596:	4620      	mov	r0, r4
 8009598:	4b7d      	ldr	r3, [pc, #500]	@ (8009790 <_dtoa_r+0x5c8>)
 800959a:	2200      	movs	r2, #0
 800959c:	4629      	mov	r1, r5
 800959e:	f7f7 f84b 	bl	8000638 <__aeabi_dmul>
 80095a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095a6:	9c00      	ldr	r4, [sp, #0]
 80095a8:	3601      	adds	r6, #1
 80095aa:	4630      	mov	r0, r6
 80095ac:	f7f6 ffda 	bl	8000564 <__aeabi_i2d>
 80095b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095b4:	f7f7 f840 	bl	8000638 <__aeabi_dmul>
 80095b8:	4b76      	ldr	r3, [pc, #472]	@ (8009794 <_dtoa_r+0x5cc>)
 80095ba:	2200      	movs	r2, #0
 80095bc:	f7f6 fe86 	bl	80002cc <__adddf3>
 80095c0:	4605      	mov	r5, r0
 80095c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80095c6:	2c00      	cmp	r4, #0
 80095c8:	f040 808d 	bne.w	80096e6 <_dtoa_r+0x51e>
 80095cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095d0:	4b71      	ldr	r3, [pc, #452]	@ (8009798 <_dtoa_r+0x5d0>)
 80095d2:	2200      	movs	r2, #0
 80095d4:	f7f6 fe78 	bl	80002c8 <__aeabi_dsub>
 80095d8:	4602      	mov	r2, r0
 80095da:	460b      	mov	r3, r1
 80095dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80095e0:	462a      	mov	r2, r5
 80095e2:	4633      	mov	r3, r6
 80095e4:	f7f7 fab8 	bl	8000b58 <__aeabi_dcmpgt>
 80095e8:	2800      	cmp	r0, #0
 80095ea:	f040 828b 	bne.w	8009b04 <_dtoa_r+0x93c>
 80095ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095f2:	462a      	mov	r2, r5
 80095f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80095f8:	f7f7 fa90 	bl	8000b1c <__aeabi_dcmplt>
 80095fc:	2800      	cmp	r0, #0
 80095fe:	f040 8128 	bne.w	8009852 <_dtoa_r+0x68a>
 8009602:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009606:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800960a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800960c:	2b00      	cmp	r3, #0
 800960e:	f2c0 815a 	blt.w	80098c6 <_dtoa_r+0x6fe>
 8009612:	2f0e      	cmp	r7, #14
 8009614:	f300 8157 	bgt.w	80098c6 <_dtoa_r+0x6fe>
 8009618:	4b5a      	ldr	r3, [pc, #360]	@ (8009784 <_dtoa_r+0x5bc>)
 800961a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800961e:	ed93 7b00 	vldr	d7, [r3]
 8009622:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009624:	2b00      	cmp	r3, #0
 8009626:	ed8d 7b00 	vstr	d7, [sp]
 800962a:	da03      	bge.n	8009634 <_dtoa_r+0x46c>
 800962c:	9b07      	ldr	r3, [sp, #28]
 800962e:	2b00      	cmp	r3, #0
 8009630:	f340 8101 	ble.w	8009836 <_dtoa_r+0x66e>
 8009634:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009638:	4656      	mov	r6, sl
 800963a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800963e:	4620      	mov	r0, r4
 8009640:	4629      	mov	r1, r5
 8009642:	f7f7 f923 	bl	800088c <__aeabi_ddiv>
 8009646:	f7f7 faa7 	bl	8000b98 <__aeabi_d2iz>
 800964a:	4680      	mov	r8, r0
 800964c:	f7f6 ff8a 	bl	8000564 <__aeabi_i2d>
 8009650:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009654:	f7f6 fff0 	bl	8000638 <__aeabi_dmul>
 8009658:	4602      	mov	r2, r0
 800965a:	460b      	mov	r3, r1
 800965c:	4620      	mov	r0, r4
 800965e:	4629      	mov	r1, r5
 8009660:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009664:	f7f6 fe30 	bl	80002c8 <__aeabi_dsub>
 8009668:	f806 4b01 	strb.w	r4, [r6], #1
 800966c:	9d07      	ldr	r5, [sp, #28]
 800966e:	eba6 040a 	sub.w	r4, r6, sl
 8009672:	42a5      	cmp	r5, r4
 8009674:	4602      	mov	r2, r0
 8009676:	460b      	mov	r3, r1
 8009678:	f040 8117 	bne.w	80098aa <_dtoa_r+0x6e2>
 800967c:	f7f6 fe26 	bl	80002cc <__adddf3>
 8009680:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009684:	4604      	mov	r4, r0
 8009686:	460d      	mov	r5, r1
 8009688:	f7f7 fa66 	bl	8000b58 <__aeabi_dcmpgt>
 800968c:	2800      	cmp	r0, #0
 800968e:	f040 80f9 	bne.w	8009884 <_dtoa_r+0x6bc>
 8009692:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009696:	4620      	mov	r0, r4
 8009698:	4629      	mov	r1, r5
 800969a:	f7f7 fa35 	bl	8000b08 <__aeabi_dcmpeq>
 800969e:	b118      	cbz	r0, 80096a8 <_dtoa_r+0x4e0>
 80096a0:	f018 0f01 	tst.w	r8, #1
 80096a4:	f040 80ee 	bne.w	8009884 <_dtoa_r+0x6bc>
 80096a8:	4649      	mov	r1, r9
 80096aa:	4658      	mov	r0, fp
 80096ac:	f000 fc90 	bl	8009fd0 <_Bfree>
 80096b0:	2300      	movs	r3, #0
 80096b2:	7033      	strb	r3, [r6, #0]
 80096b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80096b6:	3701      	adds	r7, #1
 80096b8:	601f      	str	r7, [r3, #0]
 80096ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f000 831d 	beq.w	8009cfc <_dtoa_r+0xb34>
 80096c2:	601e      	str	r6, [r3, #0]
 80096c4:	e31a      	b.n	8009cfc <_dtoa_r+0xb34>
 80096c6:	07e2      	lsls	r2, r4, #31
 80096c8:	d505      	bpl.n	80096d6 <_dtoa_r+0x50e>
 80096ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80096ce:	f7f6 ffb3 	bl	8000638 <__aeabi_dmul>
 80096d2:	3601      	adds	r6, #1
 80096d4:	2301      	movs	r3, #1
 80096d6:	1064      	asrs	r4, r4, #1
 80096d8:	3508      	adds	r5, #8
 80096da:	e73f      	b.n	800955c <_dtoa_r+0x394>
 80096dc:	2602      	movs	r6, #2
 80096de:	e742      	b.n	8009566 <_dtoa_r+0x39e>
 80096e0:	9c07      	ldr	r4, [sp, #28]
 80096e2:	9704      	str	r7, [sp, #16]
 80096e4:	e761      	b.n	80095aa <_dtoa_r+0x3e2>
 80096e6:	4b27      	ldr	r3, [pc, #156]	@ (8009784 <_dtoa_r+0x5bc>)
 80096e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80096ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80096ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80096f2:	4454      	add	r4, sl
 80096f4:	2900      	cmp	r1, #0
 80096f6:	d053      	beq.n	80097a0 <_dtoa_r+0x5d8>
 80096f8:	4928      	ldr	r1, [pc, #160]	@ (800979c <_dtoa_r+0x5d4>)
 80096fa:	2000      	movs	r0, #0
 80096fc:	f7f7 f8c6 	bl	800088c <__aeabi_ddiv>
 8009700:	4633      	mov	r3, r6
 8009702:	462a      	mov	r2, r5
 8009704:	f7f6 fde0 	bl	80002c8 <__aeabi_dsub>
 8009708:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800970c:	4656      	mov	r6, sl
 800970e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009712:	f7f7 fa41 	bl	8000b98 <__aeabi_d2iz>
 8009716:	4605      	mov	r5, r0
 8009718:	f7f6 ff24 	bl	8000564 <__aeabi_i2d>
 800971c:	4602      	mov	r2, r0
 800971e:	460b      	mov	r3, r1
 8009720:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009724:	f7f6 fdd0 	bl	80002c8 <__aeabi_dsub>
 8009728:	3530      	adds	r5, #48	@ 0x30
 800972a:	4602      	mov	r2, r0
 800972c:	460b      	mov	r3, r1
 800972e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009732:	f806 5b01 	strb.w	r5, [r6], #1
 8009736:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800973a:	f7f7 f9ef 	bl	8000b1c <__aeabi_dcmplt>
 800973e:	2800      	cmp	r0, #0
 8009740:	d171      	bne.n	8009826 <_dtoa_r+0x65e>
 8009742:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009746:	4911      	ldr	r1, [pc, #68]	@ (800978c <_dtoa_r+0x5c4>)
 8009748:	2000      	movs	r0, #0
 800974a:	f7f6 fdbd 	bl	80002c8 <__aeabi_dsub>
 800974e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009752:	f7f7 f9e3 	bl	8000b1c <__aeabi_dcmplt>
 8009756:	2800      	cmp	r0, #0
 8009758:	f040 8095 	bne.w	8009886 <_dtoa_r+0x6be>
 800975c:	42a6      	cmp	r6, r4
 800975e:	f43f af50 	beq.w	8009602 <_dtoa_r+0x43a>
 8009762:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009766:	4b0a      	ldr	r3, [pc, #40]	@ (8009790 <_dtoa_r+0x5c8>)
 8009768:	2200      	movs	r2, #0
 800976a:	f7f6 ff65 	bl	8000638 <__aeabi_dmul>
 800976e:	4b08      	ldr	r3, [pc, #32]	@ (8009790 <_dtoa_r+0x5c8>)
 8009770:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009774:	2200      	movs	r2, #0
 8009776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800977a:	f7f6 ff5d 	bl	8000638 <__aeabi_dmul>
 800977e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009782:	e7c4      	b.n	800970e <_dtoa_r+0x546>
 8009784:	0800aff8 	.word	0x0800aff8
 8009788:	0800afd0 	.word	0x0800afd0
 800978c:	3ff00000 	.word	0x3ff00000
 8009790:	40240000 	.word	0x40240000
 8009794:	401c0000 	.word	0x401c0000
 8009798:	40140000 	.word	0x40140000
 800979c:	3fe00000 	.word	0x3fe00000
 80097a0:	4631      	mov	r1, r6
 80097a2:	4628      	mov	r0, r5
 80097a4:	f7f6 ff48 	bl	8000638 <__aeabi_dmul>
 80097a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80097ac:	9415      	str	r4, [sp, #84]	@ 0x54
 80097ae:	4656      	mov	r6, sl
 80097b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097b4:	f7f7 f9f0 	bl	8000b98 <__aeabi_d2iz>
 80097b8:	4605      	mov	r5, r0
 80097ba:	f7f6 fed3 	bl	8000564 <__aeabi_i2d>
 80097be:	4602      	mov	r2, r0
 80097c0:	460b      	mov	r3, r1
 80097c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097c6:	f7f6 fd7f 	bl	80002c8 <__aeabi_dsub>
 80097ca:	3530      	adds	r5, #48	@ 0x30
 80097cc:	f806 5b01 	strb.w	r5, [r6], #1
 80097d0:	4602      	mov	r2, r0
 80097d2:	460b      	mov	r3, r1
 80097d4:	42a6      	cmp	r6, r4
 80097d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80097da:	f04f 0200 	mov.w	r2, #0
 80097de:	d124      	bne.n	800982a <_dtoa_r+0x662>
 80097e0:	4bac      	ldr	r3, [pc, #688]	@ (8009a94 <_dtoa_r+0x8cc>)
 80097e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80097e6:	f7f6 fd71 	bl	80002cc <__adddf3>
 80097ea:	4602      	mov	r2, r0
 80097ec:	460b      	mov	r3, r1
 80097ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097f2:	f7f7 f9b1 	bl	8000b58 <__aeabi_dcmpgt>
 80097f6:	2800      	cmp	r0, #0
 80097f8:	d145      	bne.n	8009886 <_dtoa_r+0x6be>
 80097fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80097fe:	49a5      	ldr	r1, [pc, #660]	@ (8009a94 <_dtoa_r+0x8cc>)
 8009800:	2000      	movs	r0, #0
 8009802:	f7f6 fd61 	bl	80002c8 <__aeabi_dsub>
 8009806:	4602      	mov	r2, r0
 8009808:	460b      	mov	r3, r1
 800980a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800980e:	f7f7 f985 	bl	8000b1c <__aeabi_dcmplt>
 8009812:	2800      	cmp	r0, #0
 8009814:	f43f aef5 	beq.w	8009602 <_dtoa_r+0x43a>
 8009818:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800981a:	1e73      	subs	r3, r6, #1
 800981c:	9315      	str	r3, [sp, #84]	@ 0x54
 800981e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009822:	2b30      	cmp	r3, #48	@ 0x30
 8009824:	d0f8      	beq.n	8009818 <_dtoa_r+0x650>
 8009826:	9f04      	ldr	r7, [sp, #16]
 8009828:	e73e      	b.n	80096a8 <_dtoa_r+0x4e0>
 800982a:	4b9b      	ldr	r3, [pc, #620]	@ (8009a98 <_dtoa_r+0x8d0>)
 800982c:	f7f6 ff04 	bl	8000638 <__aeabi_dmul>
 8009830:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009834:	e7bc      	b.n	80097b0 <_dtoa_r+0x5e8>
 8009836:	d10c      	bne.n	8009852 <_dtoa_r+0x68a>
 8009838:	4b98      	ldr	r3, [pc, #608]	@ (8009a9c <_dtoa_r+0x8d4>)
 800983a:	2200      	movs	r2, #0
 800983c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009840:	f7f6 fefa 	bl	8000638 <__aeabi_dmul>
 8009844:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009848:	f7f7 f97c 	bl	8000b44 <__aeabi_dcmpge>
 800984c:	2800      	cmp	r0, #0
 800984e:	f000 8157 	beq.w	8009b00 <_dtoa_r+0x938>
 8009852:	2400      	movs	r4, #0
 8009854:	4625      	mov	r5, r4
 8009856:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009858:	43db      	mvns	r3, r3
 800985a:	9304      	str	r3, [sp, #16]
 800985c:	4656      	mov	r6, sl
 800985e:	2700      	movs	r7, #0
 8009860:	4621      	mov	r1, r4
 8009862:	4658      	mov	r0, fp
 8009864:	f000 fbb4 	bl	8009fd0 <_Bfree>
 8009868:	2d00      	cmp	r5, #0
 800986a:	d0dc      	beq.n	8009826 <_dtoa_r+0x65e>
 800986c:	b12f      	cbz	r7, 800987a <_dtoa_r+0x6b2>
 800986e:	42af      	cmp	r7, r5
 8009870:	d003      	beq.n	800987a <_dtoa_r+0x6b2>
 8009872:	4639      	mov	r1, r7
 8009874:	4658      	mov	r0, fp
 8009876:	f000 fbab 	bl	8009fd0 <_Bfree>
 800987a:	4629      	mov	r1, r5
 800987c:	4658      	mov	r0, fp
 800987e:	f000 fba7 	bl	8009fd0 <_Bfree>
 8009882:	e7d0      	b.n	8009826 <_dtoa_r+0x65e>
 8009884:	9704      	str	r7, [sp, #16]
 8009886:	4633      	mov	r3, r6
 8009888:	461e      	mov	r6, r3
 800988a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800988e:	2a39      	cmp	r2, #57	@ 0x39
 8009890:	d107      	bne.n	80098a2 <_dtoa_r+0x6da>
 8009892:	459a      	cmp	sl, r3
 8009894:	d1f8      	bne.n	8009888 <_dtoa_r+0x6c0>
 8009896:	9a04      	ldr	r2, [sp, #16]
 8009898:	3201      	adds	r2, #1
 800989a:	9204      	str	r2, [sp, #16]
 800989c:	2230      	movs	r2, #48	@ 0x30
 800989e:	f88a 2000 	strb.w	r2, [sl]
 80098a2:	781a      	ldrb	r2, [r3, #0]
 80098a4:	3201      	adds	r2, #1
 80098a6:	701a      	strb	r2, [r3, #0]
 80098a8:	e7bd      	b.n	8009826 <_dtoa_r+0x65e>
 80098aa:	4b7b      	ldr	r3, [pc, #492]	@ (8009a98 <_dtoa_r+0x8d0>)
 80098ac:	2200      	movs	r2, #0
 80098ae:	f7f6 fec3 	bl	8000638 <__aeabi_dmul>
 80098b2:	2200      	movs	r2, #0
 80098b4:	2300      	movs	r3, #0
 80098b6:	4604      	mov	r4, r0
 80098b8:	460d      	mov	r5, r1
 80098ba:	f7f7 f925 	bl	8000b08 <__aeabi_dcmpeq>
 80098be:	2800      	cmp	r0, #0
 80098c0:	f43f aebb 	beq.w	800963a <_dtoa_r+0x472>
 80098c4:	e6f0      	b.n	80096a8 <_dtoa_r+0x4e0>
 80098c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80098c8:	2a00      	cmp	r2, #0
 80098ca:	f000 80db 	beq.w	8009a84 <_dtoa_r+0x8bc>
 80098ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098d0:	2a01      	cmp	r2, #1
 80098d2:	f300 80bf 	bgt.w	8009a54 <_dtoa_r+0x88c>
 80098d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80098d8:	2a00      	cmp	r2, #0
 80098da:	f000 80b7 	beq.w	8009a4c <_dtoa_r+0x884>
 80098de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80098e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80098e4:	4646      	mov	r6, r8
 80098e6:	9a08      	ldr	r2, [sp, #32]
 80098e8:	2101      	movs	r1, #1
 80098ea:	441a      	add	r2, r3
 80098ec:	4658      	mov	r0, fp
 80098ee:	4498      	add	r8, r3
 80098f0:	9208      	str	r2, [sp, #32]
 80098f2:	f000 fc21 	bl	800a138 <__i2b>
 80098f6:	4605      	mov	r5, r0
 80098f8:	b15e      	cbz	r6, 8009912 <_dtoa_r+0x74a>
 80098fa:	9b08      	ldr	r3, [sp, #32]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	dd08      	ble.n	8009912 <_dtoa_r+0x74a>
 8009900:	42b3      	cmp	r3, r6
 8009902:	9a08      	ldr	r2, [sp, #32]
 8009904:	bfa8      	it	ge
 8009906:	4633      	movge	r3, r6
 8009908:	eba8 0803 	sub.w	r8, r8, r3
 800990c:	1af6      	subs	r6, r6, r3
 800990e:	1ad3      	subs	r3, r2, r3
 8009910:	9308      	str	r3, [sp, #32]
 8009912:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009914:	b1f3      	cbz	r3, 8009954 <_dtoa_r+0x78c>
 8009916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009918:	2b00      	cmp	r3, #0
 800991a:	f000 80b7 	beq.w	8009a8c <_dtoa_r+0x8c4>
 800991e:	b18c      	cbz	r4, 8009944 <_dtoa_r+0x77c>
 8009920:	4629      	mov	r1, r5
 8009922:	4622      	mov	r2, r4
 8009924:	4658      	mov	r0, fp
 8009926:	f000 fcc7 	bl	800a2b8 <__pow5mult>
 800992a:	464a      	mov	r2, r9
 800992c:	4601      	mov	r1, r0
 800992e:	4605      	mov	r5, r0
 8009930:	4658      	mov	r0, fp
 8009932:	f000 fc17 	bl	800a164 <__multiply>
 8009936:	4649      	mov	r1, r9
 8009938:	9004      	str	r0, [sp, #16]
 800993a:	4658      	mov	r0, fp
 800993c:	f000 fb48 	bl	8009fd0 <_Bfree>
 8009940:	9b04      	ldr	r3, [sp, #16]
 8009942:	4699      	mov	r9, r3
 8009944:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009946:	1b1a      	subs	r2, r3, r4
 8009948:	d004      	beq.n	8009954 <_dtoa_r+0x78c>
 800994a:	4649      	mov	r1, r9
 800994c:	4658      	mov	r0, fp
 800994e:	f000 fcb3 	bl	800a2b8 <__pow5mult>
 8009952:	4681      	mov	r9, r0
 8009954:	2101      	movs	r1, #1
 8009956:	4658      	mov	r0, fp
 8009958:	f000 fbee 	bl	800a138 <__i2b>
 800995c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800995e:	4604      	mov	r4, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	f000 81cf 	beq.w	8009d04 <_dtoa_r+0xb3c>
 8009966:	461a      	mov	r2, r3
 8009968:	4601      	mov	r1, r0
 800996a:	4658      	mov	r0, fp
 800996c:	f000 fca4 	bl	800a2b8 <__pow5mult>
 8009970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009972:	2b01      	cmp	r3, #1
 8009974:	4604      	mov	r4, r0
 8009976:	f300 8095 	bgt.w	8009aa4 <_dtoa_r+0x8dc>
 800997a:	9b02      	ldr	r3, [sp, #8]
 800997c:	2b00      	cmp	r3, #0
 800997e:	f040 8087 	bne.w	8009a90 <_dtoa_r+0x8c8>
 8009982:	9b03      	ldr	r3, [sp, #12]
 8009984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009988:	2b00      	cmp	r3, #0
 800998a:	f040 8089 	bne.w	8009aa0 <_dtoa_r+0x8d8>
 800998e:	9b03      	ldr	r3, [sp, #12]
 8009990:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009994:	0d1b      	lsrs	r3, r3, #20
 8009996:	051b      	lsls	r3, r3, #20
 8009998:	b12b      	cbz	r3, 80099a6 <_dtoa_r+0x7de>
 800999a:	9b08      	ldr	r3, [sp, #32]
 800999c:	3301      	adds	r3, #1
 800999e:	9308      	str	r3, [sp, #32]
 80099a0:	f108 0801 	add.w	r8, r8, #1
 80099a4:	2301      	movs	r3, #1
 80099a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80099a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f000 81b0 	beq.w	8009d10 <_dtoa_r+0xb48>
 80099b0:	6923      	ldr	r3, [r4, #16]
 80099b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80099b6:	6918      	ldr	r0, [r3, #16]
 80099b8:	f000 fb72 	bl	800a0a0 <__hi0bits>
 80099bc:	f1c0 0020 	rsb	r0, r0, #32
 80099c0:	9b08      	ldr	r3, [sp, #32]
 80099c2:	4418      	add	r0, r3
 80099c4:	f010 001f 	ands.w	r0, r0, #31
 80099c8:	d077      	beq.n	8009aba <_dtoa_r+0x8f2>
 80099ca:	f1c0 0320 	rsb	r3, r0, #32
 80099ce:	2b04      	cmp	r3, #4
 80099d0:	dd6b      	ble.n	8009aaa <_dtoa_r+0x8e2>
 80099d2:	9b08      	ldr	r3, [sp, #32]
 80099d4:	f1c0 001c 	rsb	r0, r0, #28
 80099d8:	4403      	add	r3, r0
 80099da:	4480      	add	r8, r0
 80099dc:	4406      	add	r6, r0
 80099de:	9308      	str	r3, [sp, #32]
 80099e0:	f1b8 0f00 	cmp.w	r8, #0
 80099e4:	dd05      	ble.n	80099f2 <_dtoa_r+0x82a>
 80099e6:	4649      	mov	r1, r9
 80099e8:	4642      	mov	r2, r8
 80099ea:	4658      	mov	r0, fp
 80099ec:	f000 fcbe 	bl	800a36c <__lshift>
 80099f0:	4681      	mov	r9, r0
 80099f2:	9b08      	ldr	r3, [sp, #32]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	dd05      	ble.n	8009a04 <_dtoa_r+0x83c>
 80099f8:	4621      	mov	r1, r4
 80099fa:	461a      	mov	r2, r3
 80099fc:	4658      	mov	r0, fp
 80099fe:	f000 fcb5 	bl	800a36c <__lshift>
 8009a02:	4604      	mov	r4, r0
 8009a04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d059      	beq.n	8009abe <_dtoa_r+0x8f6>
 8009a0a:	4621      	mov	r1, r4
 8009a0c:	4648      	mov	r0, r9
 8009a0e:	f000 fd19 	bl	800a444 <__mcmp>
 8009a12:	2800      	cmp	r0, #0
 8009a14:	da53      	bge.n	8009abe <_dtoa_r+0x8f6>
 8009a16:	1e7b      	subs	r3, r7, #1
 8009a18:	9304      	str	r3, [sp, #16]
 8009a1a:	4649      	mov	r1, r9
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	220a      	movs	r2, #10
 8009a20:	4658      	mov	r0, fp
 8009a22:	f000 faf7 	bl	800a014 <__multadd>
 8009a26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a28:	4681      	mov	r9, r0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	f000 8172 	beq.w	8009d14 <_dtoa_r+0xb4c>
 8009a30:	2300      	movs	r3, #0
 8009a32:	4629      	mov	r1, r5
 8009a34:	220a      	movs	r2, #10
 8009a36:	4658      	mov	r0, fp
 8009a38:	f000 faec 	bl	800a014 <__multadd>
 8009a3c:	9b00      	ldr	r3, [sp, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	4605      	mov	r5, r0
 8009a42:	dc67      	bgt.n	8009b14 <_dtoa_r+0x94c>
 8009a44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	dc41      	bgt.n	8009ace <_dtoa_r+0x906>
 8009a4a:	e063      	b.n	8009b14 <_dtoa_r+0x94c>
 8009a4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009a4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009a52:	e746      	b.n	80098e2 <_dtoa_r+0x71a>
 8009a54:	9b07      	ldr	r3, [sp, #28]
 8009a56:	1e5c      	subs	r4, r3, #1
 8009a58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a5a:	42a3      	cmp	r3, r4
 8009a5c:	bfbf      	itttt	lt
 8009a5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009a60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009a62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009a64:	1ae3      	sublt	r3, r4, r3
 8009a66:	bfb4      	ite	lt
 8009a68:	18d2      	addlt	r2, r2, r3
 8009a6a:	1b1c      	subge	r4, r3, r4
 8009a6c:	9b07      	ldr	r3, [sp, #28]
 8009a6e:	bfbc      	itt	lt
 8009a70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009a72:	2400      	movlt	r4, #0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	bfb5      	itete	lt
 8009a78:	eba8 0603 	sublt.w	r6, r8, r3
 8009a7c:	9b07      	ldrge	r3, [sp, #28]
 8009a7e:	2300      	movlt	r3, #0
 8009a80:	4646      	movge	r6, r8
 8009a82:	e730      	b.n	80098e6 <_dtoa_r+0x71e>
 8009a84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009a86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009a88:	4646      	mov	r6, r8
 8009a8a:	e735      	b.n	80098f8 <_dtoa_r+0x730>
 8009a8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a8e:	e75c      	b.n	800994a <_dtoa_r+0x782>
 8009a90:	2300      	movs	r3, #0
 8009a92:	e788      	b.n	80099a6 <_dtoa_r+0x7de>
 8009a94:	3fe00000 	.word	0x3fe00000
 8009a98:	40240000 	.word	0x40240000
 8009a9c:	40140000 	.word	0x40140000
 8009aa0:	9b02      	ldr	r3, [sp, #8]
 8009aa2:	e780      	b.n	80099a6 <_dtoa_r+0x7de>
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009aa8:	e782      	b.n	80099b0 <_dtoa_r+0x7e8>
 8009aaa:	d099      	beq.n	80099e0 <_dtoa_r+0x818>
 8009aac:	9a08      	ldr	r2, [sp, #32]
 8009aae:	331c      	adds	r3, #28
 8009ab0:	441a      	add	r2, r3
 8009ab2:	4498      	add	r8, r3
 8009ab4:	441e      	add	r6, r3
 8009ab6:	9208      	str	r2, [sp, #32]
 8009ab8:	e792      	b.n	80099e0 <_dtoa_r+0x818>
 8009aba:	4603      	mov	r3, r0
 8009abc:	e7f6      	b.n	8009aac <_dtoa_r+0x8e4>
 8009abe:	9b07      	ldr	r3, [sp, #28]
 8009ac0:	9704      	str	r7, [sp, #16]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	dc20      	bgt.n	8009b08 <_dtoa_r+0x940>
 8009ac6:	9300      	str	r3, [sp, #0]
 8009ac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	dd1e      	ble.n	8009b0c <_dtoa_r+0x944>
 8009ace:	9b00      	ldr	r3, [sp, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	f47f aec0 	bne.w	8009856 <_dtoa_r+0x68e>
 8009ad6:	4621      	mov	r1, r4
 8009ad8:	2205      	movs	r2, #5
 8009ada:	4658      	mov	r0, fp
 8009adc:	f000 fa9a 	bl	800a014 <__multadd>
 8009ae0:	4601      	mov	r1, r0
 8009ae2:	4604      	mov	r4, r0
 8009ae4:	4648      	mov	r0, r9
 8009ae6:	f000 fcad 	bl	800a444 <__mcmp>
 8009aea:	2800      	cmp	r0, #0
 8009aec:	f77f aeb3 	ble.w	8009856 <_dtoa_r+0x68e>
 8009af0:	4656      	mov	r6, sl
 8009af2:	2331      	movs	r3, #49	@ 0x31
 8009af4:	f806 3b01 	strb.w	r3, [r6], #1
 8009af8:	9b04      	ldr	r3, [sp, #16]
 8009afa:	3301      	adds	r3, #1
 8009afc:	9304      	str	r3, [sp, #16]
 8009afe:	e6ae      	b.n	800985e <_dtoa_r+0x696>
 8009b00:	9c07      	ldr	r4, [sp, #28]
 8009b02:	9704      	str	r7, [sp, #16]
 8009b04:	4625      	mov	r5, r4
 8009b06:	e7f3      	b.n	8009af0 <_dtoa_r+0x928>
 8009b08:	9b07      	ldr	r3, [sp, #28]
 8009b0a:	9300      	str	r3, [sp, #0]
 8009b0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	f000 8104 	beq.w	8009d1c <_dtoa_r+0xb54>
 8009b14:	2e00      	cmp	r6, #0
 8009b16:	dd05      	ble.n	8009b24 <_dtoa_r+0x95c>
 8009b18:	4629      	mov	r1, r5
 8009b1a:	4632      	mov	r2, r6
 8009b1c:	4658      	mov	r0, fp
 8009b1e:	f000 fc25 	bl	800a36c <__lshift>
 8009b22:	4605      	mov	r5, r0
 8009b24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d05a      	beq.n	8009be0 <_dtoa_r+0xa18>
 8009b2a:	6869      	ldr	r1, [r5, #4]
 8009b2c:	4658      	mov	r0, fp
 8009b2e:	f000 fa0f 	bl	8009f50 <_Balloc>
 8009b32:	4606      	mov	r6, r0
 8009b34:	b928      	cbnz	r0, 8009b42 <_dtoa_r+0x97a>
 8009b36:	4b84      	ldr	r3, [pc, #528]	@ (8009d48 <_dtoa_r+0xb80>)
 8009b38:	4602      	mov	r2, r0
 8009b3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009b3e:	f7ff bb5a 	b.w	80091f6 <_dtoa_r+0x2e>
 8009b42:	692a      	ldr	r2, [r5, #16]
 8009b44:	3202      	adds	r2, #2
 8009b46:	0092      	lsls	r2, r2, #2
 8009b48:	f105 010c 	add.w	r1, r5, #12
 8009b4c:	300c      	adds	r0, #12
 8009b4e:	f7ff faa2 	bl	8009096 <memcpy>
 8009b52:	2201      	movs	r2, #1
 8009b54:	4631      	mov	r1, r6
 8009b56:	4658      	mov	r0, fp
 8009b58:	f000 fc08 	bl	800a36c <__lshift>
 8009b5c:	f10a 0301 	add.w	r3, sl, #1
 8009b60:	9307      	str	r3, [sp, #28]
 8009b62:	9b00      	ldr	r3, [sp, #0]
 8009b64:	4453      	add	r3, sl
 8009b66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b68:	9b02      	ldr	r3, [sp, #8]
 8009b6a:	f003 0301 	and.w	r3, r3, #1
 8009b6e:	462f      	mov	r7, r5
 8009b70:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b72:	4605      	mov	r5, r0
 8009b74:	9b07      	ldr	r3, [sp, #28]
 8009b76:	4621      	mov	r1, r4
 8009b78:	3b01      	subs	r3, #1
 8009b7a:	4648      	mov	r0, r9
 8009b7c:	9300      	str	r3, [sp, #0]
 8009b7e:	f7ff fa98 	bl	80090b2 <quorem>
 8009b82:	4639      	mov	r1, r7
 8009b84:	9002      	str	r0, [sp, #8]
 8009b86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009b8a:	4648      	mov	r0, r9
 8009b8c:	f000 fc5a 	bl	800a444 <__mcmp>
 8009b90:	462a      	mov	r2, r5
 8009b92:	9008      	str	r0, [sp, #32]
 8009b94:	4621      	mov	r1, r4
 8009b96:	4658      	mov	r0, fp
 8009b98:	f000 fc70 	bl	800a47c <__mdiff>
 8009b9c:	68c2      	ldr	r2, [r0, #12]
 8009b9e:	4606      	mov	r6, r0
 8009ba0:	bb02      	cbnz	r2, 8009be4 <_dtoa_r+0xa1c>
 8009ba2:	4601      	mov	r1, r0
 8009ba4:	4648      	mov	r0, r9
 8009ba6:	f000 fc4d 	bl	800a444 <__mcmp>
 8009baa:	4602      	mov	r2, r0
 8009bac:	4631      	mov	r1, r6
 8009bae:	4658      	mov	r0, fp
 8009bb0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009bb2:	f000 fa0d 	bl	8009fd0 <_Bfree>
 8009bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009bba:	9e07      	ldr	r6, [sp, #28]
 8009bbc:	ea43 0102 	orr.w	r1, r3, r2
 8009bc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bc2:	4319      	orrs	r1, r3
 8009bc4:	d110      	bne.n	8009be8 <_dtoa_r+0xa20>
 8009bc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009bca:	d029      	beq.n	8009c20 <_dtoa_r+0xa58>
 8009bcc:	9b08      	ldr	r3, [sp, #32]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	dd02      	ble.n	8009bd8 <_dtoa_r+0xa10>
 8009bd2:	9b02      	ldr	r3, [sp, #8]
 8009bd4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009bd8:	9b00      	ldr	r3, [sp, #0]
 8009bda:	f883 8000 	strb.w	r8, [r3]
 8009bde:	e63f      	b.n	8009860 <_dtoa_r+0x698>
 8009be0:	4628      	mov	r0, r5
 8009be2:	e7bb      	b.n	8009b5c <_dtoa_r+0x994>
 8009be4:	2201      	movs	r2, #1
 8009be6:	e7e1      	b.n	8009bac <_dtoa_r+0x9e4>
 8009be8:	9b08      	ldr	r3, [sp, #32]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	db04      	blt.n	8009bf8 <_dtoa_r+0xa30>
 8009bee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009bf0:	430b      	orrs	r3, r1
 8009bf2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009bf4:	430b      	orrs	r3, r1
 8009bf6:	d120      	bne.n	8009c3a <_dtoa_r+0xa72>
 8009bf8:	2a00      	cmp	r2, #0
 8009bfa:	dded      	ble.n	8009bd8 <_dtoa_r+0xa10>
 8009bfc:	4649      	mov	r1, r9
 8009bfe:	2201      	movs	r2, #1
 8009c00:	4658      	mov	r0, fp
 8009c02:	f000 fbb3 	bl	800a36c <__lshift>
 8009c06:	4621      	mov	r1, r4
 8009c08:	4681      	mov	r9, r0
 8009c0a:	f000 fc1b 	bl	800a444 <__mcmp>
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	dc03      	bgt.n	8009c1a <_dtoa_r+0xa52>
 8009c12:	d1e1      	bne.n	8009bd8 <_dtoa_r+0xa10>
 8009c14:	f018 0f01 	tst.w	r8, #1
 8009c18:	d0de      	beq.n	8009bd8 <_dtoa_r+0xa10>
 8009c1a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009c1e:	d1d8      	bne.n	8009bd2 <_dtoa_r+0xa0a>
 8009c20:	9a00      	ldr	r2, [sp, #0]
 8009c22:	2339      	movs	r3, #57	@ 0x39
 8009c24:	7013      	strb	r3, [r2, #0]
 8009c26:	4633      	mov	r3, r6
 8009c28:	461e      	mov	r6, r3
 8009c2a:	3b01      	subs	r3, #1
 8009c2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009c30:	2a39      	cmp	r2, #57	@ 0x39
 8009c32:	d052      	beq.n	8009cda <_dtoa_r+0xb12>
 8009c34:	3201      	adds	r2, #1
 8009c36:	701a      	strb	r2, [r3, #0]
 8009c38:	e612      	b.n	8009860 <_dtoa_r+0x698>
 8009c3a:	2a00      	cmp	r2, #0
 8009c3c:	dd07      	ble.n	8009c4e <_dtoa_r+0xa86>
 8009c3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009c42:	d0ed      	beq.n	8009c20 <_dtoa_r+0xa58>
 8009c44:	9a00      	ldr	r2, [sp, #0]
 8009c46:	f108 0301 	add.w	r3, r8, #1
 8009c4a:	7013      	strb	r3, [r2, #0]
 8009c4c:	e608      	b.n	8009860 <_dtoa_r+0x698>
 8009c4e:	9b07      	ldr	r3, [sp, #28]
 8009c50:	9a07      	ldr	r2, [sp, #28]
 8009c52:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009c56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d028      	beq.n	8009cae <_dtoa_r+0xae6>
 8009c5c:	4649      	mov	r1, r9
 8009c5e:	2300      	movs	r3, #0
 8009c60:	220a      	movs	r2, #10
 8009c62:	4658      	mov	r0, fp
 8009c64:	f000 f9d6 	bl	800a014 <__multadd>
 8009c68:	42af      	cmp	r7, r5
 8009c6a:	4681      	mov	r9, r0
 8009c6c:	f04f 0300 	mov.w	r3, #0
 8009c70:	f04f 020a 	mov.w	r2, #10
 8009c74:	4639      	mov	r1, r7
 8009c76:	4658      	mov	r0, fp
 8009c78:	d107      	bne.n	8009c8a <_dtoa_r+0xac2>
 8009c7a:	f000 f9cb 	bl	800a014 <__multadd>
 8009c7e:	4607      	mov	r7, r0
 8009c80:	4605      	mov	r5, r0
 8009c82:	9b07      	ldr	r3, [sp, #28]
 8009c84:	3301      	adds	r3, #1
 8009c86:	9307      	str	r3, [sp, #28]
 8009c88:	e774      	b.n	8009b74 <_dtoa_r+0x9ac>
 8009c8a:	f000 f9c3 	bl	800a014 <__multadd>
 8009c8e:	4629      	mov	r1, r5
 8009c90:	4607      	mov	r7, r0
 8009c92:	2300      	movs	r3, #0
 8009c94:	220a      	movs	r2, #10
 8009c96:	4658      	mov	r0, fp
 8009c98:	f000 f9bc 	bl	800a014 <__multadd>
 8009c9c:	4605      	mov	r5, r0
 8009c9e:	e7f0      	b.n	8009c82 <_dtoa_r+0xaba>
 8009ca0:	9b00      	ldr	r3, [sp, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	bfcc      	ite	gt
 8009ca6:	461e      	movgt	r6, r3
 8009ca8:	2601      	movle	r6, #1
 8009caa:	4456      	add	r6, sl
 8009cac:	2700      	movs	r7, #0
 8009cae:	4649      	mov	r1, r9
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	4658      	mov	r0, fp
 8009cb4:	f000 fb5a 	bl	800a36c <__lshift>
 8009cb8:	4621      	mov	r1, r4
 8009cba:	4681      	mov	r9, r0
 8009cbc:	f000 fbc2 	bl	800a444 <__mcmp>
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	dcb0      	bgt.n	8009c26 <_dtoa_r+0xa5e>
 8009cc4:	d102      	bne.n	8009ccc <_dtoa_r+0xb04>
 8009cc6:	f018 0f01 	tst.w	r8, #1
 8009cca:	d1ac      	bne.n	8009c26 <_dtoa_r+0xa5e>
 8009ccc:	4633      	mov	r3, r6
 8009cce:	461e      	mov	r6, r3
 8009cd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009cd4:	2a30      	cmp	r2, #48	@ 0x30
 8009cd6:	d0fa      	beq.n	8009cce <_dtoa_r+0xb06>
 8009cd8:	e5c2      	b.n	8009860 <_dtoa_r+0x698>
 8009cda:	459a      	cmp	sl, r3
 8009cdc:	d1a4      	bne.n	8009c28 <_dtoa_r+0xa60>
 8009cde:	9b04      	ldr	r3, [sp, #16]
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	9304      	str	r3, [sp, #16]
 8009ce4:	2331      	movs	r3, #49	@ 0x31
 8009ce6:	f88a 3000 	strb.w	r3, [sl]
 8009cea:	e5b9      	b.n	8009860 <_dtoa_r+0x698>
 8009cec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009cee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009d4c <_dtoa_r+0xb84>
 8009cf2:	b11b      	cbz	r3, 8009cfc <_dtoa_r+0xb34>
 8009cf4:	f10a 0308 	add.w	r3, sl, #8
 8009cf8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009cfa:	6013      	str	r3, [r2, #0]
 8009cfc:	4650      	mov	r0, sl
 8009cfe:	b019      	add	sp, #100	@ 0x64
 8009d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	f77f ae37 	ble.w	800997a <_dtoa_r+0x7b2>
 8009d0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d10:	2001      	movs	r0, #1
 8009d12:	e655      	b.n	80099c0 <_dtoa_r+0x7f8>
 8009d14:	9b00      	ldr	r3, [sp, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	f77f aed6 	ble.w	8009ac8 <_dtoa_r+0x900>
 8009d1c:	4656      	mov	r6, sl
 8009d1e:	4621      	mov	r1, r4
 8009d20:	4648      	mov	r0, r9
 8009d22:	f7ff f9c6 	bl	80090b2 <quorem>
 8009d26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009d2a:	f806 8b01 	strb.w	r8, [r6], #1
 8009d2e:	9b00      	ldr	r3, [sp, #0]
 8009d30:	eba6 020a 	sub.w	r2, r6, sl
 8009d34:	4293      	cmp	r3, r2
 8009d36:	ddb3      	ble.n	8009ca0 <_dtoa_r+0xad8>
 8009d38:	4649      	mov	r1, r9
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	220a      	movs	r2, #10
 8009d3e:	4658      	mov	r0, fp
 8009d40:	f000 f968 	bl	800a014 <__multadd>
 8009d44:	4681      	mov	r9, r0
 8009d46:	e7ea      	b.n	8009d1e <_dtoa_r+0xb56>
 8009d48:	0800af58 	.word	0x0800af58
 8009d4c:	0800aedc 	.word	0x0800aedc

08009d50 <_free_r>:
 8009d50:	b538      	push	{r3, r4, r5, lr}
 8009d52:	4605      	mov	r5, r0
 8009d54:	2900      	cmp	r1, #0
 8009d56:	d041      	beq.n	8009ddc <_free_r+0x8c>
 8009d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d5c:	1f0c      	subs	r4, r1, #4
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	bfb8      	it	lt
 8009d62:	18e4      	addlt	r4, r4, r3
 8009d64:	f000 f8e8 	bl	8009f38 <__malloc_lock>
 8009d68:	4a1d      	ldr	r2, [pc, #116]	@ (8009de0 <_free_r+0x90>)
 8009d6a:	6813      	ldr	r3, [r2, #0]
 8009d6c:	b933      	cbnz	r3, 8009d7c <_free_r+0x2c>
 8009d6e:	6063      	str	r3, [r4, #4]
 8009d70:	6014      	str	r4, [r2, #0]
 8009d72:	4628      	mov	r0, r5
 8009d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d78:	f000 b8e4 	b.w	8009f44 <__malloc_unlock>
 8009d7c:	42a3      	cmp	r3, r4
 8009d7e:	d908      	bls.n	8009d92 <_free_r+0x42>
 8009d80:	6820      	ldr	r0, [r4, #0]
 8009d82:	1821      	adds	r1, r4, r0
 8009d84:	428b      	cmp	r3, r1
 8009d86:	bf01      	itttt	eq
 8009d88:	6819      	ldreq	r1, [r3, #0]
 8009d8a:	685b      	ldreq	r3, [r3, #4]
 8009d8c:	1809      	addeq	r1, r1, r0
 8009d8e:	6021      	streq	r1, [r4, #0]
 8009d90:	e7ed      	b.n	8009d6e <_free_r+0x1e>
 8009d92:	461a      	mov	r2, r3
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	b10b      	cbz	r3, 8009d9c <_free_r+0x4c>
 8009d98:	42a3      	cmp	r3, r4
 8009d9a:	d9fa      	bls.n	8009d92 <_free_r+0x42>
 8009d9c:	6811      	ldr	r1, [r2, #0]
 8009d9e:	1850      	adds	r0, r2, r1
 8009da0:	42a0      	cmp	r0, r4
 8009da2:	d10b      	bne.n	8009dbc <_free_r+0x6c>
 8009da4:	6820      	ldr	r0, [r4, #0]
 8009da6:	4401      	add	r1, r0
 8009da8:	1850      	adds	r0, r2, r1
 8009daa:	4283      	cmp	r3, r0
 8009dac:	6011      	str	r1, [r2, #0]
 8009dae:	d1e0      	bne.n	8009d72 <_free_r+0x22>
 8009db0:	6818      	ldr	r0, [r3, #0]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	6053      	str	r3, [r2, #4]
 8009db6:	4408      	add	r0, r1
 8009db8:	6010      	str	r0, [r2, #0]
 8009dba:	e7da      	b.n	8009d72 <_free_r+0x22>
 8009dbc:	d902      	bls.n	8009dc4 <_free_r+0x74>
 8009dbe:	230c      	movs	r3, #12
 8009dc0:	602b      	str	r3, [r5, #0]
 8009dc2:	e7d6      	b.n	8009d72 <_free_r+0x22>
 8009dc4:	6820      	ldr	r0, [r4, #0]
 8009dc6:	1821      	adds	r1, r4, r0
 8009dc8:	428b      	cmp	r3, r1
 8009dca:	bf04      	itt	eq
 8009dcc:	6819      	ldreq	r1, [r3, #0]
 8009dce:	685b      	ldreq	r3, [r3, #4]
 8009dd0:	6063      	str	r3, [r4, #4]
 8009dd2:	bf04      	itt	eq
 8009dd4:	1809      	addeq	r1, r1, r0
 8009dd6:	6021      	streq	r1, [r4, #0]
 8009dd8:	6054      	str	r4, [r2, #4]
 8009dda:	e7ca      	b.n	8009d72 <_free_r+0x22>
 8009ddc:	bd38      	pop	{r3, r4, r5, pc}
 8009dde:	bf00      	nop
 8009de0:	200049e8 	.word	0x200049e8

08009de4 <malloc>:
 8009de4:	4b02      	ldr	r3, [pc, #8]	@ (8009df0 <malloc+0xc>)
 8009de6:	4601      	mov	r1, r0
 8009de8:	6818      	ldr	r0, [r3, #0]
 8009dea:	f000 b825 	b.w	8009e38 <_malloc_r>
 8009dee:	bf00      	nop
 8009df0:	20000024 	.word	0x20000024

08009df4 <sbrk_aligned>:
 8009df4:	b570      	push	{r4, r5, r6, lr}
 8009df6:	4e0f      	ldr	r6, [pc, #60]	@ (8009e34 <sbrk_aligned+0x40>)
 8009df8:	460c      	mov	r4, r1
 8009dfa:	6831      	ldr	r1, [r6, #0]
 8009dfc:	4605      	mov	r5, r0
 8009dfe:	b911      	cbnz	r1, 8009e06 <sbrk_aligned+0x12>
 8009e00:	f000 feaa 	bl	800ab58 <_sbrk_r>
 8009e04:	6030      	str	r0, [r6, #0]
 8009e06:	4621      	mov	r1, r4
 8009e08:	4628      	mov	r0, r5
 8009e0a:	f000 fea5 	bl	800ab58 <_sbrk_r>
 8009e0e:	1c43      	adds	r3, r0, #1
 8009e10:	d103      	bne.n	8009e1a <sbrk_aligned+0x26>
 8009e12:	f04f 34ff 	mov.w	r4, #4294967295
 8009e16:	4620      	mov	r0, r4
 8009e18:	bd70      	pop	{r4, r5, r6, pc}
 8009e1a:	1cc4      	adds	r4, r0, #3
 8009e1c:	f024 0403 	bic.w	r4, r4, #3
 8009e20:	42a0      	cmp	r0, r4
 8009e22:	d0f8      	beq.n	8009e16 <sbrk_aligned+0x22>
 8009e24:	1a21      	subs	r1, r4, r0
 8009e26:	4628      	mov	r0, r5
 8009e28:	f000 fe96 	bl	800ab58 <_sbrk_r>
 8009e2c:	3001      	adds	r0, #1
 8009e2e:	d1f2      	bne.n	8009e16 <sbrk_aligned+0x22>
 8009e30:	e7ef      	b.n	8009e12 <sbrk_aligned+0x1e>
 8009e32:	bf00      	nop
 8009e34:	200049e4 	.word	0x200049e4

08009e38 <_malloc_r>:
 8009e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e3c:	1ccd      	adds	r5, r1, #3
 8009e3e:	f025 0503 	bic.w	r5, r5, #3
 8009e42:	3508      	adds	r5, #8
 8009e44:	2d0c      	cmp	r5, #12
 8009e46:	bf38      	it	cc
 8009e48:	250c      	movcc	r5, #12
 8009e4a:	2d00      	cmp	r5, #0
 8009e4c:	4606      	mov	r6, r0
 8009e4e:	db01      	blt.n	8009e54 <_malloc_r+0x1c>
 8009e50:	42a9      	cmp	r1, r5
 8009e52:	d904      	bls.n	8009e5e <_malloc_r+0x26>
 8009e54:	230c      	movs	r3, #12
 8009e56:	6033      	str	r3, [r6, #0]
 8009e58:	2000      	movs	r0, #0
 8009e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009f34 <_malloc_r+0xfc>
 8009e62:	f000 f869 	bl	8009f38 <__malloc_lock>
 8009e66:	f8d8 3000 	ldr.w	r3, [r8]
 8009e6a:	461c      	mov	r4, r3
 8009e6c:	bb44      	cbnz	r4, 8009ec0 <_malloc_r+0x88>
 8009e6e:	4629      	mov	r1, r5
 8009e70:	4630      	mov	r0, r6
 8009e72:	f7ff ffbf 	bl	8009df4 <sbrk_aligned>
 8009e76:	1c43      	adds	r3, r0, #1
 8009e78:	4604      	mov	r4, r0
 8009e7a:	d158      	bne.n	8009f2e <_malloc_r+0xf6>
 8009e7c:	f8d8 4000 	ldr.w	r4, [r8]
 8009e80:	4627      	mov	r7, r4
 8009e82:	2f00      	cmp	r7, #0
 8009e84:	d143      	bne.n	8009f0e <_malloc_r+0xd6>
 8009e86:	2c00      	cmp	r4, #0
 8009e88:	d04b      	beq.n	8009f22 <_malloc_r+0xea>
 8009e8a:	6823      	ldr	r3, [r4, #0]
 8009e8c:	4639      	mov	r1, r7
 8009e8e:	4630      	mov	r0, r6
 8009e90:	eb04 0903 	add.w	r9, r4, r3
 8009e94:	f000 fe60 	bl	800ab58 <_sbrk_r>
 8009e98:	4581      	cmp	r9, r0
 8009e9a:	d142      	bne.n	8009f22 <_malloc_r+0xea>
 8009e9c:	6821      	ldr	r1, [r4, #0]
 8009e9e:	1a6d      	subs	r5, r5, r1
 8009ea0:	4629      	mov	r1, r5
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	f7ff ffa6 	bl	8009df4 <sbrk_aligned>
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	d03a      	beq.n	8009f22 <_malloc_r+0xea>
 8009eac:	6823      	ldr	r3, [r4, #0]
 8009eae:	442b      	add	r3, r5
 8009eb0:	6023      	str	r3, [r4, #0]
 8009eb2:	f8d8 3000 	ldr.w	r3, [r8]
 8009eb6:	685a      	ldr	r2, [r3, #4]
 8009eb8:	bb62      	cbnz	r2, 8009f14 <_malloc_r+0xdc>
 8009eba:	f8c8 7000 	str.w	r7, [r8]
 8009ebe:	e00f      	b.n	8009ee0 <_malloc_r+0xa8>
 8009ec0:	6822      	ldr	r2, [r4, #0]
 8009ec2:	1b52      	subs	r2, r2, r5
 8009ec4:	d420      	bmi.n	8009f08 <_malloc_r+0xd0>
 8009ec6:	2a0b      	cmp	r2, #11
 8009ec8:	d917      	bls.n	8009efa <_malloc_r+0xc2>
 8009eca:	1961      	adds	r1, r4, r5
 8009ecc:	42a3      	cmp	r3, r4
 8009ece:	6025      	str	r5, [r4, #0]
 8009ed0:	bf18      	it	ne
 8009ed2:	6059      	strne	r1, [r3, #4]
 8009ed4:	6863      	ldr	r3, [r4, #4]
 8009ed6:	bf08      	it	eq
 8009ed8:	f8c8 1000 	streq.w	r1, [r8]
 8009edc:	5162      	str	r2, [r4, r5]
 8009ede:	604b      	str	r3, [r1, #4]
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	f000 f82f 	bl	8009f44 <__malloc_unlock>
 8009ee6:	f104 000b 	add.w	r0, r4, #11
 8009eea:	1d23      	adds	r3, r4, #4
 8009eec:	f020 0007 	bic.w	r0, r0, #7
 8009ef0:	1ac2      	subs	r2, r0, r3
 8009ef2:	bf1c      	itt	ne
 8009ef4:	1a1b      	subne	r3, r3, r0
 8009ef6:	50a3      	strne	r3, [r4, r2]
 8009ef8:	e7af      	b.n	8009e5a <_malloc_r+0x22>
 8009efa:	6862      	ldr	r2, [r4, #4]
 8009efc:	42a3      	cmp	r3, r4
 8009efe:	bf0c      	ite	eq
 8009f00:	f8c8 2000 	streq.w	r2, [r8]
 8009f04:	605a      	strne	r2, [r3, #4]
 8009f06:	e7eb      	b.n	8009ee0 <_malloc_r+0xa8>
 8009f08:	4623      	mov	r3, r4
 8009f0a:	6864      	ldr	r4, [r4, #4]
 8009f0c:	e7ae      	b.n	8009e6c <_malloc_r+0x34>
 8009f0e:	463c      	mov	r4, r7
 8009f10:	687f      	ldr	r7, [r7, #4]
 8009f12:	e7b6      	b.n	8009e82 <_malloc_r+0x4a>
 8009f14:	461a      	mov	r2, r3
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	42a3      	cmp	r3, r4
 8009f1a:	d1fb      	bne.n	8009f14 <_malloc_r+0xdc>
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	6053      	str	r3, [r2, #4]
 8009f20:	e7de      	b.n	8009ee0 <_malloc_r+0xa8>
 8009f22:	230c      	movs	r3, #12
 8009f24:	6033      	str	r3, [r6, #0]
 8009f26:	4630      	mov	r0, r6
 8009f28:	f000 f80c 	bl	8009f44 <__malloc_unlock>
 8009f2c:	e794      	b.n	8009e58 <_malloc_r+0x20>
 8009f2e:	6005      	str	r5, [r0, #0]
 8009f30:	e7d6      	b.n	8009ee0 <_malloc_r+0xa8>
 8009f32:	bf00      	nop
 8009f34:	200049e8 	.word	0x200049e8

08009f38 <__malloc_lock>:
 8009f38:	4801      	ldr	r0, [pc, #4]	@ (8009f40 <__malloc_lock+0x8>)
 8009f3a:	f7ff b8aa 	b.w	8009092 <__retarget_lock_acquire_recursive>
 8009f3e:	bf00      	nop
 8009f40:	200049e0 	.word	0x200049e0

08009f44 <__malloc_unlock>:
 8009f44:	4801      	ldr	r0, [pc, #4]	@ (8009f4c <__malloc_unlock+0x8>)
 8009f46:	f7ff b8a5 	b.w	8009094 <__retarget_lock_release_recursive>
 8009f4a:	bf00      	nop
 8009f4c:	200049e0 	.word	0x200049e0

08009f50 <_Balloc>:
 8009f50:	b570      	push	{r4, r5, r6, lr}
 8009f52:	69c6      	ldr	r6, [r0, #28]
 8009f54:	4604      	mov	r4, r0
 8009f56:	460d      	mov	r5, r1
 8009f58:	b976      	cbnz	r6, 8009f78 <_Balloc+0x28>
 8009f5a:	2010      	movs	r0, #16
 8009f5c:	f7ff ff42 	bl	8009de4 <malloc>
 8009f60:	4602      	mov	r2, r0
 8009f62:	61e0      	str	r0, [r4, #28]
 8009f64:	b920      	cbnz	r0, 8009f70 <_Balloc+0x20>
 8009f66:	4b18      	ldr	r3, [pc, #96]	@ (8009fc8 <_Balloc+0x78>)
 8009f68:	4818      	ldr	r0, [pc, #96]	@ (8009fcc <_Balloc+0x7c>)
 8009f6a:	216b      	movs	r1, #107	@ 0x6b
 8009f6c:	f000 fe04 	bl	800ab78 <__assert_func>
 8009f70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f74:	6006      	str	r6, [r0, #0]
 8009f76:	60c6      	str	r6, [r0, #12]
 8009f78:	69e6      	ldr	r6, [r4, #28]
 8009f7a:	68f3      	ldr	r3, [r6, #12]
 8009f7c:	b183      	cbz	r3, 8009fa0 <_Balloc+0x50>
 8009f7e:	69e3      	ldr	r3, [r4, #28]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f86:	b9b8      	cbnz	r0, 8009fb8 <_Balloc+0x68>
 8009f88:	2101      	movs	r1, #1
 8009f8a:	fa01 f605 	lsl.w	r6, r1, r5
 8009f8e:	1d72      	adds	r2, r6, #5
 8009f90:	0092      	lsls	r2, r2, #2
 8009f92:	4620      	mov	r0, r4
 8009f94:	f000 fe0e 	bl	800abb4 <_calloc_r>
 8009f98:	b160      	cbz	r0, 8009fb4 <_Balloc+0x64>
 8009f9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f9e:	e00e      	b.n	8009fbe <_Balloc+0x6e>
 8009fa0:	2221      	movs	r2, #33	@ 0x21
 8009fa2:	2104      	movs	r1, #4
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	f000 fe05 	bl	800abb4 <_calloc_r>
 8009faa:	69e3      	ldr	r3, [r4, #28]
 8009fac:	60f0      	str	r0, [r6, #12]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1e4      	bne.n	8009f7e <_Balloc+0x2e>
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	bd70      	pop	{r4, r5, r6, pc}
 8009fb8:	6802      	ldr	r2, [r0, #0]
 8009fba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009fc4:	e7f7      	b.n	8009fb6 <_Balloc+0x66>
 8009fc6:	bf00      	nop
 8009fc8:	0800aee9 	.word	0x0800aee9
 8009fcc:	0800af69 	.word	0x0800af69

08009fd0 <_Bfree>:
 8009fd0:	b570      	push	{r4, r5, r6, lr}
 8009fd2:	69c6      	ldr	r6, [r0, #28]
 8009fd4:	4605      	mov	r5, r0
 8009fd6:	460c      	mov	r4, r1
 8009fd8:	b976      	cbnz	r6, 8009ff8 <_Bfree+0x28>
 8009fda:	2010      	movs	r0, #16
 8009fdc:	f7ff ff02 	bl	8009de4 <malloc>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	61e8      	str	r0, [r5, #28]
 8009fe4:	b920      	cbnz	r0, 8009ff0 <_Bfree+0x20>
 8009fe6:	4b09      	ldr	r3, [pc, #36]	@ (800a00c <_Bfree+0x3c>)
 8009fe8:	4809      	ldr	r0, [pc, #36]	@ (800a010 <_Bfree+0x40>)
 8009fea:	218f      	movs	r1, #143	@ 0x8f
 8009fec:	f000 fdc4 	bl	800ab78 <__assert_func>
 8009ff0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ff4:	6006      	str	r6, [r0, #0]
 8009ff6:	60c6      	str	r6, [r0, #12]
 8009ff8:	b13c      	cbz	r4, 800a00a <_Bfree+0x3a>
 8009ffa:	69eb      	ldr	r3, [r5, #28]
 8009ffc:	6862      	ldr	r2, [r4, #4]
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a004:	6021      	str	r1, [r4, #0]
 800a006:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a00a:	bd70      	pop	{r4, r5, r6, pc}
 800a00c:	0800aee9 	.word	0x0800aee9
 800a010:	0800af69 	.word	0x0800af69

0800a014 <__multadd>:
 800a014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a018:	690d      	ldr	r5, [r1, #16]
 800a01a:	4607      	mov	r7, r0
 800a01c:	460c      	mov	r4, r1
 800a01e:	461e      	mov	r6, r3
 800a020:	f101 0c14 	add.w	ip, r1, #20
 800a024:	2000      	movs	r0, #0
 800a026:	f8dc 3000 	ldr.w	r3, [ip]
 800a02a:	b299      	uxth	r1, r3
 800a02c:	fb02 6101 	mla	r1, r2, r1, r6
 800a030:	0c1e      	lsrs	r6, r3, #16
 800a032:	0c0b      	lsrs	r3, r1, #16
 800a034:	fb02 3306 	mla	r3, r2, r6, r3
 800a038:	b289      	uxth	r1, r1
 800a03a:	3001      	adds	r0, #1
 800a03c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a040:	4285      	cmp	r5, r0
 800a042:	f84c 1b04 	str.w	r1, [ip], #4
 800a046:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a04a:	dcec      	bgt.n	800a026 <__multadd+0x12>
 800a04c:	b30e      	cbz	r6, 800a092 <__multadd+0x7e>
 800a04e:	68a3      	ldr	r3, [r4, #8]
 800a050:	42ab      	cmp	r3, r5
 800a052:	dc19      	bgt.n	800a088 <__multadd+0x74>
 800a054:	6861      	ldr	r1, [r4, #4]
 800a056:	4638      	mov	r0, r7
 800a058:	3101      	adds	r1, #1
 800a05a:	f7ff ff79 	bl	8009f50 <_Balloc>
 800a05e:	4680      	mov	r8, r0
 800a060:	b928      	cbnz	r0, 800a06e <__multadd+0x5a>
 800a062:	4602      	mov	r2, r0
 800a064:	4b0c      	ldr	r3, [pc, #48]	@ (800a098 <__multadd+0x84>)
 800a066:	480d      	ldr	r0, [pc, #52]	@ (800a09c <__multadd+0x88>)
 800a068:	21ba      	movs	r1, #186	@ 0xba
 800a06a:	f000 fd85 	bl	800ab78 <__assert_func>
 800a06e:	6922      	ldr	r2, [r4, #16]
 800a070:	3202      	adds	r2, #2
 800a072:	f104 010c 	add.w	r1, r4, #12
 800a076:	0092      	lsls	r2, r2, #2
 800a078:	300c      	adds	r0, #12
 800a07a:	f7ff f80c 	bl	8009096 <memcpy>
 800a07e:	4621      	mov	r1, r4
 800a080:	4638      	mov	r0, r7
 800a082:	f7ff ffa5 	bl	8009fd0 <_Bfree>
 800a086:	4644      	mov	r4, r8
 800a088:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a08c:	3501      	adds	r5, #1
 800a08e:	615e      	str	r6, [r3, #20]
 800a090:	6125      	str	r5, [r4, #16]
 800a092:	4620      	mov	r0, r4
 800a094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a098:	0800af58 	.word	0x0800af58
 800a09c:	0800af69 	.word	0x0800af69

0800a0a0 <__hi0bits>:
 800a0a0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	bf36      	itet	cc
 800a0a8:	0403      	lslcc	r3, r0, #16
 800a0aa:	2000      	movcs	r0, #0
 800a0ac:	2010      	movcc	r0, #16
 800a0ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a0b2:	bf3c      	itt	cc
 800a0b4:	021b      	lslcc	r3, r3, #8
 800a0b6:	3008      	addcc	r0, #8
 800a0b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a0bc:	bf3c      	itt	cc
 800a0be:	011b      	lslcc	r3, r3, #4
 800a0c0:	3004      	addcc	r0, #4
 800a0c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0c6:	bf3c      	itt	cc
 800a0c8:	009b      	lslcc	r3, r3, #2
 800a0ca:	3002      	addcc	r0, #2
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	db05      	blt.n	800a0dc <__hi0bits+0x3c>
 800a0d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a0d4:	f100 0001 	add.w	r0, r0, #1
 800a0d8:	bf08      	it	eq
 800a0da:	2020      	moveq	r0, #32
 800a0dc:	4770      	bx	lr

0800a0de <__lo0bits>:
 800a0de:	6803      	ldr	r3, [r0, #0]
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	f013 0007 	ands.w	r0, r3, #7
 800a0e6:	d00b      	beq.n	800a100 <__lo0bits+0x22>
 800a0e8:	07d9      	lsls	r1, r3, #31
 800a0ea:	d421      	bmi.n	800a130 <__lo0bits+0x52>
 800a0ec:	0798      	lsls	r0, r3, #30
 800a0ee:	bf49      	itett	mi
 800a0f0:	085b      	lsrmi	r3, r3, #1
 800a0f2:	089b      	lsrpl	r3, r3, #2
 800a0f4:	2001      	movmi	r0, #1
 800a0f6:	6013      	strmi	r3, [r2, #0]
 800a0f8:	bf5c      	itt	pl
 800a0fa:	6013      	strpl	r3, [r2, #0]
 800a0fc:	2002      	movpl	r0, #2
 800a0fe:	4770      	bx	lr
 800a100:	b299      	uxth	r1, r3
 800a102:	b909      	cbnz	r1, 800a108 <__lo0bits+0x2a>
 800a104:	0c1b      	lsrs	r3, r3, #16
 800a106:	2010      	movs	r0, #16
 800a108:	b2d9      	uxtb	r1, r3
 800a10a:	b909      	cbnz	r1, 800a110 <__lo0bits+0x32>
 800a10c:	3008      	adds	r0, #8
 800a10e:	0a1b      	lsrs	r3, r3, #8
 800a110:	0719      	lsls	r1, r3, #28
 800a112:	bf04      	itt	eq
 800a114:	091b      	lsreq	r3, r3, #4
 800a116:	3004      	addeq	r0, #4
 800a118:	0799      	lsls	r1, r3, #30
 800a11a:	bf04      	itt	eq
 800a11c:	089b      	lsreq	r3, r3, #2
 800a11e:	3002      	addeq	r0, #2
 800a120:	07d9      	lsls	r1, r3, #31
 800a122:	d403      	bmi.n	800a12c <__lo0bits+0x4e>
 800a124:	085b      	lsrs	r3, r3, #1
 800a126:	f100 0001 	add.w	r0, r0, #1
 800a12a:	d003      	beq.n	800a134 <__lo0bits+0x56>
 800a12c:	6013      	str	r3, [r2, #0]
 800a12e:	4770      	bx	lr
 800a130:	2000      	movs	r0, #0
 800a132:	4770      	bx	lr
 800a134:	2020      	movs	r0, #32
 800a136:	4770      	bx	lr

0800a138 <__i2b>:
 800a138:	b510      	push	{r4, lr}
 800a13a:	460c      	mov	r4, r1
 800a13c:	2101      	movs	r1, #1
 800a13e:	f7ff ff07 	bl	8009f50 <_Balloc>
 800a142:	4602      	mov	r2, r0
 800a144:	b928      	cbnz	r0, 800a152 <__i2b+0x1a>
 800a146:	4b05      	ldr	r3, [pc, #20]	@ (800a15c <__i2b+0x24>)
 800a148:	4805      	ldr	r0, [pc, #20]	@ (800a160 <__i2b+0x28>)
 800a14a:	f240 1145 	movw	r1, #325	@ 0x145
 800a14e:	f000 fd13 	bl	800ab78 <__assert_func>
 800a152:	2301      	movs	r3, #1
 800a154:	6144      	str	r4, [r0, #20]
 800a156:	6103      	str	r3, [r0, #16]
 800a158:	bd10      	pop	{r4, pc}
 800a15a:	bf00      	nop
 800a15c:	0800af58 	.word	0x0800af58
 800a160:	0800af69 	.word	0x0800af69

0800a164 <__multiply>:
 800a164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a168:	4614      	mov	r4, r2
 800a16a:	690a      	ldr	r2, [r1, #16]
 800a16c:	6923      	ldr	r3, [r4, #16]
 800a16e:	429a      	cmp	r2, r3
 800a170:	bfa8      	it	ge
 800a172:	4623      	movge	r3, r4
 800a174:	460f      	mov	r7, r1
 800a176:	bfa4      	itt	ge
 800a178:	460c      	movge	r4, r1
 800a17a:	461f      	movge	r7, r3
 800a17c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a180:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a184:	68a3      	ldr	r3, [r4, #8]
 800a186:	6861      	ldr	r1, [r4, #4]
 800a188:	eb0a 0609 	add.w	r6, sl, r9
 800a18c:	42b3      	cmp	r3, r6
 800a18e:	b085      	sub	sp, #20
 800a190:	bfb8      	it	lt
 800a192:	3101      	addlt	r1, #1
 800a194:	f7ff fedc 	bl	8009f50 <_Balloc>
 800a198:	b930      	cbnz	r0, 800a1a8 <__multiply+0x44>
 800a19a:	4602      	mov	r2, r0
 800a19c:	4b44      	ldr	r3, [pc, #272]	@ (800a2b0 <__multiply+0x14c>)
 800a19e:	4845      	ldr	r0, [pc, #276]	@ (800a2b4 <__multiply+0x150>)
 800a1a0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a1a4:	f000 fce8 	bl	800ab78 <__assert_func>
 800a1a8:	f100 0514 	add.w	r5, r0, #20
 800a1ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a1b0:	462b      	mov	r3, r5
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	4543      	cmp	r3, r8
 800a1b6:	d321      	bcc.n	800a1fc <__multiply+0x98>
 800a1b8:	f107 0114 	add.w	r1, r7, #20
 800a1bc:	f104 0214 	add.w	r2, r4, #20
 800a1c0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a1c4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a1c8:	9302      	str	r3, [sp, #8]
 800a1ca:	1b13      	subs	r3, r2, r4
 800a1cc:	3b15      	subs	r3, #21
 800a1ce:	f023 0303 	bic.w	r3, r3, #3
 800a1d2:	3304      	adds	r3, #4
 800a1d4:	f104 0715 	add.w	r7, r4, #21
 800a1d8:	42ba      	cmp	r2, r7
 800a1da:	bf38      	it	cc
 800a1dc:	2304      	movcc	r3, #4
 800a1de:	9301      	str	r3, [sp, #4]
 800a1e0:	9b02      	ldr	r3, [sp, #8]
 800a1e2:	9103      	str	r1, [sp, #12]
 800a1e4:	428b      	cmp	r3, r1
 800a1e6:	d80c      	bhi.n	800a202 <__multiply+0x9e>
 800a1e8:	2e00      	cmp	r6, #0
 800a1ea:	dd03      	ble.n	800a1f4 <__multiply+0x90>
 800a1ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d05b      	beq.n	800a2ac <__multiply+0x148>
 800a1f4:	6106      	str	r6, [r0, #16]
 800a1f6:	b005      	add	sp, #20
 800a1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1fc:	f843 2b04 	str.w	r2, [r3], #4
 800a200:	e7d8      	b.n	800a1b4 <__multiply+0x50>
 800a202:	f8b1 a000 	ldrh.w	sl, [r1]
 800a206:	f1ba 0f00 	cmp.w	sl, #0
 800a20a:	d024      	beq.n	800a256 <__multiply+0xf2>
 800a20c:	f104 0e14 	add.w	lr, r4, #20
 800a210:	46a9      	mov	r9, r5
 800a212:	f04f 0c00 	mov.w	ip, #0
 800a216:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a21a:	f8d9 3000 	ldr.w	r3, [r9]
 800a21e:	fa1f fb87 	uxth.w	fp, r7
 800a222:	b29b      	uxth	r3, r3
 800a224:	fb0a 330b 	mla	r3, sl, fp, r3
 800a228:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a22c:	f8d9 7000 	ldr.w	r7, [r9]
 800a230:	4463      	add	r3, ip
 800a232:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a236:	fb0a c70b 	mla	r7, sl, fp, ip
 800a23a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a23e:	b29b      	uxth	r3, r3
 800a240:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a244:	4572      	cmp	r2, lr
 800a246:	f849 3b04 	str.w	r3, [r9], #4
 800a24a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a24e:	d8e2      	bhi.n	800a216 <__multiply+0xb2>
 800a250:	9b01      	ldr	r3, [sp, #4]
 800a252:	f845 c003 	str.w	ip, [r5, r3]
 800a256:	9b03      	ldr	r3, [sp, #12]
 800a258:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a25c:	3104      	adds	r1, #4
 800a25e:	f1b9 0f00 	cmp.w	r9, #0
 800a262:	d021      	beq.n	800a2a8 <__multiply+0x144>
 800a264:	682b      	ldr	r3, [r5, #0]
 800a266:	f104 0c14 	add.w	ip, r4, #20
 800a26a:	46ae      	mov	lr, r5
 800a26c:	f04f 0a00 	mov.w	sl, #0
 800a270:	f8bc b000 	ldrh.w	fp, [ip]
 800a274:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a278:	fb09 770b 	mla	r7, r9, fp, r7
 800a27c:	4457      	add	r7, sl
 800a27e:	b29b      	uxth	r3, r3
 800a280:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a284:	f84e 3b04 	str.w	r3, [lr], #4
 800a288:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a28c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a290:	f8be 3000 	ldrh.w	r3, [lr]
 800a294:	fb09 330a 	mla	r3, r9, sl, r3
 800a298:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a29c:	4562      	cmp	r2, ip
 800a29e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a2a2:	d8e5      	bhi.n	800a270 <__multiply+0x10c>
 800a2a4:	9f01      	ldr	r7, [sp, #4]
 800a2a6:	51eb      	str	r3, [r5, r7]
 800a2a8:	3504      	adds	r5, #4
 800a2aa:	e799      	b.n	800a1e0 <__multiply+0x7c>
 800a2ac:	3e01      	subs	r6, #1
 800a2ae:	e79b      	b.n	800a1e8 <__multiply+0x84>
 800a2b0:	0800af58 	.word	0x0800af58
 800a2b4:	0800af69 	.word	0x0800af69

0800a2b8 <__pow5mult>:
 800a2b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2bc:	4615      	mov	r5, r2
 800a2be:	f012 0203 	ands.w	r2, r2, #3
 800a2c2:	4607      	mov	r7, r0
 800a2c4:	460e      	mov	r6, r1
 800a2c6:	d007      	beq.n	800a2d8 <__pow5mult+0x20>
 800a2c8:	4c25      	ldr	r4, [pc, #148]	@ (800a360 <__pow5mult+0xa8>)
 800a2ca:	3a01      	subs	r2, #1
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a2d2:	f7ff fe9f 	bl	800a014 <__multadd>
 800a2d6:	4606      	mov	r6, r0
 800a2d8:	10ad      	asrs	r5, r5, #2
 800a2da:	d03d      	beq.n	800a358 <__pow5mult+0xa0>
 800a2dc:	69fc      	ldr	r4, [r7, #28]
 800a2de:	b97c      	cbnz	r4, 800a300 <__pow5mult+0x48>
 800a2e0:	2010      	movs	r0, #16
 800a2e2:	f7ff fd7f 	bl	8009de4 <malloc>
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	61f8      	str	r0, [r7, #28]
 800a2ea:	b928      	cbnz	r0, 800a2f8 <__pow5mult+0x40>
 800a2ec:	4b1d      	ldr	r3, [pc, #116]	@ (800a364 <__pow5mult+0xac>)
 800a2ee:	481e      	ldr	r0, [pc, #120]	@ (800a368 <__pow5mult+0xb0>)
 800a2f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a2f4:	f000 fc40 	bl	800ab78 <__assert_func>
 800a2f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2fc:	6004      	str	r4, [r0, #0]
 800a2fe:	60c4      	str	r4, [r0, #12]
 800a300:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a304:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a308:	b94c      	cbnz	r4, 800a31e <__pow5mult+0x66>
 800a30a:	f240 2171 	movw	r1, #625	@ 0x271
 800a30e:	4638      	mov	r0, r7
 800a310:	f7ff ff12 	bl	800a138 <__i2b>
 800a314:	2300      	movs	r3, #0
 800a316:	f8c8 0008 	str.w	r0, [r8, #8]
 800a31a:	4604      	mov	r4, r0
 800a31c:	6003      	str	r3, [r0, #0]
 800a31e:	f04f 0900 	mov.w	r9, #0
 800a322:	07eb      	lsls	r3, r5, #31
 800a324:	d50a      	bpl.n	800a33c <__pow5mult+0x84>
 800a326:	4631      	mov	r1, r6
 800a328:	4622      	mov	r2, r4
 800a32a:	4638      	mov	r0, r7
 800a32c:	f7ff ff1a 	bl	800a164 <__multiply>
 800a330:	4631      	mov	r1, r6
 800a332:	4680      	mov	r8, r0
 800a334:	4638      	mov	r0, r7
 800a336:	f7ff fe4b 	bl	8009fd0 <_Bfree>
 800a33a:	4646      	mov	r6, r8
 800a33c:	106d      	asrs	r5, r5, #1
 800a33e:	d00b      	beq.n	800a358 <__pow5mult+0xa0>
 800a340:	6820      	ldr	r0, [r4, #0]
 800a342:	b938      	cbnz	r0, 800a354 <__pow5mult+0x9c>
 800a344:	4622      	mov	r2, r4
 800a346:	4621      	mov	r1, r4
 800a348:	4638      	mov	r0, r7
 800a34a:	f7ff ff0b 	bl	800a164 <__multiply>
 800a34e:	6020      	str	r0, [r4, #0]
 800a350:	f8c0 9000 	str.w	r9, [r0]
 800a354:	4604      	mov	r4, r0
 800a356:	e7e4      	b.n	800a322 <__pow5mult+0x6a>
 800a358:	4630      	mov	r0, r6
 800a35a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a35e:	bf00      	nop
 800a360:	0800afc4 	.word	0x0800afc4
 800a364:	0800aee9 	.word	0x0800aee9
 800a368:	0800af69 	.word	0x0800af69

0800a36c <__lshift>:
 800a36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a370:	460c      	mov	r4, r1
 800a372:	6849      	ldr	r1, [r1, #4]
 800a374:	6923      	ldr	r3, [r4, #16]
 800a376:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a37a:	68a3      	ldr	r3, [r4, #8]
 800a37c:	4607      	mov	r7, r0
 800a37e:	4691      	mov	r9, r2
 800a380:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a384:	f108 0601 	add.w	r6, r8, #1
 800a388:	42b3      	cmp	r3, r6
 800a38a:	db0b      	blt.n	800a3a4 <__lshift+0x38>
 800a38c:	4638      	mov	r0, r7
 800a38e:	f7ff fddf 	bl	8009f50 <_Balloc>
 800a392:	4605      	mov	r5, r0
 800a394:	b948      	cbnz	r0, 800a3aa <__lshift+0x3e>
 800a396:	4602      	mov	r2, r0
 800a398:	4b28      	ldr	r3, [pc, #160]	@ (800a43c <__lshift+0xd0>)
 800a39a:	4829      	ldr	r0, [pc, #164]	@ (800a440 <__lshift+0xd4>)
 800a39c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a3a0:	f000 fbea 	bl	800ab78 <__assert_func>
 800a3a4:	3101      	adds	r1, #1
 800a3a6:	005b      	lsls	r3, r3, #1
 800a3a8:	e7ee      	b.n	800a388 <__lshift+0x1c>
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	f100 0114 	add.w	r1, r0, #20
 800a3b0:	f100 0210 	add.w	r2, r0, #16
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	4553      	cmp	r3, sl
 800a3b8:	db33      	blt.n	800a422 <__lshift+0xb6>
 800a3ba:	6920      	ldr	r0, [r4, #16]
 800a3bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a3c0:	f104 0314 	add.w	r3, r4, #20
 800a3c4:	f019 091f 	ands.w	r9, r9, #31
 800a3c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a3cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a3d0:	d02b      	beq.n	800a42a <__lshift+0xbe>
 800a3d2:	f1c9 0e20 	rsb	lr, r9, #32
 800a3d6:	468a      	mov	sl, r1
 800a3d8:	2200      	movs	r2, #0
 800a3da:	6818      	ldr	r0, [r3, #0]
 800a3dc:	fa00 f009 	lsl.w	r0, r0, r9
 800a3e0:	4310      	orrs	r0, r2
 800a3e2:	f84a 0b04 	str.w	r0, [sl], #4
 800a3e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3ea:	459c      	cmp	ip, r3
 800a3ec:	fa22 f20e 	lsr.w	r2, r2, lr
 800a3f0:	d8f3      	bhi.n	800a3da <__lshift+0x6e>
 800a3f2:	ebac 0304 	sub.w	r3, ip, r4
 800a3f6:	3b15      	subs	r3, #21
 800a3f8:	f023 0303 	bic.w	r3, r3, #3
 800a3fc:	3304      	adds	r3, #4
 800a3fe:	f104 0015 	add.w	r0, r4, #21
 800a402:	4584      	cmp	ip, r0
 800a404:	bf38      	it	cc
 800a406:	2304      	movcc	r3, #4
 800a408:	50ca      	str	r2, [r1, r3]
 800a40a:	b10a      	cbz	r2, 800a410 <__lshift+0xa4>
 800a40c:	f108 0602 	add.w	r6, r8, #2
 800a410:	3e01      	subs	r6, #1
 800a412:	4638      	mov	r0, r7
 800a414:	612e      	str	r6, [r5, #16]
 800a416:	4621      	mov	r1, r4
 800a418:	f7ff fdda 	bl	8009fd0 <_Bfree>
 800a41c:	4628      	mov	r0, r5
 800a41e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a422:	f842 0f04 	str.w	r0, [r2, #4]!
 800a426:	3301      	adds	r3, #1
 800a428:	e7c5      	b.n	800a3b6 <__lshift+0x4a>
 800a42a:	3904      	subs	r1, #4
 800a42c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a430:	f841 2f04 	str.w	r2, [r1, #4]!
 800a434:	459c      	cmp	ip, r3
 800a436:	d8f9      	bhi.n	800a42c <__lshift+0xc0>
 800a438:	e7ea      	b.n	800a410 <__lshift+0xa4>
 800a43a:	bf00      	nop
 800a43c:	0800af58 	.word	0x0800af58
 800a440:	0800af69 	.word	0x0800af69

0800a444 <__mcmp>:
 800a444:	690a      	ldr	r2, [r1, #16]
 800a446:	4603      	mov	r3, r0
 800a448:	6900      	ldr	r0, [r0, #16]
 800a44a:	1a80      	subs	r0, r0, r2
 800a44c:	b530      	push	{r4, r5, lr}
 800a44e:	d10e      	bne.n	800a46e <__mcmp+0x2a>
 800a450:	3314      	adds	r3, #20
 800a452:	3114      	adds	r1, #20
 800a454:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a458:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a45c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a460:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a464:	4295      	cmp	r5, r2
 800a466:	d003      	beq.n	800a470 <__mcmp+0x2c>
 800a468:	d205      	bcs.n	800a476 <__mcmp+0x32>
 800a46a:	f04f 30ff 	mov.w	r0, #4294967295
 800a46e:	bd30      	pop	{r4, r5, pc}
 800a470:	42a3      	cmp	r3, r4
 800a472:	d3f3      	bcc.n	800a45c <__mcmp+0x18>
 800a474:	e7fb      	b.n	800a46e <__mcmp+0x2a>
 800a476:	2001      	movs	r0, #1
 800a478:	e7f9      	b.n	800a46e <__mcmp+0x2a>
	...

0800a47c <__mdiff>:
 800a47c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a480:	4689      	mov	r9, r1
 800a482:	4606      	mov	r6, r0
 800a484:	4611      	mov	r1, r2
 800a486:	4648      	mov	r0, r9
 800a488:	4614      	mov	r4, r2
 800a48a:	f7ff ffdb 	bl	800a444 <__mcmp>
 800a48e:	1e05      	subs	r5, r0, #0
 800a490:	d112      	bne.n	800a4b8 <__mdiff+0x3c>
 800a492:	4629      	mov	r1, r5
 800a494:	4630      	mov	r0, r6
 800a496:	f7ff fd5b 	bl	8009f50 <_Balloc>
 800a49a:	4602      	mov	r2, r0
 800a49c:	b928      	cbnz	r0, 800a4aa <__mdiff+0x2e>
 800a49e:	4b3f      	ldr	r3, [pc, #252]	@ (800a59c <__mdiff+0x120>)
 800a4a0:	f240 2137 	movw	r1, #567	@ 0x237
 800a4a4:	483e      	ldr	r0, [pc, #248]	@ (800a5a0 <__mdiff+0x124>)
 800a4a6:	f000 fb67 	bl	800ab78 <__assert_func>
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a4b0:	4610      	mov	r0, r2
 800a4b2:	b003      	add	sp, #12
 800a4b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4b8:	bfbc      	itt	lt
 800a4ba:	464b      	movlt	r3, r9
 800a4bc:	46a1      	movlt	r9, r4
 800a4be:	4630      	mov	r0, r6
 800a4c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a4c4:	bfba      	itte	lt
 800a4c6:	461c      	movlt	r4, r3
 800a4c8:	2501      	movlt	r5, #1
 800a4ca:	2500      	movge	r5, #0
 800a4cc:	f7ff fd40 	bl	8009f50 <_Balloc>
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	b918      	cbnz	r0, 800a4dc <__mdiff+0x60>
 800a4d4:	4b31      	ldr	r3, [pc, #196]	@ (800a59c <__mdiff+0x120>)
 800a4d6:	f240 2145 	movw	r1, #581	@ 0x245
 800a4da:	e7e3      	b.n	800a4a4 <__mdiff+0x28>
 800a4dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a4e0:	6926      	ldr	r6, [r4, #16]
 800a4e2:	60c5      	str	r5, [r0, #12]
 800a4e4:	f109 0310 	add.w	r3, r9, #16
 800a4e8:	f109 0514 	add.w	r5, r9, #20
 800a4ec:	f104 0e14 	add.w	lr, r4, #20
 800a4f0:	f100 0b14 	add.w	fp, r0, #20
 800a4f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a4f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a4fc:	9301      	str	r3, [sp, #4]
 800a4fe:	46d9      	mov	r9, fp
 800a500:	f04f 0c00 	mov.w	ip, #0
 800a504:	9b01      	ldr	r3, [sp, #4]
 800a506:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a50a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a50e:	9301      	str	r3, [sp, #4]
 800a510:	fa1f f38a 	uxth.w	r3, sl
 800a514:	4619      	mov	r1, r3
 800a516:	b283      	uxth	r3, r0
 800a518:	1acb      	subs	r3, r1, r3
 800a51a:	0c00      	lsrs	r0, r0, #16
 800a51c:	4463      	add	r3, ip
 800a51e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a522:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a526:	b29b      	uxth	r3, r3
 800a528:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a52c:	4576      	cmp	r6, lr
 800a52e:	f849 3b04 	str.w	r3, [r9], #4
 800a532:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a536:	d8e5      	bhi.n	800a504 <__mdiff+0x88>
 800a538:	1b33      	subs	r3, r6, r4
 800a53a:	3b15      	subs	r3, #21
 800a53c:	f023 0303 	bic.w	r3, r3, #3
 800a540:	3415      	adds	r4, #21
 800a542:	3304      	adds	r3, #4
 800a544:	42a6      	cmp	r6, r4
 800a546:	bf38      	it	cc
 800a548:	2304      	movcc	r3, #4
 800a54a:	441d      	add	r5, r3
 800a54c:	445b      	add	r3, fp
 800a54e:	461e      	mov	r6, r3
 800a550:	462c      	mov	r4, r5
 800a552:	4544      	cmp	r4, r8
 800a554:	d30e      	bcc.n	800a574 <__mdiff+0xf8>
 800a556:	f108 0103 	add.w	r1, r8, #3
 800a55a:	1b49      	subs	r1, r1, r5
 800a55c:	f021 0103 	bic.w	r1, r1, #3
 800a560:	3d03      	subs	r5, #3
 800a562:	45a8      	cmp	r8, r5
 800a564:	bf38      	it	cc
 800a566:	2100      	movcc	r1, #0
 800a568:	440b      	add	r3, r1
 800a56a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a56e:	b191      	cbz	r1, 800a596 <__mdiff+0x11a>
 800a570:	6117      	str	r7, [r2, #16]
 800a572:	e79d      	b.n	800a4b0 <__mdiff+0x34>
 800a574:	f854 1b04 	ldr.w	r1, [r4], #4
 800a578:	46e6      	mov	lr, ip
 800a57a:	0c08      	lsrs	r0, r1, #16
 800a57c:	fa1c fc81 	uxtah	ip, ip, r1
 800a580:	4471      	add	r1, lr
 800a582:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a586:	b289      	uxth	r1, r1
 800a588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a58c:	f846 1b04 	str.w	r1, [r6], #4
 800a590:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a594:	e7dd      	b.n	800a552 <__mdiff+0xd6>
 800a596:	3f01      	subs	r7, #1
 800a598:	e7e7      	b.n	800a56a <__mdiff+0xee>
 800a59a:	bf00      	nop
 800a59c:	0800af58 	.word	0x0800af58
 800a5a0:	0800af69 	.word	0x0800af69

0800a5a4 <__d2b>:
 800a5a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a5a8:	460f      	mov	r7, r1
 800a5aa:	2101      	movs	r1, #1
 800a5ac:	ec59 8b10 	vmov	r8, r9, d0
 800a5b0:	4616      	mov	r6, r2
 800a5b2:	f7ff fccd 	bl	8009f50 <_Balloc>
 800a5b6:	4604      	mov	r4, r0
 800a5b8:	b930      	cbnz	r0, 800a5c8 <__d2b+0x24>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	4b23      	ldr	r3, [pc, #140]	@ (800a64c <__d2b+0xa8>)
 800a5be:	4824      	ldr	r0, [pc, #144]	@ (800a650 <__d2b+0xac>)
 800a5c0:	f240 310f 	movw	r1, #783	@ 0x30f
 800a5c4:	f000 fad8 	bl	800ab78 <__assert_func>
 800a5c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a5cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a5d0:	b10d      	cbz	r5, 800a5d6 <__d2b+0x32>
 800a5d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a5d6:	9301      	str	r3, [sp, #4]
 800a5d8:	f1b8 0300 	subs.w	r3, r8, #0
 800a5dc:	d023      	beq.n	800a626 <__d2b+0x82>
 800a5de:	4668      	mov	r0, sp
 800a5e0:	9300      	str	r3, [sp, #0]
 800a5e2:	f7ff fd7c 	bl	800a0de <__lo0bits>
 800a5e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a5ea:	b1d0      	cbz	r0, 800a622 <__d2b+0x7e>
 800a5ec:	f1c0 0320 	rsb	r3, r0, #32
 800a5f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a5f4:	430b      	orrs	r3, r1
 800a5f6:	40c2      	lsrs	r2, r0
 800a5f8:	6163      	str	r3, [r4, #20]
 800a5fa:	9201      	str	r2, [sp, #4]
 800a5fc:	9b01      	ldr	r3, [sp, #4]
 800a5fe:	61a3      	str	r3, [r4, #24]
 800a600:	2b00      	cmp	r3, #0
 800a602:	bf0c      	ite	eq
 800a604:	2201      	moveq	r2, #1
 800a606:	2202      	movne	r2, #2
 800a608:	6122      	str	r2, [r4, #16]
 800a60a:	b1a5      	cbz	r5, 800a636 <__d2b+0x92>
 800a60c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a610:	4405      	add	r5, r0
 800a612:	603d      	str	r5, [r7, #0]
 800a614:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a618:	6030      	str	r0, [r6, #0]
 800a61a:	4620      	mov	r0, r4
 800a61c:	b003      	add	sp, #12
 800a61e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a622:	6161      	str	r1, [r4, #20]
 800a624:	e7ea      	b.n	800a5fc <__d2b+0x58>
 800a626:	a801      	add	r0, sp, #4
 800a628:	f7ff fd59 	bl	800a0de <__lo0bits>
 800a62c:	9b01      	ldr	r3, [sp, #4]
 800a62e:	6163      	str	r3, [r4, #20]
 800a630:	3020      	adds	r0, #32
 800a632:	2201      	movs	r2, #1
 800a634:	e7e8      	b.n	800a608 <__d2b+0x64>
 800a636:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a63a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a63e:	6038      	str	r0, [r7, #0]
 800a640:	6918      	ldr	r0, [r3, #16]
 800a642:	f7ff fd2d 	bl	800a0a0 <__hi0bits>
 800a646:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a64a:	e7e5      	b.n	800a618 <__d2b+0x74>
 800a64c:	0800af58 	.word	0x0800af58
 800a650:	0800af69 	.word	0x0800af69

0800a654 <__sfputc_r>:
 800a654:	6893      	ldr	r3, [r2, #8]
 800a656:	3b01      	subs	r3, #1
 800a658:	2b00      	cmp	r3, #0
 800a65a:	b410      	push	{r4}
 800a65c:	6093      	str	r3, [r2, #8]
 800a65e:	da08      	bge.n	800a672 <__sfputc_r+0x1e>
 800a660:	6994      	ldr	r4, [r2, #24]
 800a662:	42a3      	cmp	r3, r4
 800a664:	db01      	blt.n	800a66a <__sfputc_r+0x16>
 800a666:	290a      	cmp	r1, #10
 800a668:	d103      	bne.n	800a672 <__sfputc_r+0x1e>
 800a66a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a66e:	f000 b9df 	b.w	800aa30 <__swbuf_r>
 800a672:	6813      	ldr	r3, [r2, #0]
 800a674:	1c58      	adds	r0, r3, #1
 800a676:	6010      	str	r0, [r2, #0]
 800a678:	7019      	strb	r1, [r3, #0]
 800a67a:	4608      	mov	r0, r1
 800a67c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a680:	4770      	bx	lr

0800a682 <__sfputs_r>:
 800a682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a684:	4606      	mov	r6, r0
 800a686:	460f      	mov	r7, r1
 800a688:	4614      	mov	r4, r2
 800a68a:	18d5      	adds	r5, r2, r3
 800a68c:	42ac      	cmp	r4, r5
 800a68e:	d101      	bne.n	800a694 <__sfputs_r+0x12>
 800a690:	2000      	movs	r0, #0
 800a692:	e007      	b.n	800a6a4 <__sfputs_r+0x22>
 800a694:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a698:	463a      	mov	r2, r7
 800a69a:	4630      	mov	r0, r6
 800a69c:	f7ff ffda 	bl	800a654 <__sfputc_r>
 800a6a0:	1c43      	adds	r3, r0, #1
 800a6a2:	d1f3      	bne.n	800a68c <__sfputs_r+0xa>
 800a6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a6a8 <_vfiprintf_r>:
 800a6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ac:	460d      	mov	r5, r1
 800a6ae:	b09d      	sub	sp, #116	@ 0x74
 800a6b0:	4614      	mov	r4, r2
 800a6b2:	4698      	mov	r8, r3
 800a6b4:	4606      	mov	r6, r0
 800a6b6:	b118      	cbz	r0, 800a6c0 <_vfiprintf_r+0x18>
 800a6b8:	6a03      	ldr	r3, [r0, #32]
 800a6ba:	b90b      	cbnz	r3, 800a6c0 <_vfiprintf_r+0x18>
 800a6bc:	f7fe fb8a 	bl	8008dd4 <__sinit>
 800a6c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6c2:	07d9      	lsls	r1, r3, #31
 800a6c4:	d405      	bmi.n	800a6d2 <_vfiprintf_r+0x2a>
 800a6c6:	89ab      	ldrh	r3, [r5, #12]
 800a6c8:	059a      	lsls	r2, r3, #22
 800a6ca:	d402      	bmi.n	800a6d2 <_vfiprintf_r+0x2a>
 800a6cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a6ce:	f7fe fce0 	bl	8009092 <__retarget_lock_acquire_recursive>
 800a6d2:	89ab      	ldrh	r3, [r5, #12]
 800a6d4:	071b      	lsls	r3, r3, #28
 800a6d6:	d501      	bpl.n	800a6dc <_vfiprintf_r+0x34>
 800a6d8:	692b      	ldr	r3, [r5, #16]
 800a6da:	b99b      	cbnz	r3, 800a704 <_vfiprintf_r+0x5c>
 800a6dc:	4629      	mov	r1, r5
 800a6de:	4630      	mov	r0, r6
 800a6e0:	f000 f9e4 	bl	800aaac <__swsetup_r>
 800a6e4:	b170      	cbz	r0, 800a704 <_vfiprintf_r+0x5c>
 800a6e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6e8:	07dc      	lsls	r4, r3, #31
 800a6ea:	d504      	bpl.n	800a6f6 <_vfiprintf_r+0x4e>
 800a6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a6f0:	b01d      	add	sp, #116	@ 0x74
 800a6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f6:	89ab      	ldrh	r3, [r5, #12]
 800a6f8:	0598      	lsls	r0, r3, #22
 800a6fa:	d4f7      	bmi.n	800a6ec <_vfiprintf_r+0x44>
 800a6fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a6fe:	f7fe fcc9 	bl	8009094 <__retarget_lock_release_recursive>
 800a702:	e7f3      	b.n	800a6ec <_vfiprintf_r+0x44>
 800a704:	2300      	movs	r3, #0
 800a706:	9309      	str	r3, [sp, #36]	@ 0x24
 800a708:	2320      	movs	r3, #32
 800a70a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a70e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a712:	2330      	movs	r3, #48	@ 0x30
 800a714:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a8c4 <_vfiprintf_r+0x21c>
 800a718:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a71c:	f04f 0901 	mov.w	r9, #1
 800a720:	4623      	mov	r3, r4
 800a722:	469a      	mov	sl, r3
 800a724:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a728:	b10a      	cbz	r2, 800a72e <_vfiprintf_r+0x86>
 800a72a:	2a25      	cmp	r2, #37	@ 0x25
 800a72c:	d1f9      	bne.n	800a722 <_vfiprintf_r+0x7a>
 800a72e:	ebba 0b04 	subs.w	fp, sl, r4
 800a732:	d00b      	beq.n	800a74c <_vfiprintf_r+0xa4>
 800a734:	465b      	mov	r3, fp
 800a736:	4622      	mov	r2, r4
 800a738:	4629      	mov	r1, r5
 800a73a:	4630      	mov	r0, r6
 800a73c:	f7ff ffa1 	bl	800a682 <__sfputs_r>
 800a740:	3001      	adds	r0, #1
 800a742:	f000 80a7 	beq.w	800a894 <_vfiprintf_r+0x1ec>
 800a746:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a748:	445a      	add	r2, fp
 800a74a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a74c:	f89a 3000 	ldrb.w	r3, [sl]
 800a750:	2b00      	cmp	r3, #0
 800a752:	f000 809f 	beq.w	800a894 <_vfiprintf_r+0x1ec>
 800a756:	2300      	movs	r3, #0
 800a758:	f04f 32ff 	mov.w	r2, #4294967295
 800a75c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a760:	f10a 0a01 	add.w	sl, sl, #1
 800a764:	9304      	str	r3, [sp, #16]
 800a766:	9307      	str	r3, [sp, #28]
 800a768:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a76c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a76e:	4654      	mov	r4, sl
 800a770:	2205      	movs	r2, #5
 800a772:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a776:	4853      	ldr	r0, [pc, #332]	@ (800a8c4 <_vfiprintf_r+0x21c>)
 800a778:	f7f5 fd4a 	bl	8000210 <memchr>
 800a77c:	9a04      	ldr	r2, [sp, #16]
 800a77e:	b9d8      	cbnz	r0, 800a7b8 <_vfiprintf_r+0x110>
 800a780:	06d1      	lsls	r1, r2, #27
 800a782:	bf44      	itt	mi
 800a784:	2320      	movmi	r3, #32
 800a786:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a78a:	0713      	lsls	r3, r2, #28
 800a78c:	bf44      	itt	mi
 800a78e:	232b      	movmi	r3, #43	@ 0x2b
 800a790:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a794:	f89a 3000 	ldrb.w	r3, [sl]
 800a798:	2b2a      	cmp	r3, #42	@ 0x2a
 800a79a:	d015      	beq.n	800a7c8 <_vfiprintf_r+0x120>
 800a79c:	9a07      	ldr	r2, [sp, #28]
 800a79e:	4654      	mov	r4, sl
 800a7a0:	2000      	movs	r0, #0
 800a7a2:	f04f 0c0a 	mov.w	ip, #10
 800a7a6:	4621      	mov	r1, r4
 800a7a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7ac:	3b30      	subs	r3, #48	@ 0x30
 800a7ae:	2b09      	cmp	r3, #9
 800a7b0:	d94b      	bls.n	800a84a <_vfiprintf_r+0x1a2>
 800a7b2:	b1b0      	cbz	r0, 800a7e2 <_vfiprintf_r+0x13a>
 800a7b4:	9207      	str	r2, [sp, #28]
 800a7b6:	e014      	b.n	800a7e2 <_vfiprintf_r+0x13a>
 800a7b8:	eba0 0308 	sub.w	r3, r0, r8
 800a7bc:	fa09 f303 	lsl.w	r3, r9, r3
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	9304      	str	r3, [sp, #16]
 800a7c4:	46a2      	mov	sl, r4
 800a7c6:	e7d2      	b.n	800a76e <_vfiprintf_r+0xc6>
 800a7c8:	9b03      	ldr	r3, [sp, #12]
 800a7ca:	1d19      	adds	r1, r3, #4
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	9103      	str	r1, [sp, #12]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	bfbb      	ittet	lt
 800a7d4:	425b      	neglt	r3, r3
 800a7d6:	f042 0202 	orrlt.w	r2, r2, #2
 800a7da:	9307      	strge	r3, [sp, #28]
 800a7dc:	9307      	strlt	r3, [sp, #28]
 800a7de:	bfb8      	it	lt
 800a7e0:	9204      	strlt	r2, [sp, #16]
 800a7e2:	7823      	ldrb	r3, [r4, #0]
 800a7e4:	2b2e      	cmp	r3, #46	@ 0x2e
 800a7e6:	d10a      	bne.n	800a7fe <_vfiprintf_r+0x156>
 800a7e8:	7863      	ldrb	r3, [r4, #1]
 800a7ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7ec:	d132      	bne.n	800a854 <_vfiprintf_r+0x1ac>
 800a7ee:	9b03      	ldr	r3, [sp, #12]
 800a7f0:	1d1a      	adds	r2, r3, #4
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	9203      	str	r2, [sp, #12]
 800a7f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a7fa:	3402      	adds	r4, #2
 800a7fc:	9305      	str	r3, [sp, #20]
 800a7fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a8d4 <_vfiprintf_r+0x22c>
 800a802:	7821      	ldrb	r1, [r4, #0]
 800a804:	2203      	movs	r2, #3
 800a806:	4650      	mov	r0, sl
 800a808:	f7f5 fd02 	bl	8000210 <memchr>
 800a80c:	b138      	cbz	r0, 800a81e <_vfiprintf_r+0x176>
 800a80e:	9b04      	ldr	r3, [sp, #16]
 800a810:	eba0 000a 	sub.w	r0, r0, sl
 800a814:	2240      	movs	r2, #64	@ 0x40
 800a816:	4082      	lsls	r2, r0
 800a818:	4313      	orrs	r3, r2
 800a81a:	3401      	adds	r4, #1
 800a81c:	9304      	str	r3, [sp, #16]
 800a81e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a822:	4829      	ldr	r0, [pc, #164]	@ (800a8c8 <_vfiprintf_r+0x220>)
 800a824:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a828:	2206      	movs	r2, #6
 800a82a:	f7f5 fcf1 	bl	8000210 <memchr>
 800a82e:	2800      	cmp	r0, #0
 800a830:	d03f      	beq.n	800a8b2 <_vfiprintf_r+0x20a>
 800a832:	4b26      	ldr	r3, [pc, #152]	@ (800a8cc <_vfiprintf_r+0x224>)
 800a834:	bb1b      	cbnz	r3, 800a87e <_vfiprintf_r+0x1d6>
 800a836:	9b03      	ldr	r3, [sp, #12]
 800a838:	3307      	adds	r3, #7
 800a83a:	f023 0307 	bic.w	r3, r3, #7
 800a83e:	3308      	adds	r3, #8
 800a840:	9303      	str	r3, [sp, #12]
 800a842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a844:	443b      	add	r3, r7
 800a846:	9309      	str	r3, [sp, #36]	@ 0x24
 800a848:	e76a      	b.n	800a720 <_vfiprintf_r+0x78>
 800a84a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a84e:	460c      	mov	r4, r1
 800a850:	2001      	movs	r0, #1
 800a852:	e7a8      	b.n	800a7a6 <_vfiprintf_r+0xfe>
 800a854:	2300      	movs	r3, #0
 800a856:	3401      	adds	r4, #1
 800a858:	9305      	str	r3, [sp, #20]
 800a85a:	4619      	mov	r1, r3
 800a85c:	f04f 0c0a 	mov.w	ip, #10
 800a860:	4620      	mov	r0, r4
 800a862:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a866:	3a30      	subs	r2, #48	@ 0x30
 800a868:	2a09      	cmp	r2, #9
 800a86a:	d903      	bls.n	800a874 <_vfiprintf_r+0x1cc>
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d0c6      	beq.n	800a7fe <_vfiprintf_r+0x156>
 800a870:	9105      	str	r1, [sp, #20]
 800a872:	e7c4      	b.n	800a7fe <_vfiprintf_r+0x156>
 800a874:	fb0c 2101 	mla	r1, ip, r1, r2
 800a878:	4604      	mov	r4, r0
 800a87a:	2301      	movs	r3, #1
 800a87c:	e7f0      	b.n	800a860 <_vfiprintf_r+0x1b8>
 800a87e:	ab03      	add	r3, sp, #12
 800a880:	9300      	str	r3, [sp, #0]
 800a882:	462a      	mov	r2, r5
 800a884:	4b12      	ldr	r3, [pc, #72]	@ (800a8d0 <_vfiprintf_r+0x228>)
 800a886:	a904      	add	r1, sp, #16
 800a888:	4630      	mov	r0, r6
 800a88a:	f7fd fe5f 	bl	800854c <_printf_float>
 800a88e:	4607      	mov	r7, r0
 800a890:	1c78      	adds	r0, r7, #1
 800a892:	d1d6      	bne.n	800a842 <_vfiprintf_r+0x19a>
 800a894:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a896:	07d9      	lsls	r1, r3, #31
 800a898:	d405      	bmi.n	800a8a6 <_vfiprintf_r+0x1fe>
 800a89a:	89ab      	ldrh	r3, [r5, #12]
 800a89c:	059a      	lsls	r2, r3, #22
 800a89e:	d402      	bmi.n	800a8a6 <_vfiprintf_r+0x1fe>
 800a8a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a8a2:	f7fe fbf7 	bl	8009094 <__retarget_lock_release_recursive>
 800a8a6:	89ab      	ldrh	r3, [r5, #12]
 800a8a8:	065b      	lsls	r3, r3, #25
 800a8aa:	f53f af1f 	bmi.w	800a6ec <_vfiprintf_r+0x44>
 800a8ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a8b0:	e71e      	b.n	800a6f0 <_vfiprintf_r+0x48>
 800a8b2:	ab03      	add	r3, sp, #12
 800a8b4:	9300      	str	r3, [sp, #0]
 800a8b6:	462a      	mov	r2, r5
 800a8b8:	4b05      	ldr	r3, [pc, #20]	@ (800a8d0 <_vfiprintf_r+0x228>)
 800a8ba:	a904      	add	r1, sp, #16
 800a8bc:	4630      	mov	r0, r6
 800a8be:	f7fe f8dd 	bl	8008a7c <_printf_i>
 800a8c2:	e7e4      	b.n	800a88e <_vfiprintf_r+0x1e6>
 800a8c4:	0800b0c0 	.word	0x0800b0c0
 800a8c8:	0800b0ca 	.word	0x0800b0ca
 800a8cc:	0800854d 	.word	0x0800854d
 800a8d0:	0800a683 	.word	0x0800a683
 800a8d4:	0800b0c6 	.word	0x0800b0c6

0800a8d8 <__sflush_r>:
 800a8d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8e0:	0716      	lsls	r6, r2, #28
 800a8e2:	4605      	mov	r5, r0
 800a8e4:	460c      	mov	r4, r1
 800a8e6:	d454      	bmi.n	800a992 <__sflush_r+0xba>
 800a8e8:	684b      	ldr	r3, [r1, #4]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	dc02      	bgt.n	800a8f4 <__sflush_r+0x1c>
 800a8ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	dd48      	ble.n	800a986 <__sflush_r+0xae>
 800a8f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8f6:	2e00      	cmp	r6, #0
 800a8f8:	d045      	beq.n	800a986 <__sflush_r+0xae>
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a900:	682f      	ldr	r7, [r5, #0]
 800a902:	6a21      	ldr	r1, [r4, #32]
 800a904:	602b      	str	r3, [r5, #0]
 800a906:	d030      	beq.n	800a96a <__sflush_r+0x92>
 800a908:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a90a:	89a3      	ldrh	r3, [r4, #12]
 800a90c:	0759      	lsls	r1, r3, #29
 800a90e:	d505      	bpl.n	800a91c <__sflush_r+0x44>
 800a910:	6863      	ldr	r3, [r4, #4]
 800a912:	1ad2      	subs	r2, r2, r3
 800a914:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a916:	b10b      	cbz	r3, 800a91c <__sflush_r+0x44>
 800a918:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a91a:	1ad2      	subs	r2, r2, r3
 800a91c:	2300      	movs	r3, #0
 800a91e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a920:	6a21      	ldr	r1, [r4, #32]
 800a922:	4628      	mov	r0, r5
 800a924:	47b0      	blx	r6
 800a926:	1c43      	adds	r3, r0, #1
 800a928:	89a3      	ldrh	r3, [r4, #12]
 800a92a:	d106      	bne.n	800a93a <__sflush_r+0x62>
 800a92c:	6829      	ldr	r1, [r5, #0]
 800a92e:	291d      	cmp	r1, #29
 800a930:	d82b      	bhi.n	800a98a <__sflush_r+0xb2>
 800a932:	4a2a      	ldr	r2, [pc, #168]	@ (800a9dc <__sflush_r+0x104>)
 800a934:	410a      	asrs	r2, r1
 800a936:	07d6      	lsls	r6, r2, #31
 800a938:	d427      	bmi.n	800a98a <__sflush_r+0xb2>
 800a93a:	2200      	movs	r2, #0
 800a93c:	6062      	str	r2, [r4, #4]
 800a93e:	04d9      	lsls	r1, r3, #19
 800a940:	6922      	ldr	r2, [r4, #16]
 800a942:	6022      	str	r2, [r4, #0]
 800a944:	d504      	bpl.n	800a950 <__sflush_r+0x78>
 800a946:	1c42      	adds	r2, r0, #1
 800a948:	d101      	bne.n	800a94e <__sflush_r+0x76>
 800a94a:	682b      	ldr	r3, [r5, #0]
 800a94c:	b903      	cbnz	r3, 800a950 <__sflush_r+0x78>
 800a94e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a950:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a952:	602f      	str	r7, [r5, #0]
 800a954:	b1b9      	cbz	r1, 800a986 <__sflush_r+0xae>
 800a956:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a95a:	4299      	cmp	r1, r3
 800a95c:	d002      	beq.n	800a964 <__sflush_r+0x8c>
 800a95e:	4628      	mov	r0, r5
 800a960:	f7ff f9f6 	bl	8009d50 <_free_r>
 800a964:	2300      	movs	r3, #0
 800a966:	6363      	str	r3, [r4, #52]	@ 0x34
 800a968:	e00d      	b.n	800a986 <__sflush_r+0xae>
 800a96a:	2301      	movs	r3, #1
 800a96c:	4628      	mov	r0, r5
 800a96e:	47b0      	blx	r6
 800a970:	4602      	mov	r2, r0
 800a972:	1c50      	adds	r0, r2, #1
 800a974:	d1c9      	bne.n	800a90a <__sflush_r+0x32>
 800a976:	682b      	ldr	r3, [r5, #0]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d0c6      	beq.n	800a90a <__sflush_r+0x32>
 800a97c:	2b1d      	cmp	r3, #29
 800a97e:	d001      	beq.n	800a984 <__sflush_r+0xac>
 800a980:	2b16      	cmp	r3, #22
 800a982:	d11e      	bne.n	800a9c2 <__sflush_r+0xea>
 800a984:	602f      	str	r7, [r5, #0]
 800a986:	2000      	movs	r0, #0
 800a988:	e022      	b.n	800a9d0 <__sflush_r+0xf8>
 800a98a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a98e:	b21b      	sxth	r3, r3
 800a990:	e01b      	b.n	800a9ca <__sflush_r+0xf2>
 800a992:	690f      	ldr	r7, [r1, #16]
 800a994:	2f00      	cmp	r7, #0
 800a996:	d0f6      	beq.n	800a986 <__sflush_r+0xae>
 800a998:	0793      	lsls	r3, r2, #30
 800a99a:	680e      	ldr	r6, [r1, #0]
 800a99c:	bf08      	it	eq
 800a99e:	694b      	ldreq	r3, [r1, #20]
 800a9a0:	600f      	str	r7, [r1, #0]
 800a9a2:	bf18      	it	ne
 800a9a4:	2300      	movne	r3, #0
 800a9a6:	eba6 0807 	sub.w	r8, r6, r7
 800a9aa:	608b      	str	r3, [r1, #8]
 800a9ac:	f1b8 0f00 	cmp.w	r8, #0
 800a9b0:	dde9      	ble.n	800a986 <__sflush_r+0xae>
 800a9b2:	6a21      	ldr	r1, [r4, #32]
 800a9b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a9b6:	4643      	mov	r3, r8
 800a9b8:	463a      	mov	r2, r7
 800a9ba:	4628      	mov	r0, r5
 800a9bc:	47b0      	blx	r6
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	dc08      	bgt.n	800a9d4 <__sflush_r+0xfc>
 800a9c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9ca:	81a3      	strh	r3, [r4, #12]
 800a9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9d4:	4407      	add	r7, r0
 800a9d6:	eba8 0800 	sub.w	r8, r8, r0
 800a9da:	e7e7      	b.n	800a9ac <__sflush_r+0xd4>
 800a9dc:	dfbffffe 	.word	0xdfbffffe

0800a9e0 <_fflush_r>:
 800a9e0:	b538      	push	{r3, r4, r5, lr}
 800a9e2:	690b      	ldr	r3, [r1, #16]
 800a9e4:	4605      	mov	r5, r0
 800a9e6:	460c      	mov	r4, r1
 800a9e8:	b913      	cbnz	r3, 800a9f0 <_fflush_r+0x10>
 800a9ea:	2500      	movs	r5, #0
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	bd38      	pop	{r3, r4, r5, pc}
 800a9f0:	b118      	cbz	r0, 800a9fa <_fflush_r+0x1a>
 800a9f2:	6a03      	ldr	r3, [r0, #32]
 800a9f4:	b90b      	cbnz	r3, 800a9fa <_fflush_r+0x1a>
 800a9f6:	f7fe f9ed 	bl	8008dd4 <__sinit>
 800a9fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d0f3      	beq.n	800a9ea <_fflush_r+0xa>
 800aa02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aa04:	07d0      	lsls	r0, r2, #31
 800aa06:	d404      	bmi.n	800aa12 <_fflush_r+0x32>
 800aa08:	0599      	lsls	r1, r3, #22
 800aa0a:	d402      	bmi.n	800aa12 <_fflush_r+0x32>
 800aa0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa0e:	f7fe fb40 	bl	8009092 <__retarget_lock_acquire_recursive>
 800aa12:	4628      	mov	r0, r5
 800aa14:	4621      	mov	r1, r4
 800aa16:	f7ff ff5f 	bl	800a8d8 <__sflush_r>
 800aa1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa1c:	07da      	lsls	r2, r3, #31
 800aa1e:	4605      	mov	r5, r0
 800aa20:	d4e4      	bmi.n	800a9ec <_fflush_r+0xc>
 800aa22:	89a3      	ldrh	r3, [r4, #12]
 800aa24:	059b      	lsls	r3, r3, #22
 800aa26:	d4e1      	bmi.n	800a9ec <_fflush_r+0xc>
 800aa28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa2a:	f7fe fb33 	bl	8009094 <__retarget_lock_release_recursive>
 800aa2e:	e7dd      	b.n	800a9ec <_fflush_r+0xc>

0800aa30 <__swbuf_r>:
 800aa30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa32:	460e      	mov	r6, r1
 800aa34:	4614      	mov	r4, r2
 800aa36:	4605      	mov	r5, r0
 800aa38:	b118      	cbz	r0, 800aa42 <__swbuf_r+0x12>
 800aa3a:	6a03      	ldr	r3, [r0, #32]
 800aa3c:	b90b      	cbnz	r3, 800aa42 <__swbuf_r+0x12>
 800aa3e:	f7fe f9c9 	bl	8008dd4 <__sinit>
 800aa42:	69a3      	ldr	r3, [r4, #24]
 800aa44:	60a3      	str	r3, [r4, #8]
 800aa46:	89a3      	ldrh	r3, [r4, #12]
 800aa48:	071a      	lsls	r2, r3, #28
 800aa4a:	d501      	bpl.n	800aa50 <__swbuf_r+0x20>
 800aa4c:	6923      	ldr	r3, [r4, #16]
 800aa4e:	b943      	cbnz	r3, 800aa62 <__swbuf_r+0x32>
 800aa50:	4621      	mov	r1, r4
 800aa52:	4628      	mov	r0, r5
 800aa54:	f000 f82a 	bl	800aaac <__swsetup_r>
 800aa58:	b118      	cbz	r0, 800aa62 <__swbuf_r+0x32>
 800aa5a:	f04f 37ff 	mov.w	r7, #4294967295
 800aa5e:	4638      	mov	r0, r7
 800aa60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa62:	6823      	ldr	r3, [r4, #0]
 800aa64:	6922      	ldr	r2, [r4, #16]
 800aa66:	1a98      	subs	r0, r3, r2
 800aa68:	6963      	ldr	r3, [r4, #20]
 800aa6a:	b2f6      	uxtb	r6, r6
 800aa6c:	4283      	cmp	r3, r0
 800aa6e:	4637      	mov	r7, r6
 800aa70:	dc05      	bgt.n	800aa7e <__swbuf_r+0x4e>
 800aa72:	4621      	mov	r1, r4
 800aa74:	4628      	mov	r0, r5
 800aa76:	f7ff ffb3 	bl	800a9e0 <_fflush_r>
 800aa7a:	2800      	cmp	r0, #0
 800aa7c:	d1ed      	bne.n	800aa5a <__swbuf_r+0x2a>
 800aa7e:	68a3      	ldr	r3, [r4, #8]
 800aa80:	3b01      	subs	r3, #1
 800aa82:	60a3      	str	r3, [r4, #8]
 800aa84:	6823      	ldr	r3, [r4, #0]
 800aa86:	1c5a      	adds	r2, r3, #1
 800aa88:	6022      	str	r2, [r4, #0]
 800aa8a:	701e      	strb	r6, [r3, #0]
 800aa8c:	6962      	ldr	r2, [r4, #20]
 800aa8e:	1c43      	adds	r3, r0, #1
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d004      	beq.n	800aa9e <__swbuf_r+0x6e>
 800aa94:	89a3      	ldrh	r3, [r4, #12]
 800aa96:	07db      	lsls	r3, r3, #31
 800aa98:	d5e1      	bpl.n	800aa5e <__swbuf_r+0x2e>
 800aa9a:	2e0a      	cmp	r6, #10
 800aa9c:	d1df      	bne.n	800aa5e <__swbuf_r+0x2e>
 800aa9e:	4621      	mov	r1, r4
 800aaa0:	4628      	mov	r0, r5
 800aaa2:	f7ff ff9d 	bl	800a9e0 <_fflush_r>
 800aaa6:	2800      	cmp	r0, #0
 800aaa8:	d0d9      	beq.n	800aa5e <__swbuf_r+0x2e>
 800aaaa:	e7d6      	b.n	800aa5a <__swbuf_r+0x2a>

0800aaac <__swsetup_r>:
 800aaac:	b538      	push	{r3, r4, r5, lr}
 800aaae:	4b29      	ldr	r3, [pc, #164]	@ (800ab54 <__swsetup_r+0xa8>)
 800aab0:	4605      	mov	r5, r0
 800aab2:	6818      	ldr	r0, [r3, #0]
 800aab4:	460c      	mov	r4, r1
 800aab6:	b118      	cbz	r0, 800aac0 <__swsetup_r+0x14>
 800aab8:	6a03      	ldr	r3, [r0, #32]
 800aaba:	b90b      	cbnz	r3, 800aac0 <__swsetup_r+0x14>
 800aabc:	f7fe f98a 	bl	8008dd4 <__sinit>
 800aac0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aac4:	0719      	lsls	r1, r3, #28
 800aac6:	d422      	bmi.n	800ab0e <__swsetup_r+0x62>
 800aac8:	06da      	lsls	r2, r3, #27
 800aaca:	d407      	bmi.n	800aadc <__swsetup_r+0x30>
 800aacc:	2209      	movs	r2, #9
 800aace:	602a      	str	r2, [r5, #0]
 800aad0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aad4:	81a3      	strh	r3, [r4, #12]
 800aad6:	f04f 30ff 	mov.w	r0, #4294967295
 800aada:	e033      	b.n	800ab44 <__swsetup_r+0x98>
 800aadc:	0758      	lsls	r0, r3, #29
 800aade:	d512      	bpl.n	800ab06 <__swsetup_r+0x5a>
 800aae0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aae2:	b141      	cbz	r1, 800aaf6 <__swsetup_r+0x4a>
 800aae4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aae8:	4299      	cmp	r1, r3
 800aaea:	d002      	beq.n	800aaf2 <__swsetup_r+0x46>
 800aaec:	4628      	mov	r0, r5
 800aaee:	f7ff f92f 	bl	8009d50 <_free_r>
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	6363      	str	r3, [r4, #52]	@ 0x34
 800aaf6:	89a3      	ldrh	r3, [r4, #12]
 800aaf8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aafc:	81a3      	strh	r3, [r4, #12]
 800aafe:	2300      	movs	r3, #0
 800ab00:	6063      	str	r3, [r4, #4]
 800ab02:	6923      	ldr	r3, [r4, #16]
 800ab04:	6023      	str	r3, [r4, #0]
 800ab06:	89a3      	ldrh	r3, [r4, #12]
 800ab08:	f043 0308 	orr.w	r3, r3, #8
 800ab0c:	81a3      	strh	r3, [r4, #12]
 800ab0e:	6923      	ldr	r3, [r4, #16]
 800ab10:	b94b      	cbnz	r3, 800ab26 <__swsetup_r+0x7a>
 800ab12:	89a3      	ldrh	r3, [r4, #12]
 800ab14:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ab18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab1c:	d003      	beq.n	800ab26 <__swsetup_r+0x7a>
 800ab1e:	4621      	mov	r1, r4
 800ab20:	4628      	mov	r0, r5
 800ab22:	f000 f8b3 	bl	800ac8c <__smakebuf_r>
 800ab26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab2a:	f013 0201 	ands.w	r2, r3, #1
 800ab2e:	d00a      	beq.n	800ab46 <__swsetup_r+0x9a>
 800ab30:	2200      	movs	r2, #0
 800ab32:	60a2      	str	r2, [r4, #8]
 800ab34:	6962      	ldr	r2, [r4, #20]
 800ab36:	4252      	negs	r2, r2
 800ab38:	61a2      	str	r2, [r4, #24]
 800ab3a:	6922      	ldr	r2, [r4, #16]
 800ab3c:	b942      	cbnz	r2, 800ab50 <__swsetup_r+0xa4>
 800ab3e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ab42:	d1c5      	bne.n	800aad0 <__swsetup_r+0x24>
 800ab44:	bd38      	pop	{r3, r4, r5, pc}
 800ab46:	0799      	lsls	r1, r3, #30
 800ab48:	bf58      	it	pl
 800ab4a:	6962      	ldrpl	r2, [r4, #20]
 800ab4c:	60a2      	str	r2, [r4, #8]
 800ab4e:	e7f4      	b.n	800ab3a <__swsetup_r+0x8e>
 800ab50:	2000      	movs	r0, #0
 800ab52:	e7f7      	b.n	800ab44 <__swsetup_r+0x98>
 800ab54:	20000024 	.word	0x20000024

0800ab58 <_sbrk_r>:
 800ab58:	b538      	push	{r3, r4, r5, lr}
 800ab5a:	4d06      	ldr	r5, [pc, #24]	@ (800ab74 <_sbrk_r+0x1c>)
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	4604      	mov	r4, r0
 800ab60:	4608      	mov	r0, r1
 800ab62:	602b      	str	r3, [r5, #0]
 800ab64:	f7f6 fe72 	bl	800184c <_sbrk>
 800ab68:	1c43      	adds	r3, r0, #1
 800ab6a:	d102      	bne.n	800ab72 <_sbrk_r+0x1a>
 800ab6c:	682b      	ldr	r3, [r5, #0]
 800ab6e:	b103      	cbz	r3, 800ab72 <_sbrk_r+0x1a>
 800ab70:	6023      	str	r3, [r4, #0]
 800ab72:	bd38      	pop	{r3, r4, r5, pc}
 800ab74:	200049dc 	.word	0x200049dc

0800ab78 <__assert_func>:
 800ab78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab7a:	4614      	mov	r4, r2
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	4b09      	ldr	r3, [pc, #36]	@ (800aba4 <__assert_func+0x2c>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4605      	mov	r5, r0
 800ab84:	68d8      	ldr	r0, [r3, #12]
 800ab86:	b954      	cbnz	r4, 800ab9e <__assert_func+0x26>
 800ab88:	4b07      	ldr	r3, [pc, #28]	@ (800aba8 <__assert_func+0x30>)
 800ab8a:	461c      	mov	r4, r3
 800ab8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab90:	9100      	str	r1, [sp, #0]
 800ab92:	462b      	mov	r3, r5
 800ab94:	4905      	ldr	r1, [pc, #20]	@ (800abac <__assert_func+0x34>)
 800ab96:	f000 f841 	bl	800ac1c <fiprintf>
 800ab9a:	f000 f8d5 	bl	800ad48 <abort>
 800ab9e:	4b04      	ldr	r3, [pc, #16]	@ (800abb0 <__assert_func+0x38>)
 800aba0:	e7f4      	b.n	800ab8c <__assert_func+0x14>
 800aba2:	bf00      	nop
 800aba4:	20000024 	.word	0x20000024
 800aba8:	0800b116 	.word	0x0800b116
 800abac:	0800b0e8 	.word	0x0800b0e8
 800abb0:	0800b0db 	.word	0x0800b0db

0800abb4 <_calloc_r>:
 800abb4:	b570      	push	{r4, r5, r6, lr}
 800abb6:	fba1 5402 	umull	r5, r4, r1, r2
 800abba:	b93c      	cbnz	r4, 800abcc <_calloc_r+0x18>
 800abbc:	4629      	mov	r1, r5
 800abbe:	f7ff f93b 	bl	8009e38 <_malloc_r>
 800abc2:	4606      	mov	r6, r0
 800abc4:	b928      	cbnz	r0, 800abd2 <_calloc_r+0x1e>
 800abc6:	2600      	movs	r6, #0
 800abc8:	4630      	mov	r0, r6
 800abca:	bd70      	pop	{r4, r5, r6, pc}
 800abcc:	220c      	movs	r2, #12
 800abce:	6002      	str	r2, [r0, #0]
 800abd0:	e7f9      	b.n	800abc6 <_calloc_r+0x12>
 800abd2:	462a      	mov	r2, r5
 800abd4:	4621      	mov	r1, r4
 800abd6:	f7fe f988 	bl	8008eea <memset>
 800abda:	e7f5      	b.n	800abc8 <_calloc_r+0x14>

0800abdc <__ascii_mbtowc>:
 800abdc:	b082      	sub	sp, #8
 800abde:	b901      	cbnz	r1, 800abe2 <__ascii_mbtowc+0x6>
 800abe0:	a901      	add	r1, sp, #4
 800abe2:	b142      	cbz	r2, 800abf6 <__ascii_mbtowc+0x1a>
 800abe4:	b14b      	cbz	r3, 800abfa <__ascii_mbtowc+0x1e>
 800abe6:	7813      	ldrb	r3, [r2, #0]
 800abe8:	600b      	str	r3, [r1, #0]
 800abea:	7812      	ldrb	r2, [r2, #0]
 800abec:	1e10      	subs	r0, r2, #0
 800abee:	bf18      	it	ne
 800abf0:	2001      	movne	r0, #1
 800abf2:	b002      	add	sp, #8
 800abf4:	4770      	bx	lr
 800abf6:	4610      	mov	r0, r2
 800abf8:	e7fb      	b.n	800abf2 <__ascii_mbtowc+0x16>
 800abfa:	f06f 0001 	mvn.w	r0, #1
 800abfe:	e7f8      	b.n	800abf2 <__ascii_mbtowc+0x16>

0800ac00 <__ascii_wctomb>:
 800ac00:	4603      	mov	r3, r0
 800ac02:	4608      	mov	r0, r1
 800ac04:	b141      	cbz	r1, 800ac18 <__ascii_wctomb+0x18>
 800ac06:	2aff      	cmp	r2, #255	@ 0xff
 800ac08:	d904      	bls.n	800ac14 <__ascii_wctomb+0x14>
 800ac0a:	228a      	movs	r2, #138	@ 0x8a
 800ac0c:	601a      	str	r2, [r3, #0]
 800ac0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac12:	4770      	bx	lr
 800ac14:	700a      	strb	r2, [r1, #0]
 800ac16:	2001      	movs	r0, #1
 800ac18:	4770      	bx	lr
	...

0800ac1c <fiprintf>:
 800ac1c:	b40e      	push	{r1, r2, r3}
 800ac1e:	b503      	push	{r0, r1, lr}
 800ac20:	4601      	mov	r1, r0
 800ac22:	ab03      	add	r3, sp, #12
 800ac24:	4805      	ldr	r0, [pc, #20]	@ (800ac3c <fiprintf+0x20>)
 800ac26:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac2a:	6800      	ldr	r0, [r0, #0]
 800ac2c:	9301      	str	r3, [sp, #4]
 800ac2e:	f7ff fd3b 	bl	800a6a8 <_vfiprintf_r>
 800ac32:	b002      	add	sp, #8
 800ac34:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac38:	b003      	add	sp, #12
 800ac3a:	4770      	bx	lr
 800ac3c:	20000024 	.word	0x20000024

0800ac40 <__swhatbuf_r>:
 800ac40:	b570      	push	{r4, r5, r6, lr}
 800ac42:	460c      	mov	r4, r1
 800ac44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac48:	2900      	cmp	r1, #0
 800ac4a:	b096      	sub	sp, #88	@ 0x58
 800ac4c:	4615      	mov	r5, r2
 800ac4e:	461e      	mov	r6, r3
 800ac50:	da0d      	bge.n	800ac6e <__swhatbuf_r+0x2e>
 800ac52:	89a3      	ldrh	r3, [r4, #12]
 800ac54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ac58:	f04f 0100 	mov.w	r1, #0
 800ac5c:	bf14      	ite	ne
 800ac5e:	2340      	movne	r3, #64	@ 0x40
 800ac60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ac64:	2000      	movs	r0, #0
 800ac66:	6031      	str	r1, [r6, #0]
 800ac68:	602b      	str	r3, [r5, #0]
 800ac6a:	b016      	add	sp, #88	@ 0x58
 800ac6c:	bd70      	pop	{r4, r5, r6, pc}
 800ac6e:	466a      	mov	r2, sp
 800ac70:	f000 f848 	bl	800ad04 <_fstat_r>
 800ac74:	2800      	cmp	r0, #0
 800ac76:	dbec      	blt.n	800ac52 <__swhatbuf_r+0x12>
 800ac78:	9901      	ldr	r1, [sp, #4]
 800ac7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ac7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ac82:	4259      	negs	r1, r3
 800ac84:	4159      	adcs	r1, r3
 800ac86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac8a:	e7eb      	b.n	800ac64 <__swhatbuf_r+0x24>

0800ac8c <__smakebuf_r>:
 800ac8c:	898b      	ldrh	r3, [r1, #12]
 800ac8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac90:	079d      	lsls	r5, r3, #30
 800ac92:	4606      	mov	r6, r0
 800ac94:	460c      	mov	r4, r1
 800ac96:	d507      	bpl.n	800aca8 <__smakebuf_r+0x1c>
 800ac98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ac9c:	6023      	str	r3, [r4, #0]
 800ac9e:	6123      	str	r3, [r4, #16]
 800aca0:	2301      	movs	r3, #1
 800aca2:	6163      	str	r3, [r4, #20]
 800aca4:	b003      	add	sp, #12
 800aca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aca8:	ab01      	add	r3, sp, #4
 800acaa:	466a      	mov	r2, sp
 800acac:	f7ff ffc8 	bl	800ac40 <__swhatbuf_r>
 800acb0:	9f00      	ldr	r7, [sp, #0]
 800acb2:	4605      	mov	r5, r0
 800acb4:	4639      	mov	r1, r7
 800acb6:	4630      	mov	r0, r6
 800acb8:	f7ff f8be 	bl	8009e38 <_malloc_r>
 800acbc:	b948      	cbnz	r0, 800acd2 <__smakebuf_r+0x46>
 800acbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acc2:	059a      	lsls	r2, r3, #22
 800acc4:	d4ee      	bmi.n	800aca4 <__smakebuf_r+0x18>
 800acc6:	f023 0303 	bic.w	r3, r3, #3
 800acca:	f043 0302 	orr.w	r3, r3, #2
 800acce:	81a3      	strh	r3, [r4, #12]
 800acd0:	e7e2      	b.n	800ac98 <__smakebuf_r+0xc>
 800acd2:	89a3      	ldrh	r3, [r4, #12]
 800acd4:	6020      	str	r0, [r4, #0]
 800acd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acda:	81a3      	strh	r3, [r4, #12]
 800acdc:	9b01      	ldr	r3, [sp, #4]
 800acde:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ace2:	b15b      	cbz	r3, 800acfc <__smakebuf_r+0x70>
 800ace4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ace8:	4630      	mov	r0, r6
 800acea:	f000 f81d 	bl	800ad28 <_isatty_r>
 800acee:	b128      	cbz	r0, 800acfc <__smakebuf_r+0x70>
 800acf0:	89a3      	ldrh	r3, [r4, #12]
 800acf2:	f023 0303 	bic.w	r3, r3, #3
 800acf6:	f043 0301 	orr.w	r3, r3, #1
 800acfa:	81a3      	strh	r3, [r4, #12]
 800acfc:	89a3      	ldrh	r3, [r4, #12]
 800acfe:	431d      	orrs	r5, r3
 800ad00:	81a5      	strh	r5, [r4, #12]
 800ad02:	e7cf      	b.n	800aca4 <__smakebuf_r+0x18>

0800ad04 <_fstat_r>:
 800ad04:	b538      	push	{r3, r4, r5, lr}
 800ad06:	4d07      	ldr	r5, [pc, #28]	@ (800ad24 <_fstat_r+0x20>)
 800ad08:	2300      	movs	r3, #0
 800ad0a:	4604      	mov	r4, r0
 800ad0c:	4608      	mov	r0, r1
 800ad0e:	4611      	mov	r1, r2
 800ad10:	602b      	str	r3, [r5, #0]
 800ad12:	f7f6 fd73 	bl	80017fc <_fstat>
 800ad16:	1c43      	adds	r3, r0, #1
 800ad18:	d102      	bne.n	800ad20 <_fstat_r+0x1c>
 800ad1a:	682b      	ldr	r3, [r5, #0]
 800ad1c:	b103      	cbz	r3, 800ad20 <_fstat_r+0x1c>
 800ad1e:	6023      	str	r3, [r4, #0]
 800ad20:	bd38      	pop	{r3, r4, r5, pc}
 800ad22:	bf00      	nop
 800ad24:	200049dc 	.word	0x200049dc

0800ad28 <_isatty_r>:
 800ad28:	b538      	push	{r3, r4, r5, lr}
 800ad2a:	4d06      	ldr	r5, [pc, #24]	@ (800ad44 <_isatty_r+0x1c>)
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	4604      	mov	r4, r0
 800ad30:	4608      	mov	r0, r1
 800ad32:	602b      	str	r3, [r5, #0]
 800ad34:	f7f6 fd72 	bl	800181c <_isatty>
 800ad38:	1c43      	adds	r3, r0, #1
 800ad3a:	d102      	bne.n	800ad42 <_isatty_r+0x1a>
 800ad3c:	682b      	ldr	r3, [r5, #0]
 800ad3e:	b103      	cbz	r3, 800ad42 <_isatty_r+0x1a>
 800ad40:	6023      	str	r3, [r4, #0]
 800ad42:	bd38      	pop	{r3, r4, r5, pc}
 800ad44:	200049dc 	.word	0x200049dc

0800ad48 <abort>:
 800ad48:	b508      	push	{r3, lr}
 800ad4a:	2006      	movs	r0, #6
 800ad4c:	f000 f82c 	bl	800ada8 <raise>
 800ad50:	2001      	movs	r0, #1
 800ad52:	f7f6 fd03 	bl	800175c <_exit>

0800ad56 <_raise_r>:
 800ad56:	291f      	cmp	r1, #31
 800ad58:	b538      	push	{r3, r4, r5, lr}
 800ad5a:	4605      	mov	r5, r0
 800ad5c:	460c      	mov	r4, r1
 800ad5e:	d904      	bls.n	800ad6a <_raise_r+0x14>
 800ad60:	2316      	movs	r3, #22
 800ad62:	6003      	str	r3, [r0, #0]
 800ad64:	f04f 30ff 	mov.w	r0, #4294967295
 800ad68:	bd38      	pop	{r3, r4, r5, pc}
 800ad6a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ad6c:	b112      	cbz	r2, 800ad74 <_raise_r+0x1e>
 800ad6e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad72:	b94b      	cbnz	r3, 800ad88 <_raise_r+0x32>
 800ad74:	4628      	mov	r0, r5
 800ad76:	f000 f831 	bl	800addc <_getpid_r>
 800ad7a:	4622      	mov	r2, r4
 800ad7c:	4601      	mov	r1, r0
 800ad7e:	4628      	mov	r0, r5
 800ad80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad84:	f000 b818 	b.w	800adb8 <_kill_r>
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d00a      	beq.n	800ada2 <_raise_r+0x4c>
 800ad8c:	1c59      	adds	r1, r3, #1
 800ad8e:	d103      	bne.n	800ad98 <_raise_r+0x42>
 800ad90:	2316      	movs	r3, #22
 800ad92:	6003      	str	r3, [r0, #0]
 800ad94:	2001      	movs	r0, #1
 800ad96:	e7e7      	b.n	800ad68 <_raise_r+0x12>
 800ad98:	2100      	movs	r1, #0
 800ad9a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ad9e:	4620      	mov	r0, r4
 800ada0:	4798      	blx	r3
 800ada2:	2000      	movs	r0, #0
 800ada4:	e7e0      	b.n	800ad68 <_raise_r+0x12>
	...

0800ada8 <raise>:
 800ada8:	4b02      	ldr	r3, [pc, #8]	@ (800adb4 <raise+0xc>)
 800adaa:	4601      	mov	r1, r0
 800adac:	6818      	ldr	r0, [r3, #0]
 800adae:	f7ff bfd2 	b.w	800ad56 <_raise_r>
 800adb2:	bf00      	nop
 800adb4:	20000024 	.word	0x20000024

0800adb8 <_kill_r>:
 800adb8:	b538      	push	{r3, r4, r5, lr}
 800adba:	4d07      	ldr	r5, [pc, #28]	@ (800add8 <_kill_r+0x20>)
 800adbc:	2300      	movs	r3, #0
 800adbe:	4604      	mov	r4, r0
 800adc0:	4608      	mov	r0, r1
 800adc2:	4611      	mov	r1, r2
 800adc4:	602b      	str	r3, [r5, #0]
 800adc6:	f7f6 fcb9 	bl	800173c <_kill>
 800adca:	1c43      	adds	r3, r0, #1
 800adcc:	d102      	bne.n	800add4 <_kill_r+0x1c>
 800adce:	682b      	ldr	r3, [r5, #0]
 800add0:	b103      	cbz	r3, 800add4 <_kill_r+0x1c>
 800add2:	6023      	str	r3, [r4, #0]
 800add4:	bd38      	pop	{r3, r4, r5, pc}
 800add6:	bf00      	nop
 800add8:	200049dc 	.word	0x200049dc

0800addc <_getpid_r>:
 800addc:	f7f6 bca6 	b.w	800172c <_getpid>

0800ade0 <_init>:
 800ade0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ade2:	bf00      	nop
 800ade4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ade6:	bc08      	pop	{r3}
 800ade8:	469e      	mov	lr, r3
 800adea:	4770      	bx	lr

0800adec <_fini>:
 800adec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adee:	bf00      	nop
 800adf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adf2:	bc08      	pop	{r3}
 800adf4:	469e      	mov	lr, r3
 800adf6:	4770      	bx	lr
